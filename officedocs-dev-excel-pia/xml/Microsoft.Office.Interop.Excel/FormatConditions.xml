<Type Name="FormatConditions" FullName="Microsoft.Office.Interop.Excel.FormatConditions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ba5c29fb9f36cf63da85041a757db4dd4b830ce1" /><Meta Name="ms.sourcegitcommit" Value="f58b07bd9753015d401a69461f61bc174edee843" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="01/27/2021" /><Meta Name="ms.locfileid" Value="50012174" /></Metadata><TypeSignature Language="C#" Value="public interface FormatConditions : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract FormatConditions implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Excel.FormatConditions" />
  <TypeSignature Language="VB.NET" Value="Public Interface FormatConditions&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="public interface class FormatConditions : System::Collections::IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("00024424-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(2)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4096)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="3e7c3-101">1 つのセル範囲の条件付き書式のコレクションを表します。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-101">Represents the collection of conditional formats for a single range.</span></span></summary>
    <remarks><para><span data-ttu-id="3e7c3-102"><b>FormatConditions コレクションには</b>、最大 3 つの条件付き書式を含めることもできます。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-102">The <b>FormatConditions</b> collection can contain up to three conditional formats.</span></span> <span data-ttu-id="3e7c3-103">各書式はオブジェクトによって表 <see cref="T:Microsoft.Office.Interop.Excel.FormatCondition" /> されます。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-103">Each format is represented by a <see cref="T:Microsoft.Office.Interop.Excel.FormatCondition" /> object.</span></span></para>
      <para><span data-ttu-id="3e7c3-104"><see cref="P:Microsoft.Office.Interop.Excel.Range.FormatConditions" /> <b>FormatConditions オブジェクトを取得するには、このプロパティを使用</b>します。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-104">Use the <see cref="P:Microsoft.Office.Interop.Excel.Range.FormatConditions" /> property to return a <b>FormatConditions</b> object.</span></span> <span data-ttu-id="3e7c3-105">このメソッド <see cref="M:Microsoft.Office.Interop.Excel.FormatConditions.Add(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object)" /> を使用して新しい条件付き書式を作成し、そのメソッドを使用して既存の条件付き書式 <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Modify(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object)" /> を変更します。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-105">Use the <see cref="M:Microsoft.Office.Interop.Excel.FormatConditions.Add(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object)" /> method to create a new conditional format, and use the <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Modify(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object)" /> method to change an existing conditional format.</span></span></para>
      <para><span data-ttu-id="3e7c3-106">1 つの範囲に対して 3 つ以上の条件付き書式を作成すると <b>、Add メソッドは</b> 失敗します。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-106">If you try to create more than three conditional formats for a single range, the <b>Add</b> method fails.</span></span> <span data-ttu-id="3e7c3-107">範囲に 3 つの書式がある場合は <b>、Modify</b> メソッドを使用して書式の 1 つを変更するか、メソッドを使用して書式を削除し <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Delete" /> <b>、Add</b> メソッドを使用して新しい書式を作成できます。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-107">If a range has three formats, you can use the <b>Modify</b> method to change one of the formats, or you can use the <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Delete" /> method to delete a format and then use the <b>Add</b> method to create a new format.</span></span></para>
      <para><span data-ttu-id="3e7c3-108">条件付き書式の詳細については、オブジェクトを参照 <see cref="T:Microsoft.Office.Interop.Excel.FormatCondition" /> してください。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-108">For more information about conditional formats, see the <see cref="T:Microsoft.Office.Interop.Excel.FormatCondition" /> object.</span></span></para>
      <para> </para></remarks>
  </Docs>
  <Members>
    <Member MemberName="_Default">
      <MemberSignature Language="C#" Value="public object this[object Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object _Default(object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatConditions._Default(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property _Default(Index As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ Index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.TypeLibFunc(1024)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Index">To be added.</param>
        <summary><span data-ttu-id="3e7c3-109">内部使用のため予約済みです。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-109">Reserved for internal use.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public object Add (Microsoft.Office.Interop.Excel.XlFormatConditionType Type, object Operator, object Formula1, object Formula2, object String, object TextOperator, object DateOperator, object ScopeType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Add([in]valuetype Microsoft.Office.Interop.Excel.XlFormatConditionType Type, [in]object Operator, [in]object Formula1, [in]object Formula2, [in]object String, [in]object TextOperator, [in]object DateOperator, [in]object ScopeType) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatConditions.Add(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (Type As XlFormatConditionType, Optional Operator As Object, Optional Formula1 As Object, Optional Formula2 As Object, Optional String As Object, Optional TextOperator As Object, Optional DateOperator As Object, Optional ScopeType As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(181)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Type" Type="Microsoft.Office.Interop.Excel.XlFormatConditionType" />
        <Parameter Name="Operator" Type="System.Object" />
        <Parameter Name="Formula1" Type="System.Object" />
        <Parameter Name="Formula2" Type="System.Object" />
        <Parameter Name="String" Type="System.Object" />
        <Parameter Name="TextOperator" Type="System.Object" />
        <Parameter Name="DateOperator" Type="System.Object" />
        <Parameter Name="ScopeType" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Type"><span data-ttu-id="3e7c3-110">.</span><span class="sxs-lookup"><span data-stu-id="3e7c3-110">.</span></span> <span data-ttu-id="3e7c3-111">(<see cref="T:Microsoft.Office.Interop.Excel.XlFormatConditionType" />.</span><span class="sxs-lookup"><span data-stu-id="3e7c3-111">(<see cref="T:Microsoft.Office.Interop.Excel.XlFormatConditionType" />.</span></span> <span data-ttu-id="3e7c3-112">セル値または演算式のどちらを基に条件付き書式を設定するかを指定します。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-112">Specifies whether the conditional format is based on a cell value or an expression.</span></span></param>
        <param name="Operator"><span data-ttu-id="3e7c3-113">条件付き書式の演算子です。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-113">The conditional format operator.</span></span> <span data-ttu-id="3e7c3-114">使用できる定数は、次に示す定数です <see cref="T:Microsoft.Office.Interop.Excel.XlFormatConditionOperator" /> 。 <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlBetween" /> <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlEqual" /> <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlGreater" /> <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlGreaterEqual" /> <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlLess" /> <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlLessEqual" /> <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlNotBetween" /> <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlNotEqual" /></span><span class="sxs-lookup"><span data-stu-id="3e7c3-114">Can be one of the following <see cref="T:Microsoft.Office.Interop.Excel.XlFormatConditionOperator" /> constants: <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlBetween" />, <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlEqual" />, <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlGreater" />, <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlGreaterEqual" />, <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlLess" />, <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlLessEqual" />, <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlNotBetween" />, or <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlNotEqual" />.</span></span> <span data-ttu-id="3e7c3-115">If <paramref name="Type" /> <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionType.xlExpression" /> is, the <paramref name="Operator" /> argument is ignored.</span><span class="sxs-lookup"><span data-stu-id="3e7c3-115">If <paramref name="Type" /> is <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionType.xlExpression" />, the <paramref name="Operator" /> argument is ignored.</span></span></param>
        <param name="Formula1"><span data-ttu-id="3e7c3-116">条件付き書式に関連付けられる値または式。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-116">The value or expression associated with the conditional format.</span></span> <span data-ttu-id="3e7c3-117">定数値、文字列 <b>値、セル</b> 参照、または数式を指定できます。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-117">Can be a constant value, a <b>String</b> value, a cell reference, or a formula.</span></span></param>
        <param name="Formula2"><span data-ttu-id="3e7c3-118">条件付き書式の 2 番目の部分に関連付けられている値または式 (それ以外の場合、この <paramref name="Operator" /> <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlBetween" /> <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlNotBetween" /> 引数は無視されます)。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-118">The value or expression associated with the second part of the conditional format when <paramref name="Operator" /> is <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlBetween" /> or <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlNotBetween" /> (otherwise, this argument is ignored).</span></span> <span data-ttu-id="3e7c3-119">定数値、文字列値、セル参照、または数式を指定できます。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-119">Can be a constant value, a string value, a cell reference, or a formula.</span></span></param>
        <param name="String">To be added.</param>
        <param name="TextOperator">To be added.</param>
        <param name="DateOperator">To be added.</param>
        <param name="ScopeType">To be added.</param>
        <summary><span data-ttu-id="3e7c3-120">新しい条件付き書式を追加します。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-120">Adds a new conditional format.</span></span></summary>
        <returns><span data-ttu-id="3e7c3-121">新 <see cref="T:Microsoft.Office.Interop.Excel.FormatCondition" /> しい条件付き書式を表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-121">A <see cref="T:Microsoft.Office.Interop.Excel.FormatCondition" /> object that represents the new conditional format.</span></span></returns>
        <remarks><para><span data-ttu-id="3e7c3-122">範囲に対して 3 つ以上の条件付き書式を定義することはできません。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-122">You cannot define more than three conditional formats for a range.</span></span> <span data-ttu-id="3e7c3-123">このメソッドを使用して既存の条件付き書式を変更するか、新しい書式を追加する前に既存の書式を <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Modify(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Delete" /> 削除するメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-123">Use the <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Modify(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object)" /> method to modify an existing conditional format, or use the <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Delete" /> method to delete an existing format before adding a new one.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAboveAverage">
      <MemberSignature Language="C#" Value="public object AddAboveAverage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AddAboveAverage() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatConditions.AddAboveAverage" />
      <MemberSignature Language="VB.NET" Value="Public Function AddAboveAverage () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AddAboveAverage();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2621)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3e7c3-124">指定した範囲の <see cref="T:Microsoft.Office.Interop.Excel.AboveAverage" /> 条件付き書式ルールを表す新しいオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-124">Returns a new <see cref="T:Microsoft.Office.Interop.Excel.AboveAverage" /> object representing a conditional formatting rule for the specified range.</span></span></summary>
        <returns><span data-ttu-id="3e7c3-125"><see cref="T:Microsoft.Office.Interop.Excel.AboveAverage" /> object</span><span class="sxs-lookup"><span data-stu-id="3e7c3-125"><see cref="T:Microsoft.Office.Interop.Excel.AboveAverage" /> object</span></span></returns>
        <remarks><para><span data-ttu-id="3e7c3-126">この <see cref="T:Microsoft.Office.Interop.Excel.AboveAverage" /> オブジェクトは、セル範囲の平均または標準偏差の上または下の値を検索するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-126">The <see cref="T:Microsoft.Office.Interop.Excel.AboveAverage" /> object is used to find values above or below an average or standard deviation in a range of cells.</span></span> <span data-ttu-id="3e7c3-127">たとえば、年次の業績評価から成績が平均より上の社員を特定したり、品質評価で 2 つの標準偏差よりも下に入る二次材料を特定したりできます。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-127">For example, you can find the above average performers in an annual performance review or you can locate manufactured materials that fall below two standard deviations in a quality rating.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AddColorScale">
      <MemberSignature Language="C#" Value="public object AddColorScale (int ColorScaleType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AddColorScale([in]int32 ColorScaleType) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatConditions.AddColorScale(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddColorScale (ColorScaleType As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AddColorScale(int ColorScaleType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2616)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ColorScaleType" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ColorScaleType"><span data-ttu-id="3e7c3-128">カラー スケールの種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-128">The type of color scale.</span></span></param>
        <summary><span data-ttu-id="3e7c3-129">セルの色でグラデーションを使用して、選択した範囲に含まれるセルの値の相対的な違いを示す条件付き書式ルールを表す新しいオブジェクト <see cref="T:Microsoft.Office.Interop.Excel.ColorScale" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-129">Returns a new <see cref="T:Microsoft.Office.Interop.Excel.ColorScale" /> object representing a conditional formatting rule that uses gradations in cell colors to indicate relative differences in the values of cells included in a selected range.</span></span></summary>
        <returns><span data-ttu-id="3e7c3-130"><see cref="T:Microsoft.Office.Interop.Excel.ColorScale" /> object</span><span class="sxs-lookup"><span data-stu-id="3e7c3-130"><see cref="T:Microsoft.Office.Interop.Excel.ColorScale" /> object</span></span></returns>
        <remarks><para><span data-ttu-id="3e7c3-p110">カラー スケールは、データの分布や偏差を把握するうえで視覚的な手掛かりとなります。カラー スケールでカラー バリエーションを使用して、特定の範囲内のセルの値の相対的な違いを特定できます。異なる色や、色のグラデーションがセル値の違いを示します。たとえば、3 色スケールでは、相対値の高いセルはi緑色、中程度の値のセルは黄色、値の低いセルは赤色になるように指定できます。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-p110">Color scales are visual guides that help you understand data distribution and variation. A color scale helps you identify relative differences in the values of cells in a given range by using color variation. Different colors and gradations between colors represent differences in cell values. For example, in a three-color scale, you can specify that cells with the highest relative data values are green, cells with intermediate values are yellow, and cells with the lowest values are red.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDatabar">
      <MemberSignature Language="C#" Value="public object AddDatabar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AddDatabar() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatConditions.AddDatabar" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDatabar () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AddDatabar();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2618)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3e7c3-135">指定した範囲 <see cref="T:Microsoft.Office.Interop.Excel.Databar" /> のデータ バーの条件付き書式ルールを表すオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-135">Returns a <see cref="T:Microsoft.Office.Interop.Excel.Databar" /> object representing a data bar conditional formatting rule for the specified range.</span></span></summary>
        <returns><span data-ttu-id="3e7c3-136"><see cref="T:Microsoft.Office.Interop.Excel.Databar" /> object</span><span class="sxs-lookup"><span data-stu-id="3e7c3-136"><see cref="T:Microsoft.Office.Interop.Excel.Databar" /> object</span></span></returns>
        <remarks><para><span data-ttu-id="3e7c3-p111">データ バーを使用すると、他のセルと相対的にセルの値を確認できます。データ バーの長さは、セルの値を表します。バーが長いほど値が大きいことを、バーが短いほど値が小さいことを示します。ホリデー シーズン中の売上レポートから、最も売れ行きのよかった玩具と最も売れ行きの悪かった玩具を特定する場合など、特に大量のデータの中で上位の数値と下位の数値を特定する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-p111">Data bars help you see the value of a cell relative to other cells. The length of the data bar represents the value in the cell. A longer bar represents a higher value and a shorter bar represents a lower value. Data bars are useful in spotting higher and lower numbers especially with large amounts of data, such as top and bottom selling toys in a holiday sales report.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AddIconSetCondition">
      <MemberSignature Language="C#" Value="public object AddIconSetCondition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AddIconSetCondition() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatConditions.AddIconSetCondition" />
      <MemberSignature Language="VB.NET" Value="Public Function AddIconSetCondition () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AddIconSetCondition();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2619)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3e7c3-141">指定した範囲の <see cref="T:Microsoft.Office.Interop.Excel.IconSetCondition" /> アイコン セットの条件付き書式ルールを表す新しいオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-141">Returns a new <see cref="T:Microsoft.Office.Interop.Excel.IconSetCondition" /> object which represents an icon set conditional formatting rule for the specified range.</span></span></summary>
        <returns><span data-ttu-id="3e7c3-142"><see cref="T:Microsoft.Office.Interop.Excel.IconSetCondition" /> object</span><span class="sxs-lookup"><span data-stu-id="3e7c3-142"><see cref="T:Microsoft.Office.Interop.Excel.IconSetCondition" /> object</span></span></returns>
        <remarks><para><span data-ttu-id="3e7c3-p112">しきい値によりデータを 3 ～ 5 つのカテゴリに分類して各カテゴリの内容を示唆できるようにするには、アイコン セットを使用します。各アイコンは、ある範囲の値を表します。たとえば、3 つの矢印によるアイコン セットを使用する場合、赤の上向き矢印は大きい値を、黄色の横向き矢印は中程度の値を、緑の下向き矢印は小さい値を表します。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-p112">Use an icon set to annotate and classify data into three to five categories separated by a threshold value. Each icon represents a range of values. For example, in the 3 Arrows icon set, the red up arrow represents higher values, the yellow sideways arrow represents middle values, and the green down arrow represents lower values.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTop10">
      <MemberSignature Language="C#" Value="public object AddTop10 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AddTop10() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatConditions.AddTop10" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTop10 () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AddTop10();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2620)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3e7c3-146">指定した範囲 <see cref="T:Microsoft.Office.Interop.Excel.Top10" /> の条件付き書式ルールを表すオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-146">Returns a <see cref="T:Microsoft.Office.Interop.Excel.Top10" /> object representing a conditional formatting rule for the specified range.</span></span></summary>
        <returns><span data-ttu-id="3e7c3-147"><see cref="T:Microsoft.Office.Interop.Excel.Top10" /> object</span><span class="sxs-lookup"><span data-stu-id="3e7c3-147"><see cref="T:Microsoft.Office.Interop.Excel.Top10" /> object</span></span></returns>
        <remarks><para><span data-ttu-id="3e7c3-148">オブジェクトを使用すると、指定した切り離し値に基づいて、セル範囲の最高値と最低値 <see cref="T:Microsoft.Office.Interop.Excel.Top10" /> を検索できます。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-148">Using the <see cref="T:Microsoft.Office.Interop.Excel.Top10" /> object, you can find the highest and lowest values in a range of cells based on a cutoff value that you specify.</span></span> <span data-ttu-id="3e7c3-149">たとえば、地域レポートから売れ行きのよい商品のうち上位 5 つや、顧客調査で下位 15% に入る商品、部門の社員分析で上位 25 の給与額を特定できます。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-149">For example, you can find the top five selling products in a regional report, the bottom 15 percent of products in a customer survey, or the top 25 salaries in a department personnel analysis.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AddUniqueValues">
      <MemberSignature Language="C#" Value="public object AddUniqueValues ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AddUniqueValues() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatConditions.AddUniqueValues" />
      <MemberSignature Language="VB.NET" Value="Public Function AddUniqueValues () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AddUniqueValues();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2622)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3e7c3-150">指定した範囲の <see cref="T:Microsoft.Office.Interop.Excel.UniqueValues" /> 条件付き書式ルールを表す新しいオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-150">Returns a new <see cref="T:Microsoft.Office.Interop.Excel.UniqueValues" /> object representing a conditional formatting rule for the specified range.</span></span></summary>
        <returns><span data-ttu-id="3e7c3-151"><see cref="T:Microsoft.Office.Interop.Excel.UniqueValues" /> object</span><span class="sxs-lookup"><span data-stu-id="3e7c3-151"><see cref="T:Microsoft.Office.Interop.Excel.UniqueValues" /> object</span></span></returns>
        <remarks><para><span data-ttu-id="3e7c3-152">オブジェクトを使用すると、 <see cref="T:Microsoft.Office.Interop.Excel.UniqueValues" /> 一意の値または重複する値を含むセルをすばやく視覚化できます。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-152">You can use the <see cref="T:Microsoft.Office.Interop.Excel.UniqueValues" /> object to quickly visualize cells that contain either unique or duplicate values.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatConditions.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Application ^ Application { Microsoft::Office::Interop::Excel::Application ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3e7c3-153">Microsoft Excel アプリケーション <see cref="T:Microsoft.Office.Interop.Excel.Application" /> を表すオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-153">Returns an <see cref="T:Microsoft.Office.Interop.Excel.Application" /> object that represents the Microsoft Excel application.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatConditions.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(118)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(118)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3e7c3-154">コレクション内にあるオブジェクトの数を返します。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-154">Returns the number of objects in the collection.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatConditions.Creator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Creator As XlCreator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlCreator Creator { Microsoft::Office::Interop::Excel::XlCreator get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3e7c3-155">このオブジェクトを作成したアプリケーションを示す、32 ビットの整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-155">Returns a 32-bit integer that indicates the application in which this object was created.</span></span></summary>
        <value>To be added.</value>
        <remarks><para><span data-ttu-id="3e7c3-156">Excel で作成されたオブジェクトの場合は、文字列 XCEL を表す 16 進数の 5843454C を返します。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-156">If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C.</span></span></para>
          <para><span data-ttu-id="3e7c3-157"><b>Creator</b> プロパティは、各アプリケーションに 4 文字の作成元のコードが付加される Macintosh 版 Microsoft Excel で使用するように設計されました。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-157">The <b>Creator</b> property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code.</span></span> <span data-ttu-id="3e7c3-158">たとえば、Microsoft Excel の作成元コードは XCEL です。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-158">For example, Microsoft Excel has the creator code XCEL.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public void Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Delete() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatConditions.Delete" />
      <MemberSignature Language="VB.NET" Value="Public Sub Delete ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Delete();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(117)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3e7c3-159">オブジェクトを削除します。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-159">Deletes the object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatConditions.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-4)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1024)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object Item (object Index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Item([in]object Index) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatConditions.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Item (Index As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Item(System::Object ^ Index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(170)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Index"><span data-ttu-id="3e7c3-160">Required <b>Object</b>.</span><span class="sxs-lookup"><span data-stu-id="3e7c3-160">Required <b>Object</b>.</span></span> <span data-ttu-id="3e7c3-161">オブジェクトのインデックス番号を指定します。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-161">The index number for the object.</span></span></param>
        <summary><span data-ttu-id="3e7c3-162">コレクションから単一のオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-162">Returns a single object from a collection.</span></span></summary>
        <returns><span data-ttu-id="3e7c3-163"><b>Object</b></span><span class="sxs-lookup"><span data-stu-id="3e7c3-163"><b>Object</b></span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatConditions.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parent { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3e7c3-164">指定されたオブジェクトの親オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="3e7c3-164">Returns the parent object for the specified object.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>