<Type Name="WorksheetFunction" FullName="Microsoft.Office.Interop.Excel.WorksheetFunction">
  <TypeSignature Language="C#" Value="public interface WorksheetFunction" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract WorksheetFunction" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Excel.WorksheetFunction" />
  <TypeSignature Language="VB.NET" Value="Public Interface WorksheetFunction" />
  <TypeSignature Language="C++ CLI" Value="public interface class WorksheetFunction" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("00020845-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(2)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4096)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Visual Basic から呼び出すことができる Excel のワークシート関数のコンテナーとして使用されます。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="_WSFunction">
      <MemberSignature Language="C#" Value="public object _WSFunction (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object _WSFunction([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction._WSFunction(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function _WSFunction (Optional Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(169)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1088)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>内部使用のため予約済みです。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccrInt">
      <MemberSignature Language="C#" Value="public double AccrInt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AccrInt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AccrInt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AccrInt (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16853)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">発行日 - 証券の発行日を指定します。</param>
        <param name="Arg2">初回利払日 - 証券の初回利払日を指定します。</param>
        <param name="Arg3">受渡日 - 証券の受渡日を指定します。</param>
        <param name="Arg4">利率 - 証券の年利を指定します。</param>
        <param name="Arg5">額面 - 証券の額面価格を指定します。</param>
        <param name="Arg6">頻度 - 年間の利息支払回数を指定します。</param>
        <param name="Arg7">基準 - 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>定期的に利息が支払われる証券の未収利息額を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: DATE 関数を使用するか、他の数式または関数の結果として、日付を入力する必要があります。 たとえば、2008 年 5 月 23 日の DATE(2008,5,23) を使用します。 日付をテキストとして入力した場合、問題が発生することができます。</para>
          <para>次の表の説明のために使用できる値<paramref name="Arg5" />。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4</term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AccrIntM">
      <MemberSignature Language="C#" Value="public double AccrIntM (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AccrIntM([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AccrIntM(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AccrIntM (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16854)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">証券の発行日を指定します。</param>
        <param name="Arg2">証券の満期日を指定します。</param>
        <param name="Arg3">証券の年利を指定します。</param>
        <param name="Arg4">証券の額面価格を指定します。額面を省略すると、$1,000 を指定したと見なされます。</param>
        <param name="Arg5">計算に使用する基準日数を示す数値を指定します。</param>
        <summary>満期日に利息が支払われる証券の未収利息額を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: DATE 関数を使用するか、他の数式または関数の結果として、日付を入力する必要があります。 たとえば、2008 年 5 月 23 日の DATE(2008,5,23) を使用します。 日付をテキストとして入力した場合、問題が発生することができます。</para>
          <para>次の表の説明のために使用できる値<paramref name="Arg5" />。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4</term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>次の一覧には、日を操作するときに注意すべき情報が含まれています。</para>
          <list type="bullet">
            <item>
              <description>Excel では、日付は集計に使用できるようにシリアル値として格納されます。既定では、1900 年 1 月 1 日のシリアル値は 1、2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後であるためシリアル値は 39,448 になります。</description>
            </item>
            <item>
              <description>発行日、満期日、基準に整数以外の値を指定すると、小数点以下が切り捨てられます。</description>
            </item>
            <item>
              <description>発行日または満期日に無効な日付を指定すると、エラーになります。</description>
            </item>
            <item>
              <description>利率 ≦ 0 または基準 ≦ 0 の場合、エラーになります。</description>
            </item>
            <item>
              <description>場合単位&lt;0 または基準&gt;4 日エラーが生成されます。 </description>
            </item>
            <item>
              <description>発行日 ≧ 満期日の場合、エラーになります。</description>
            </item>
            <item>
              <description>ACCRINTM 関数は次の数式で表されます。 </description>
            </item>
          </list>
          <para>各項目の意味は次のとおりです。</para>
          <para>A = 未収日数を月単位の数。 成熟度項目での目的、発行日から満期日までの日数の数が使用されます。</para>
          <para>D = 年間 1 年ごと。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public double Acos (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acos([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acos(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acos (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acos(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16483)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">求める角度のコサインの値を、-1 ～ 1 の範囲で指定します。</param>
        <summary>コサインまたは数値のコサインを返します。 アーク コサインとは角度のコサインは、 <paramref name="Arg1" />。 戻り値の角度は、π に、0 (ゼロ) の範囲のラジアンで与えられます。</summary>
        <returns>To be added.</returns>
        <remarks><para>結果をラジアンから度に変換する場合は、180/PI() を掛けるか、Degrees メソッドを使用します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Acosh">
      <MemberSignature Language="C#" Value="public double Acosh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acosh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acosh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acosh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16617)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 以上の実数を指定します。</param>
        <summary>数値の双曲線逆余弦を返します。 番号は、1 以上にする必要があります。 逆双曲線余弦は、その双曲線余弦値<paramref name="Arg1" />と、 <paramref name="Arg1" />。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Acot">
      <MemberSignature Language="C#" Value="public double Acot (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acot([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acot(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acot (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acot(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16932)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">求める角度の逆余接。</param>
        <summary>数値の逆余接 (コタンジェントの逆関数) を 0 ～ Pi の範囲のラジアンで取得します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Acoth">
      <MemberSignature Language="C#" Value="public double Acoth (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acoth([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acoth(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acoth (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acoth(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16933)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">双曲線余接を取得する角度を指定します。</param>
        <summary>数値の双曲線逆余接 (ハイパーボリック コタンジェントの逆関数) を返します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Aggregate">
      <MemberSignature Language="C#" Value="public double Aggregate (double Arg1, double Arg2, Microsoft.Office.Interop.Excel.Range Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Aggregate([in]float64 Arg1, [in]float64 Arg2, [in]class Microsoft.Office.Interop.Excel.Range Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Aggregate(System.Double,System.Double,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Aggregate (Arg1 As Double, Arg2 As Double, Arg3 As Range, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16869)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">集計方法: 使用する関数を示す 1 ～ 19 の数値を指定します。</param>
        <param name="Arg2">オプション: 関数の評価範囲のうちで無視する値を表す数値を指定します。</param>
        <param name="Arg3">参照 1: 集計値を求める関数に指定する複数の引数のうち、最初の引数の数値を指定します。</param>
        <param name="Arg4">参照 2 ～ 参照 30: 集計値を求める対象の 2 番目から 30 番目までの引数の数値を指定します。</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>リストまたはデータベースの集計を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>次の制約は、<b>集計</b>値に基づいて、Ref 引数 (Arg3 - Arg 30) に適用されます。</para>
          <list type="table">
            <item>
              <term>1 ～ 13</term>
              <description>有効な型: 任意のセル参照のインター セクションの定義済みの共用体名 referencesInvalid 型の構造化: 実際のデータの配列</description>
              <description>有効な型: 任意のセル参照のインター セクションの定義済みの共用体名 referencesInvalid 型の構造化: 実際のデータの配列</description>
              <description>有効な型: 任意のセル参照のインター セクションの定義済みの共用体名 referencesInvalid 型の構造化: 実際のデータの配列</description>
            </item>
            <item>
              <term>14 ～ 17</term>
              <description>有効な型: 共用体の交差に定義されている任意のセル参照実績データの配列の構造化参照の名前</description>
              <description>有効な型: 共用体の交差に定義されている任意のセル参照実績データの配列の構造化参照の名前</description>
              <description>参照は使用できません</description>
            </item>
          </list>
          <para>2 番目の ref 引数が必須の場合に指定されていないと、#VALUE! エラーが返されます。</para>
          <para>指定した参照の中に 3-D 参照が 1 つでもあると、エラー値 #VALUE! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AmorDegrc">
      <MemberSignature Language="C#" Value="public double AmorDegrc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AmorDegrc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorDegrc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AmorDegrc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16850)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">資産を購入した時点での価格を指定します。</param>
        <param name="Arg2">資産を購入した日付を指定します。</param>
        <param name="Arg3">最初の会計期が終了する日付を指定します。</param>
        <param name="Arg4">耐用年数が終了した時点での資産の価格を指定します。</param>
        <param name="Arg5">会計期 (会計年度) を指定します。</param>
        <param name="Arg6">減価償却率を指定します。</param>
        <param name="Arg7">1 年を何日として計算するかを表す数値を指定します。</param>
        <summary>各会計期における減価償却費を返します。この関数は、フランスの会計システムのために用意されています。</summary>
        <returns>To be added.</returns>
        <remarks><para>資産を会計期の途中で購入した場合、日割り計算による減価償却費が計上されます。 メソッドは、のような<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorLinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />、計算、資産の耐用年数に応じて減価償却係数が適用される点が異なります。次の表で使用する値を説明する<paramref name="Arg7" />。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数</description>
            </item>
            <item>
              <term>3</term>
              <description>365 日</description>
            </item>
            <item>
              <term>4</term>
              <description>360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>この関数では、資産の耐用年数の最後の会計期までの減価償却費、または減価償却費の累積額が取得価額と残存価額の差よりも大きくなるまでの減価償却費が返されます。</para>
          <para>減価償却係数は、次のように定義されています。</para>
          <list type="table">
            <item>
              <term>3 ～ 4 年</term>
              <description>1.5</description>
            </item>
            <item>
              <term>5 ～ 6 年</term>
              <description>2</description>
            </item>
            <item>
              <term>6 年を超える年数</term>
              <description>2.5</description>
            </item>
          </list>
          <para>減価償却率は、最後から 1 つ前の期で 50% まで上昇し、最後の会計期で 100% まで上昇します。</para>
          <para>資産の耐用年数が 0 ～ 1 年、1 ～ 2 年、2 ～ 3 年、または 4 ～ 5 年の場合、エラー値 #NUM! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AmorLinc">
      <MemberSignature Language="C#" Value="public double AmorLinc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AmorLinc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorLinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AmorLinc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16851)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">資産を購入した時点での価格を指定します。</param>
        <param name="Arg2">資産を購入した日付を指定します。</param>
        <param name="Arg3">最初の会計期が終了する日付を指定します。</param>
        <param name="Arg4">耐用年数が終了した時点での資産の価格を指定します。</param>
        <param name="Arg5">会計期 (会計年度) を指定します。</param>
        <param name="Arg6">減価償却率を指定します。</param>
        <param name="Arg7">1 年を何日として計算するかを表す数値を指定します。</param>
        <summary>各会計期における減価償却費を返します。この関数は、フランスの会計システムのために用意されています。</summary>
        <returns>To be added.</returns>
        <remarks><para>資産を会計期の途中で購入する場合は、日割りの減価償却を考慮に入れる。次の表の説明に使用する値<paramref name="Arg7" />。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数</description>
            </item>
            <item>
              <term>3</term>
              <description>365 日</description>
            </item>
            <item>
              <term>4</term>
              <description>360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>
            <b>重要</b>: DATE 関数を使用するか、他の数式または関数の結果として、日付を入力する必要があります。 たとえば、2008 年 5 月 23 日の DATE(2008,5,23) を使用します。 日付をテキストとして入力した場合、問題が発生することができます。</para>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public bool And (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool And([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.And(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function And (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16420)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 から 30 個までの条件をテストするには、 <b>true</b>または<b>false</b>のいずれかができます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>を返します<b>true の</b>場合、すべての引数は<b>true</b>です。1 つまたは複数の引数が<b>false</b>の場合は<b>false</b>を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数に論理値<b>true</b>または<b>false を指定</b>するかを論理値を含む配列または参照引数にする必要があります。 </para>
          <para>引数として指定した配列や参照に、文字列または空白セルが含まれる場合、これらの値は無視されます。</para>
          <para>指定した範囲に論理値が含まれていない場合は、エラー値が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Application ^ Application { Microsoft::Office::Interop::Excel::Application ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このプロパティが返すオブジェクト修飾子を指定しない場合に使用する場合、 <see cref="T:Microsoft.Office.Interop.Excel.Application" /> 、Microsoft Excel アプリケーションを表すオブジェクト。 このプロパティが返すオブジェクト修飾子を使用する場合、<see cref="T:Microsoft.Office.Interop.Excel.Application" />を指定したオブジェクトの作成者を表すオブジェクト。 OLE オートメーション オブジェクトに対してこのプロパティを使用すると、そのオブジェクト用のアプリケーションを取得できます。 読み取り専用。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arabic">
      <MemberSignature Language="C#" Value="public double Arabic (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Arabic([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Arabic(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Arabic (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Arabic(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16967)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">変換するローマ数字を指定します。</param>
        <summary>ローマ数字をアラビア数字に変換します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public string Asc (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Asc([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asc(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Asc(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16598)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">文字列または変換する文字列を含むセルの参照を指定します。文字列に全角文字が含まれない場合は、文字列は変換されません。</param>
        <summary>全角 (2 バイト) の文字を半角 (1 バイト) の文字に変換します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public double Asin (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Asin([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asin(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asin (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Asin(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16482)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">求める角度のサインの値を -1 ～ 1 の範囲で指定します。</param>
        <summary>アークサインまたは数値の逆正弦を返します。 アークサインとは、角度のサインの値は、 <paramref name="Arg1" />。 戻り値の角度はラジアンの範囲で-π/2 π/2 にします。</summary>
        <returns>To be added.</returns>
        <remarks><para>アークサインを度単位で、計算結果に 180/pi() を掛けるかを使用して、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" />メソッドです。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Asinh">
      <MemberSignature Language="C#" Value="public double Asinh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Asinh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asinh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Asinh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16616)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">実数を指定します。</param>
        <summary>数値の双曲線逆正弦を返します。 逆双曲線正弦は、その双曲線正弦が値を<paramref name="Arg1" />となるよう、 <paramref name="Arg1" />。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan2">
      <MemberSignature Language="C#" Value="public double Atan2 (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Atan2([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Atan2(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Atan2 (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Atan2(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16481)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">点の x 座標を指定します。</param>
        <param name="Arg2">点の y 座標を指定します。</param>
        <summary>指定された x-y 座標のアークタンジェントを返します。アークタンジェントとは、x 軸から、原点 0 と x 座標、y 座標で表される点を結んだ直線までの角度のことです。戻り値の角度は、-PI ～ PI (ただし -PI を除く) の範囲のラジアンとなります。</summary>
        <returns>To be added.</returns>
        <remarks><para>戻り値が正の数なら x 軸から反時計回りの角度を表し、負の数なら x 軸から時計回りの角度を表します。</para>
          <para>
            <b>Atan2(a,b)</b>を除く<b>Atan(b/a)</b>に等しい、 <b>Atan2</b>で 0 に等しいことができます。 </para>
          <para>両方<paramref name="Arg1" />と<paramref name="Arg2" />は、0、Atan2 は、エラー値を返します。 </para>
          <para>角度のアーク タンジェントの値を表現するには、計算結果に 180/pi() を掛けるかを使用して、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" />メソッドです。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Atanh">
      <MemberSignature Language="C#" Value="public double Atanh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Atanh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Atanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Atanh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Atanh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16618)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">-1 より大きく 1 より小さい実数を指定します。</param>
        <summary>数値の双曲線逆正接 (ハイパーボリック タンジェントの逆関数) を返します。数値は -1 より大きく 1 より小さい実数である必要があります。</summary>
        <returns>To be added.</returns>
        <remarks><para>逆双曲線正接は、その双曲線正接が<b>Arg1</b><b>と</b>値<paramref name="Arg1" />。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AveDev">
      <MemberSignature Language="C#" Value="public double AveDev (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AveDev([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AveDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AveDev (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16653)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">絶対偏差の平均を求める数値データを指定します。引数は 1 ～ 30 個まで指定できます。引数をコンマ (,) で区切って指定する代わりに、単一配列や、配列への参照を引数として使用することもできます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>データ全体の平均値に対するそれぞれのデータの絶対偏差の平均を返します。AveDev メソッドは、データの分散性を測定するときに使用します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Avedev 関数</b>は、入力データの計測単位が反映されます。 </para>
          <para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、または空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>平均絶対偏差は、次の数式で表されます。</para>
          <para>平均偏差の数式を図 1:</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public double Average (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Average([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Average(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Average (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16389)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">平均を求める数値データを指定します。引数は 1 ～ 30 個まで指定できます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数の (数学的な) 平均値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。 セル参照に計算の一部として論理値や数値を表す文字列を含める場合は、AVERAGEA 関数を使用します。 </para>
          <para><b>平均</b>メソッドでの中心傾向の統計的分布における数値グループの中央の場所であります。 中心傾向を表す指標は、3 つ。</para>
          <list type="bullet">
            <item>
              <description>平均 演算によって求める平均値であり、グループの各数値を加算してそれらの数値の個数で割ることにより計算します。たとえば、2、3、3、5、7、および 10 の平均は、30 を 6 で割った商、つまり 5 です。</description>
            </item>
            <item>
              <description>メジアン 数値のグループの中で中央に当たる数値であり、メジアンより大きい数値と小さい数値の個数が半々になります。たとえば、2、3、3、5、7、および 10 のメジアンは 4 です。</description>
            </item>
            <item>
              <description>モード 数値のグループの中で、最も頻出する数値です。たとえば、2、3、3、5、7、および 10 のモードは 3 です。</description>
            </item>
          </list>
          <para>数値のグループが対称分布の場合には、これら 3 つの中心傾向の測度の値は同じになります。数値のグループが非対称分布の場合には、値が異なることがあります。</para>
          <para>セルを平均することに注意してください空のセルと値が 0 が含まれているとの違い [表示] タブ ([オプション] を [ツール] メニューの)、ゼロ値] チェック ボックスをオフにした場合に特に。 空のセルはカウントされませんが、ゼロの値。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AverageIf">
      <MemberSignature Language="C#" Value="public double AverageIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AverageIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AverageIf(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AverageIf (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16867)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">平均する 1 つまたは複数のセルを指定します。</param>
        <param name="Arg2">数値、式、セル参照、またはセルの平均を定義するテキストの形式の条件です。 などの基準として表せる 32、32、"&gt;32」、「りんご」、または B4。</param>
        <param name="Arg3">平均する実際のセルを指定します。何も指定しないと、範囲 (Arg1) が使用されます。</param>
        <summary>範囲内の検索条件に一致するすべてのセルの平均値 (算術平均) を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para><b>True</b>または<b>false</b>が含まれている範囲内のセルは無視されます。 </para>
          <para><b>平均対象範囲または範囲内の空のセルは無視されます。</b> </para>
          <para>抽出条件のセルが空の場合と<b>見なさ</b>れます 0 を指定します。 </para>
          <para>範囲対応でセルの場合、条件、<b>エラー</b>は、エラー値を生成しません。 </para>
          <para>検索条件では、半角の疑問符 (?) または半角のアスタリスク (*) をワイルドカード文字として使用することができます。ワイルドカード文字の疑問符は任意の 1 文字を表し、アスタリスクは任意の文字列を表します。ワイルドカード文字ではなく、通常の文字として疑問符やアスタリスクを検索する場合は、その文字の前に、"~*" のように半角のティルダ (~) を付けます。</para>
          <para>平均範囲に含まれるセルの個数と形状は、必ずしも対応するセルと一致している必要はありません。平均の対象となる実際のセルは、平均範囲の左上のセルを基準にして決定されます。次にその例を示します。</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para><b>AverageIf</b>メソッドのメジャーの中心傾向、統計的分布における数値グループの中央の場所であります。 中心傾向を表す指標は、3 つ。</para>
          <list type="bullet">
            <item>
              <description>平均 演算によって求める平均値であり、グループの各数値を加算してそれらの数値の個数で割ることにより計算します。たとえば、2、3、3、5、7、および 10 の平均は、30 を 6 で割った商、つまり 5 です。</description>
            </item>
            <item>
              <description>メジアン 数値のグループの中で中央に当たる数値であり、メジアンより大きい数値と小さい数値の個数が半々になります。たとえば、2、3、3、5、7、および 10 のメジアンは 4 です。</description>
            </item>
            <item>
              <description>モード 数値のグループの中で、最も頻出する数値です。たとえば、2、3、3、5、7、および 10 のモードは 3 です。</description>
            </item>
          </list>
          <para>数値のグループが対称分布の場合には、これら 3 つの中心傾向の測度の値は同じになります。数値のグループが非対称分布の場合には、値が異なることがあります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AverageIfs">
      <MemberSignature Language="C#" Value="public double AverageIfs (Microsoft.Office.Interop.Excel.Range Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AverageIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AverageIfs(Microsoft.Office.Interop.Excel.Range,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AverageIfs (Arg1 As Range, Arg2 As Range, Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16868)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">対応する条件による評価の対象となる範囲を指定します。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <summary>複数の検索条件に一致するすべてのセルの平均値 (算術平均) を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para><b>平均範囲内に空のセルがある場合は無視します。</b> </para>
          <para>検索条件範囲内のセルが空の場合と<b>見なさ</b>れます 0 を指定します。 </para>
          <para><b>True</b>を含むセル範囲を 1 として評価します。<b>false</b>を含むセル範囲は、0 (ゼロ) として評価されます。 </para>
          <para>セルに対して指定されたすべての検索条件が TRUE の場合にのみ、平均値の計算に平均範囲の各セルが使われます。</para>
          <para>平均範囲のセルの数値に変換できない文字列値が含まれている、または場合は、エラーが返さ<b>れます</b>。 </para>
          <para>すべての条件を満たすセルがない場合、エラー値が返さ<b>れます</b>。 </para>
          <para>検索条件では、半角の疑問符 (?) または半角のアスタリスク (*) をワイルドカード文字として使用することができます。ワイルドカード文字の疑問符は任意の 1 文字を表し、アスタリスクは任意の文字列を表します。ワイルドカード文字ではなく、通常の文字として疑問符やアスタリスクを検索する場合は、その文字の前に、"~*" のように半角のティルダ (~) を付けます。</para>
          <para>各検索条件範囲に含まれるセルの個数と形状は、必ずしも平均範囲のセルと一致している必要はありません。平均の対象となる実際のセルは、検索条件範囲の左上のセルを基準にして決定されます。次にその例を示します。</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para><b>エラー</b>関数中心的な傾向、統計的分布における数値グループの中央の場所であります。 中心傾向を表す指標は、3 つ。</para>
          <list type="bullet">
            <item>
              <description>平均 演算によって求める平均値であり、グループの各数値を加算してそれらの数値の個数で割ることにより計算します。たとえば、2、3、3、5、7、および 10 の平均は、30 を 6 で割った商、つまり 5 です。</description>
            </item>
            <item>
              <description>メジアン 数値のグループの中で中央に当たる数値であり、メジアンより大きい数値と小さい数値の個数が半々になります。たとえば、2、3、3、5、7、および 10 のメジアンは 4 です。</description>
            </item>
            <item>
              <description>モード 数値のグループの中で、最も頻出する数値です。たとえば、2、3、3、5、7、および 10 のモードは 3 です。</description>
            </item>
          </list>
          <para>数値のグループが対称分布の場合には、これら 3 つの中心傾向の測度の値は同じになります。数値のグループが非対称分布の場合には、値が異なることがあります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BahtText">
      <MemberSignature Language="C#" Value="public string BahtText (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string BahtText([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BahtText(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function BahtText (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ BahtText(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16752)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">文字列に変換する数値、数値を含むセルの参照、または戻り値が数値となる数式を指定します。</param>
        <summary>数値をタイ語の文字列に変換し、バーツを表す接尾文字列を付加します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Base">
      <MemberSignature Language="C#" Value="public string Base (double Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Base([in]float64 Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Base(System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Base (Arg1 As Double, Arg2 As Double, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16955)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">変換する数値を指定します。</param>
        <param name="Arg2">数値を変換する基数を指定します。</param>
        <param name="Arg3">返される文字列の最小長を指定します。先頭の 0 が省略された場合は追加されません。</param>
        <summary>数値を特定の基数 (底) を持つ文字列式に変換します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselI">
      <MemberSignature Language="C#" Value="public double BesselI (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselI([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselI(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselI (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselI(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16812)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">関数に代入する値を指定します。</param>
        <param name="Arg2">ベッセル関数の次数を指定します。整数以外の値を指定すると、小数点以下が切り捨てられます。</param>
        <summary>修正ベッセル関数 In(x) を返します。この関数は、純虚数を引数としたときのベッセル関数 Jn に相当します。</summary>
        <returns>To be added.</returns>
        <remarks><para>x (Arg1) に数値以外の値を指定すると、エラー値 #VALUE! が返されます。 </para>
          <para>n (Arg2) に数値以外の値を指定すると、エラー値が返されます。 </para>
          <para>N &lt; 0、負のエラー値を生成します。 </para>
          <para>変数を x とする n 次の修正ベッセル関数は、次の数式で表されます。</para>
          <para>変数 x のベッセル関数を図 1:</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselJ">
      <MemberSignature Language="C#" Value="public double BesselJ (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselJ([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselJ(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselJ (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselJ(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16809)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">関数に代入する値を指定します。</param>
        <param name="Arg2">ベッセル関数の次数を指定します。整数以外の値を指定すると、小数点以下が切り捨てられます。</param>
        <summary>ベッセル関数 Jn(x) を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>X が数値以外の場合は、<b>指定すると</b>エラー値が返されます。 </para>
          <para>かどうかは n に数値以外を<b>指定すると</b>が返されます、エラー値が生成されます。 </para>
          <para>N &lt; 0 を<b>指定すると</b>エラー値が返されます。 </para>
          <para>変数を x とする n 次のベッセル関数は、次の数式で表されます。 </para>
          <para>変数 x のベッセル関数を図 1:</para>
          <para> </para>
          <para> </para>
          <para>各項目の意味は次のとおりです。</para>
          <para>図 2: ガンマ関数</para>
          <para> </para>
          <para> </para>
          <para>はガンマ関数を表します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselK">
      <MemberSignature Language="C#" Value="public double BesselK (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselK([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselK(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselK (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselK(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16810)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">関数に代入する値を指定します。</param>
        <param name="Arg2">ベッセル関数の次数を指定します。整数以外の値を指定すると、小数点以下が切り捨てられます。</param>
        <summary>修正ベッセル関数 Kn(x) を返します。この関数は、純虚数を引数としたときのベッセル関数 Jn と Yn の和に相当します。</summary>
        <returns>To be added.</returns>
        <remarks><para>X が数値以外の場合は、<b>負</b>のエラー値を生成します。 </para>
          <para>N が数値以外の場合は、<b>負</b>のエラー値を生成します。 </para>
          <para>N &lt; 0、<b>負</b>のエラー値を生成します。 </para>
          <para>変数を x とする n 次の修正ベッセル関数は、次の数式で表されます。 </para>
          <para>変数 x のベッセル関数を図 1:</para>
          <para> </para>
          <para> </para>
          <para>ここで Jn と Yn は、それぞれ BESSELJ 関数と BESSELY 関数を表します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselY">
      <MemberSignature Language="C#" Value="public double BesselY (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselY([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselY(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselY (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselY(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16811)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">関数に代入する値を指定します。</param>
        <param name="Arg2">ベッセル関数の次数を指定します。整数以外の値を指定すると、小数点以下が切り捨てられます。</param>
        <summary>ベッセル関数 Yn(x) を返します。この関数は、ウェーバー関数、またはノイマン関数とも呼ばれます。</summary>
        <returns>To be added.</returns>
        <remarks><para>X が数値以外の場合は、<b>負</b>のエラー値を生成します。 </para>
          <para>N が数値以外の場合は、<b>負</b>のエラー値を生成します。 </para>
          <para>N &lt; 0、<b>負</b>のエラー値を生成します。 </para>
          <para>変数を x とする n 次のベッセル関数は、次の数式で表されます。 </para>
          <para>変数 x のベッセル関数を図 1:</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Beta_Dist">
      <MemberSignature Language="C#" Value="public double Beta_Dist (double Arg1, double Arg2, double Arg3, bool Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Beta_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Beta_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16909)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">区間 A (Arg4) ～ B (Arg5) の範囲で、関数を使用して検証する瞬間を指定します。</param>
        <param name="Arg2">確率分布に対するαパラメーターを指定します。</param>
        <param name="Arg3">確率分布に対するβパラメーターを指定します。</param>
        <param name="Arg4">関数形式の関数の形式を決定する論理値です。 累積的な場合は<b>true</b>、ベータ版です。DIST は累積分布関数の値を返します。かどうかは<b>false</b>を返します確率密度関数です。</param>
        <param name="Arg5">x の区間の下限を指定します。この引数は省略することができます。</param>
        <param name="Arg6">x の区間の上限を指定します。この引数は省略することができます。</param>
        <summary>β分布の累積分布関数の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>β分布は、複数の標本を対象に割合の変化を分析する場合などに使用します。たとえば、複数の人が 1 日のうちにテレビを見ている時間の割合を算出するときは、この関数を使用します。</para>
          <list type="bullet">
            <item>
              <description>いずれかの引数が数値以外の場合は、 <b>Beta_Dist</b>は、#VALUE を返します。 エラー値です。</description>
            </item>
            <item>
              <description>場合は、α ≤ 0 または β ≤ 0、 <b>Beta_Dist</b>には、エラー値が生成されます。</description>
            </item>
            <item>
              <description>場合 x&lt;は、x &gt; B、または A = B、 <b>Beta_Dist</b>には、エラー値が生成されます。</description>
            </item>
            <item>
              <description>A の値を省略すると、B (上限と下限)、 <b>Beta_Dist</b>標準累積 β 分布が使用され、A = 0 および B = 1。</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Beta_Inv">
      <MemberSignature Language="C#" Value="public double Beta_Inv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Beta_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Inv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Beta_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16910)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">β確率分布に伴う確率を指定します。</param>
        <param name="Arg2">確率分布に対するαパラメーターを指定します。</param>
        <param name="Arg3">確率分布に対するβパラメーターを指定します。</param>
        <param name="Arg4">x の区間の下限を指定します。この引数は省略することができます。</param>
        <param name="Arg5">x の区間の上限を指定します。この引数は省略することができます。</param>
        <summary>指定したβ分布の累積分布関数の逆関数の値を返します。つまり、確率 = Beta_Dist(x,...) であるとき、Beta_Inv(確率,...) = x という関係が成り立ちます。</summary>
        <returns>To be added.</returns>
        <remarks><para>β分布は、プロジェクトの立案時に、予測される完成日数と公差によって完了可能日時を計算するために使用できます。</para>
          <list type="bullet">
            <item>
              <description>いずれかの引数が数値以外の場合は、 <b>Beta_Inv</b>には、エラー値が生成されます。</description>
            </item>
            <item>
              <description>場合は、α ≤ 0 または β ≤ 0、 <b>Beta_Inv</b>には、エラー値が生成されます。</description>
            </item>
            <item>
              <description>場合確率 ≤ 0、または確率&gt;1, <b>Beta_Inv</b>には、エラー値が生成されます。</description>
            </item>
            <item>
              <description>A の値を省略すると、B (上限と下限)、 <b>Beta_Inv</b>標準累積 β 分布が使用され、A = 0 および B = 1。</description>
            </item>
          </list>
          <para>確率の値を与え、そのような値 x がシーク<b>Beta_Inv</b> Beta_Dist (x、アルファ、ベータ版では、true の場合、A、B) = 確率。 <b>Beta_Inv</b>の精度がの精度に依存するため、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" />。 <b>Beta_Inv</b>では、反復計算の手法を使用します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BetaDist">
      <MemberSignature Language="C#" Value="public double BetaDist (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BetaDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaDist(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BetaDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16654)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">区間 A (Arg4) ～ B (Arg5) の範囲で、関数を使用して検証する瞬間を指定します。</param>
        <param name="Arg2">確率分布に対するパラメーターを指定します。</param>
        <param name="Arg3">確率分布に対するパラメーターを指定します。</param>
        <param name="Arg4">x の区間の下限を指定します。この引数は省略することができます。</param>
        <param name="Arg5">x の区間の上限を指定します。この引数は省略することができます。</param>
        <summary>β分布の累積分布関数の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" />メソッドです。</para>
          <para>β分布は、複数の標本を対象に割合の変化を分析する場合などに使用します。たとえば、複数の人が 1 日のうちにテレビを見ている時間の割合を算出するときは、この関数を使用します。</para>
          <list type="bullet">
            <item>
              <description>いずれかの引数が数値以外の場合は、<b>指定</b>が #VALUE を返します。 エラー値です。</description>
            </item>
            <item>
              <description>場合は、α ≤ 0 または β ≤ 0、<b>指定</b>には、エラー値が生成されます。</description>
            </item>
            <item>
              <description>場合 x&lt;は、x &gt; B、または A = B、<b>指定</b>には、エラー値が生成されます。</description>
            </item>
            <item>
              <description>A の値を省略すると<b>場合</b>、標準累積 β 分布が使用され、A = 0 および B = 1。</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BetaInv">
      <MemberSignature Language="C#" Value="public double BetaInv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BetaInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaInv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BetaInv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16656)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">β確率分布に伴う確率を指定します。</param>
        <param name="Arg2">確率分布に対するαパラメーターを指定します。</param>
        <param name="Arg3">確率分布に対するβパラメーターを指定します。</param>
        <param name="Arg4">x の区間の下限を指定します。この引数は省略することができます。</param>
        <param name="Arg5">x の区間の上限を指定します。この引数は省略することができます。</param>
        <summary>指定したβ分布の累積分布関数の逆関数の値を返します。つまり、確率 = BetaDist(x,...) であるとき、BetaInv(確率,...) = x という関係が成り立ちます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Inv(System.Double,System.Double,System.Double,System.Object,System.Object)" />メソッドです。</para>
          <para>β分布は、プロジェクトの立案時に、予測される完成日数と公差によって、完了可能日時を計算するために使用できます。</para>
          <list type="bullet">
            <item>
              <description><b>いずれかの引数が数値以外の場合は、エラー値が返されます。</b></description>
            </item>
            <item>
              <description>場合は、α ≤ 0 または β ≤ 0、 <b>BetaInv</b>は、エラー値を生成します。 </description>
            </item>
            <item>
              <description>場合確率 ≤ 0、または確率&gt;1、 <b>BetaInv</b>エラー値が返されます。 </description>
            </item>
            <item>
              <description>A の値を省略すると<b>場合</b>、標準累積 β 分布が使用され、A = 0 および B = 1。</description>
            </item>
          </list>
          <para><b>BetaInv</b>確率の値を与え、そのような値 x がシークを指定 (x、アルファ、ベータ版、A、B) = 確率です。 <b>BetaInv</b>の精度がの精度に依存するため、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaDist(System.Double,System.Double,System.Double,System.Object,System.Object)" />。 <b>BetaInv</b>は、反復計算の手法を使用します。 結果は 100 回反復後収束しないが、この関数はエラー値を生成します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Dec">
      <MemberSignature Language="C#" Value="public string Bin2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Bin2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16777)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">変換する 2 進数を指定します。数値に指定できる文字数は 10 文字 (10 ビット) までです。数値の最上位のビットは符号を表し、残りの 9 ビットは数値の大きさを表します。負の数は 2 の補数を使って表します。</param>
        <summary>2 進数を 10 進数に変換します。</summary>
        <returns>To be added.</returns>
        <remarks><para>数値に 2 進数以外の値、または 10 文字 (10 ビット) 以上の値を指定すると、エラー値が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Hex">
      <MemberSignature Language="C#" Value="public string Bin2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16779)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">変換する 2 進数を指定します。数値に指定できる文字数は 10 文字 (10 ビット) までです。数値の最上位のビットは符号を表し、残りの 9 ビットは数値の大きさを表します。負の数は 2 の補数を使って表します。</param>
        <param name="Arg2">使用する文字の数です。 場所が省略されると、必要な文字の最小数を<b>Bin2Hex</b>が使用されます。 場所は、戻り値の先頭に 0 (ゼロ) をスペースに便利です。</param>
        <summary>2 進数を 16 進数に変換します。</summary>
        <returns>To be added.</returns>
        <remarks><para>番号が、有効なバイナリ番号でない場合、または 10 文字 (10 ビット) 以上の場合は、 <b>Bin2Hex</b>がエラーを生成します。 </para>
          <para>負の数である場合、 <b>Bin2Hex</b>は場所を無視し、10 桁の 16 進数を返します。 </para>
          <para><b>Bin2Hex</b>文字よりも大きくする必要がある場合は、エラーが生成されます。 </para>
          <para>桁数に整数以外の値を指定すると、小数点以下は切り捨てられます。</para>
          <para>数値以外の場合、 <b>Bin2Hex</b>はエラーを生成します。 </para>
          <para>桁数が負の場合、 <b>Bin2Hex</b>がエラーを生成します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Oct">
      <MemberSignature Language="C#" Value="public string Bin2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16778)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">変換する 2 進数を指定します。数値に指定できる文字数は 10 文字 (10 ビット) までです。数値の最上位のビットは符号を表し、残りの 9 ビットは数値の大きさを表します。負の数は 2 の補数を使って表します。</param>
        <param name="Arg2">使用する文字の数です。 場所が省略されると、必要な文字の最小数を<b>Bin2Oct</b>が使用されます。 場所は、戻り値の先頭に 0 (ゼロ) をスペースに便利です。</param>
        <summary>2 進数を 8 進数に変換します。</summary>
        <returns>To be added.</returns>
        <remarks><para>番号が、有効なバイナリ番号でない場合、または 10 文字 (10 ビット) 以上の場合は、 <b>Bin2Oct</b>がエラーを生成します。 </para>
          <para>負の数である場合、 <b>Bin2Oct</b>が場所を無視し、10-文字 8 進数を返します。 </para>
          <para><b>Bin2Oct</b>文字よりも大きくする必要がある場合は、エラーが生成されます。 </para>
          <para>桁数に整数以外の値を指定すると、小数点以下は切り捨てられます。</para>
          <para>数値以外の場合、 <b>Bin2Oct</b>はエラーを生成します。 </para>
          <para>桁数が負の場合、 <b>Bin2Oct</b>がエラーを生成します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Dist">
      <MemberSignature Language="C#" Value="public double Binom_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Binom_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16870)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">成功数: 試行回数に含まれる成功の回数を指定します。</param>
        <param name="Arg2">試行回数: 独立試行の回数を指定します。</param>
        <param name="Arg3">成功率: 1 回の試行が成功する確率を指定します。</param>
        <param name="Arg4">関数形式の関数の形式を決定する論理値です。 累積的な場合は<b>true を指定</b>し、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist(System.Double,System.Double,System.Double,System.Boolean)" />メソッドは、累積分布関数は、ほとんど成功数回の成功は時に表示されている確率を返します。かどうか<b>False</b>を返しますが成功数回の成功する確率を表す確率量関数です。</param>
        <summary>二項分布の確率関数の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>試行が独立した場合、すべての試行の結果が成功または失敗のみと成功の確率が実験を通じて一定のテストまたは試用版では、固定数の問題で、 <b>Binom_Dist</b>メソッドを使用します。 たとえば、 <b>Binom_Dist</b>メソッドでは、(オス) は次の 3 つの赤ちゃんの 2 つの確率を計算できます。 </para>
          <list type="bullet">
            <item>
              <description>成功数、試行回数に整数以外の値を指定すると、小数点以下が切り捨てられます。</description>
            </item>
            <item>
              <description>成功数、試行回数、成功率が数値以外の場合は、 <b>Binom_Dist</b>メソッドはエラーを生成します。 </description>
            </item>
            <item>
              <description>場合成功&lt;0 または成功数&gt;試験、 <b>Binom_Dist</b>メソッドには、エラーが生成されます。 </description>
            </item>
            <item>
              <description>場合成功率&lt;0 または成功率&gt;1、 <b>Binom_Dist</b>メソッドには、エラーが生成されます。 二項確率密度関数は、次の数式で表されます。 </description>
            </item>
          </list>
          <para>ここで、</para>
          <para>図 2: 数式</para>
          <para> </para>
          <para> </para>
          <para>COMBIN(n,x) は、です。</para>
          <para>累積二項分布は次のとおりです。</para>
          <para>図 3: 累積二項分布</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Dist_Range">
      <MemberSignature Language="C#" Value="public double Binom_Dist_Range (double Arg1, double Arg2, double Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Dist_Range([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist_Range(System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Dist_Range (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16958)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">独立試行の回数を指定します。</param>
        <param name="Arg2">各試行が成功する確率を指定します。</param>
        <param name="Arg3">試行における成功数を指定します。</param>
        <param name="Arg4">指定した場合、この関数は、成功した試行の数が Arg3 と Arg4 の間の値になる確率を返します。</param>
        <summary>二項分布を使用した試行結果の確率を返します。</summary>
        <returns>倍精度浮動小数点数</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Inv">
      <MemberSignature Language="C#" Value="public double Binom_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Binom_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16871)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">試行回数: ベルヌーイ試行の回数を指定します。</param>
        <param name="Arg2">成功率: 1 回の試行が成功する確率を指定します。</param>
        <param name="Arg3">α: 基準値を指定します。</param>
        <summary>二項分布の確率関数の逆関数の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>試行回数、成功率、またはアルファが数値以外の場合は、 <b>Binom_Inv</b>メソッドはエラーを生成します。 </para>
          <para>試行回数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>場合試験&lt;0、 <b>Binom_Inv</b>メソッドには、エラーが生成されます。 </para>
          <para>場合成功率&lt;0 または成功率&gt;1、 <b>Binom_Inv</b>メソッドには、エラーが生成されます。 </para>
          <para>アルファの場合&lt;0 または α &gt; 1、 <b>Binom_Inv</b>メソッドには、エラーが生成されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BinomDist">
      <MemberSignature Language="C#" Value="public double BinomDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BinomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BinomDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function BinomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BinomDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16657)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">試行における成功数を指定します。</param>
        <param name="Arg2">独立試行の回数を指定します。</param>
        <param name="Arg3">各試行が成功する確率を指定します。</param>
        <param name="Arg4">関数の形式を決定する論理値です。 累積的な場合は<b>true</b>、 <b>BinomDist</b>が成功数回の成功には、最大確率分布の累積分布関数を返しますし、かどうか<b>false</b>を返しますが成功数回の成功する確率を表す確率量関数です。</param>
        <summary>二項分布の確率関数の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>試行が独立した場合、すべての試行の結果が成功または失敗のみと成功の確率が実験を通じて一定のテストまたは試用版では、固定数の問題の<b>中</b>に使用します。 <b>たとえば、(オス) は次の 3 つの赤ちゃんの 2 つの確率を計算できます。</b> </para>
          <para>成功数、試行回数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>成功数、試行回数、成功率が数値以外の場合は、<b>中</b>にエラーが生成されます。 </para>
          <para>場合成功&lt;0 または成功数&gt;、 <b>BinomDist</b>の試用版には、エラーが生成されます。 </para>
          <para>場合成功率&lt;0 または成功率&gt;1、<b>エラーが返されます</b>。 </para>
          <para>二項確率密度関数は、次の数式で表されます。 </para>
          <para>図 1: 二項確率質量関数</para>
          <para> </para>
          <para> </para>
          <para>ここで、</para>
          <para>図 2: 数式</para>
          <para> </para>
          <para> </para>
          <para>COMBIN(n,x) は、です。</para>
          <para>累積二項分布は次のとおりです。</para>
          <para>図 3: 累積二項分布</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitand">
      <MemberSignature Language="C#" Value="public double Bitand (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitand([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitand(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitand (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitand(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16946)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">変換するバイナリ数値の 10 進数表記を指定します。</param>
        <param name="Arg2">変換するバイナリ数値の 10 進数表記を指定します。</param>
        <summary>2 つの数値には、' ビットごと、' を返します。</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitlshift">
      <MemberSignature Language="C#" Value="public double Bitlshift (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitlshift([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitlshift(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitlshift (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitlshift(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16949)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">変換するバイナリ数値の 10 進数表記を指定します。</param>
        <param name="Arg2">取得するバイト数。</param>
        <summary>左に移動数ビット (shift_amount) 移動する数値を返します。</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitor">
      <MemberSignature Language="C#" Value="public double Bitor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16947)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">変換するバイナリ数値の 10 進数表記を指定します。</param>
        <param name="Arg2">変換するバイナリ数値の 10 進数表記を指定します。</param>
        <summary>2 つの数値のビット単位 OR を返します。</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitrshift">
      <MemberSignature Language="C#" Value="public double Bitrshift (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitrshift([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitrshift(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitrshift (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitrshift(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16950)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">変換するバイナリ数値の 10 進数表記を指定します。</param>
        <param name="Arg2">取得するバイト数。</param>
        <summary>右に移動数ビット (shift_amount) 移動する数値を返します。</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitxor">
      <MemberSignature Language="C#" Value="public double Bitxor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitxor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitxor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitxor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitxor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16948)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">変換するバイナリ数値の 10 進数表記を指定します。</param>
        <param name="Arg2">変換するバイナリ数値の 10 進数表記を指定します。</param>
        <summary>2 つの数値のビット単位 "排他的 OR" を返します。</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public double Ceiling (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ceiling(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16672)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 丸めの対象となる数値を指定します。</param>
        <param name="Arg2">基準値: 倍数の基準となる数値を指定します。</param>
        <summary>指定された基準値の倍数のうち、最も近い値に数値を切り上げます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Precise(System.Double,System.Object)" />メソッドです。</para>
          <para>たとえば、原価 442 円の部品に値段を付ける場合に、1 円単位の端数を出さないようにするには、数式 Ceiling(4.42,0.05) を使って、値を最も近い 10 円単位の値に丸めることができます。</para>
          <para>いずれかの引数が数値以外の場合は、<b>天井</b>には、エラーが生成されます。 </para>
          <para>数値の符号に関係なく、切り上げられた値の絶対値は、数値より大きくなります。数値が既に基準値の倍数になっている場合は、その値が返されます。</para>
          <para>数値と基準値の符号が異なる場合、<b>天井</b>には、エラーが生成されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling_Math">
      <MemberSignature Language="C#" Value="public double Ceiling_Math (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling_Math([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Math(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling_Math (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16975)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">丸める数値。</param>
        <param name="Arg2">数値を丸める対象の倍数。</param>
        <param name="Arg3">指定され、かつ 0 以外の場合、この関数は 0 とは逆の方向に切り上げます。</param>
        <summary>数値を最も近い整数、または最も近い基準値の倍数に切り上げます。</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling_Precise">
      <MemberSignature Language="C#" Value="public double Ceiling_Precise (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling_Precise([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Precise(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling_Precise (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16930)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 丸めの対象となる数値を指定します。</param>
        <param name="Arg2">基準値: 倍数の基準となる数値を指定します。</param>
        <summary>指定された基準値の倍数のうち、最も近い値に数値を丸めます。</summary>
        <returns>To be added.</returns>
        <remarks><para>たとえば、原価 442 円の部品に値段を付ける場合に、1 円単位の端数を出さないようにするには、数式 Ceiling(4.42,0.05) を使って、値を最も近い 10 円単位の値に丸めることができます。</para>
          <para>によっては、数値と基準値の引数の符号、 <b>Ceiling_Precise</b>メソッドから離れるか、0 方向に丸めます。</para>
          <list type="table">
            <item>
              <term>-/-</term>
              <description>切り捨て</description>
            </item>
            <item>
              <term>+/+</term>
              <description>切り上げ</description>
            </item>
            <item>
              <term>-/+</term>
              <description>切り捨て</description>
            </item>
            <item>
              <term>+/-</term>
              <description>切り上げ</description>
            </item>
          </list>
          <para>いずれかの引数が数値以外の場合は、 <b>Ceiling_Precise</b>にはエラーが生成されます。 </para>
          <para>数値が既に基準値の倍数になっている場合は、その値が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiDist">
      <MemberSignature Language="C#" Value="public double ChiDist (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiDist([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiDist(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiDist (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiDist(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16658)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">関数に代入する値を指定します。</param>
        <param name="Arg2">自由度を指定します。</param>
        <summary>カイ 2 乗分布の片側確率の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" />と<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist(System.Double,System.Double,System.Boolean)" />の方法です。</para>
          <para>Χ2 ディストリビューションでは、χ2 のテストに関連付けられます。 観察された比較値と期待値を χ2 テストを使用します。</para>
          <para>たとえば、ある植物の遺伝子実験で、次の世代の花には一定の色の組み合わせが発生するという仮説を立てたとします。ここで、予測された色と観察の結果を比較することにより、仮説の妥当性を検定することができます。</para>
          <para>いずれかの引数が数値以外の場合は、<b>れます</b>には、エラーが生成されます。 </para>
          <para>X が負の場合は、<b>れます</b>には、エラーが生成されます。 </para>
          <para>自由度に小数点以下の値を指定しても切り捨てられます。</para>
          <para>場合自由度&lt;1 または自由度&gt;10 ^10 の場合、エラー値が返さ<b>れます</b>。 </para>
          <para>
            <b>れます</b>がれますとして計算されます = P (X&gt;x)、X は χ2 の確率変数です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiInv">
      <MemberSignature Language="C#" Value="public double ChiInv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiInv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiInv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiInv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiInv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16659)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">χ2 分布に伴う確率を指定します。</param>
        <param name="Arg2">自由度を指定します。</param>
        <summary>カイ 2 乗分布の片側確率の逆関数の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv_RT(System.Double,System.Double)" />と<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv(System.Double,System.Double)" />の方法です。</para>
          <para>確立 = ChiDist(x,...) であるとき、ChiInv(確率,...) = x という関係が成り立ちます。この関数は、実測値と期待値を比較して、仮説の妥当性を検定するために使います。</para>
          <para>いずれかの引数が数値以外の場合、 <b>ChiInv</b>はエラーを生成します。 </para>
          <para>場合確率&lt;0、または確率&gt;1、エラー値が返さ<b>れます</b>。 </para>
          <para>自由度に小数点以下の値を指定しても切り捨てられます。</para>
          <para>場合自由度&lt;1 または自由度の受領 10 ^10 の場合、エラー値が返さ<b>れます</b>。</para>
          <para><b>そのような値 x がシークの確率の値を指定した、</b> ChiDist (x, 自由度) = 確率です。 <b>ChiInv</b>の精度がの精度に依存するため、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiDist(System.Double,System.Double)" />。 <b>ChiInv</b>は、反復計算の手法を使用します。 検索は、64 回の反復後が収束しない、関数はエラーを生成します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Dist">
      <MemberSignature Language="C#" Value="public double ChiSq_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16911)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 分布を計算する値を指定します。</param>
        <param name="Arg2">自由度: 自由度を指定します。</param>
        <param name="Arg3">関数形式の関数の形式を決定する論理値です。 場合<b>は累積的な</b>CHISQ_DIST は累積分布関数の値を返します。かどうかは<b>false</b>を返します確率密度関数です。</param>
        <summary>カイ 2 乗分布を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数に数値以外の値を指定すると、エラー値 #VALUE! が返されます。 </para>
          <para>x に負の数を指定すると、エラー値 #NUM! が返されます。 </para>
          <para>自由度に整数以外の値を指定すると、小数点以下が切り捨てられます。 </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Dist_RT">
      <MemberSignature Language="C#" Value="public double ChiSq_Dist_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Dist_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Dist_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Dist_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16912)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">関数に代入する値を指定します。</param>
        <param name="Arg2">自由度を指定します。</param>
        <summary>カイ 2 乗分布の右側確率の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>Χ2 ディストリビューションでは、χ2 のテストに関連付けられます。 観察された比較値と期待値を χ2 テストを使用します。</para>
          <para>たとえば、ある植物の遺伝子実験で、次の世代の花には一定の色の組み合わせが発生するという仮説を立てたとします。ここで、予測された色と観察の結果を比較することにより、仮説の妥当性を検定することができます。</para>
          <para>いずれかの引数が数値以外の場合は、 <b>ChiSq_Dist_RT</b>にはエラーが生成されます。 </para>
          <para>X が負の場合は、 <b>ChiSq_Dist_RT</b>にはエラーが生成されます。 </para>
          <para>自由度に小数点以下の値を指定しても切り捨てられます。</para>
          <para>場合自由度&lt;1 または自由度&gt;10 ^10、 <b>ChiSq_Dist_RT</b>には、エラーが生成されます。 <b>ChiSq_Dist_RT</b>は、ChiSq_Dist_RT として計算されます = P (X&gt;x)、X は χ2 の確率変数です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Inv">
      <MemberSignature Language="C#" Value="public double ChiSq_Inv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Inv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Inv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Inv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16913)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">確率: カイ 2 乗分布における確率を指定します。</param>
        <param name="Arg2">自由度: 自由度を指定します。</param>
        <summary>カイ 2 乗分布の左側確率の逆関数の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>いずれかの引数が数値以外の場合は、 <b>ChiSq_Inv</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>場合確率&lt;0、または確率&gt;1、 <b>ChiSq_Inv</b>が #NUM を返します。 エラー値です。 </para>
          <para>自由度に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Inv_RT">
      <MemberSignature Language="C#" Value="public double ChiSq_Inv_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Inv_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Inv_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Inv_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16914)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">χ2 分布に伴う確率を指定します。</param>
        <param name="Arg2">自由度を指定します。</param>
        <summary>カイ 2 乗分布の右側確率の逆関数の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>場合確率 = ChiSq_Dist_RT(x,...)、ChiSq_Inv_RT(probability,...) = x です。 元の仮説が有効かどうかを決定するために、予期されたものと確認された結果を比較するのにには、この関数を使用します。</para>
          <para>いずれかの引数が数値以外の場合は、 <b>ChiSq_Inv_RT</b>にはエラーが生成されます。 </para>
          <para>場合確率&lt;0、または確率&gt;1, <b>ChiSq_Inv_RT</b>には、エラーが生成されます。 </para>
          <para>自由度に小数点以下の値を指定しても切り捨てられます。</para>
          <para>場合自由度&lt;1 または自由度の受領 10 ^10、 <b>ChiSq_Inv_RT</b>には、エラーが生成されます。</para>
          <para>確率の値を与え、そのような値 x がシーク<b>ChiSq_Inv_RT</b>その ChiSq_Dist_RT を (x, 自由度) = 確率です。 <b>ChiSq_Inv_RT</b>の精度がの精度に依存するため、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" />。 <b>ChiSq_Inv_RT</b>では、反復計算の手法を使用します。 検索は、64 回の反復後が収束しない、関数はエラーを生成します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Test">
      <MemberSignature Language="C#" Value="public double ChiSq_Test (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Test([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Test(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Test (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Test(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16874)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">期待値に対する検定の実測値が入力されているデータ範囲を指定します。</param>
        <param name="Arg2">期待値が入力されているデータ範囲を指定します。実測値と期待値では、行方向の値の合計と列方向の値の合計がそれぞれ等しくなっている必要があります。</param>
        <summary>カイ 2 乗 (χ2) 検定を行います。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>ChiSq_Test</b>は、統計と自由度に対するカイ 2 乗 (χ2) 分布から値を返します。 Χ2 テストを使用すると、結果が実験によって検証仮説かどうかを決定します。</para>
          <para>実測値範囲と期待値のデータ要素の個数が異なる場合、 <b>ChiSq_Test</b>はエラー値 #n/a を返します。 </para>
          <para>Χ2 テストは、最初に式を使用して χ2 の統計情報を計算します。 </para>
          <para>図 1: 数式の x 乗のテスト</para>
          <para> </para>
          <para> </para>
          <para>各項目の意味は次のとおりです。</para>
          <list type="bullet">
            <item>
              <description>Aij = i 行 j 列内の実際の頻度</description>
            </item>
            <item>
              <description>Eij = i 行 j 列内の予期周波数</description>
            </item>
            <item>
              <description>r = 番号または行</description>
            </item>
            <item>
              <description>c = 列数</description>
            </item>
          </list>
          <para>Χ2 の低値は、独立性を示すインジケーターです。 数式からわかるように、χ2 は常に正または 0 の場合、ありのみの場合は 0 を Aij Eij を = どの i、j。</para>
          <para>
            <b>ChiSq_Test</b>を返します。 確率の値以上の高い χ2 の統計情報の値は、上記の数式で計算されることは、独立性の仮定の下で偶然発生したできます。 この確率を計算するためには、 <b>ChiSq_Test</b>と適切な自由度 df の χ2 の配布を使用します。 場合 r &gt; 1 および c &gt; 1 は、df = (r - 1)(c-1)。 場合 r = 1 および c &gt; 1 は、df = c - 1 または r &gt; 1 および c = 1 では、df = r - 1。 r = c = 1 が許可されていませんし、エラーが生成されます。</para>
          <para>Eij が小さすぎるではない場合、 <b>ChiSq_Test</b>の使用が最適です。 統計学者は、各 Eij を 5 以上にすることをお勧めします。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiTest">
      <MemberSignature Language="C#" Value="public double ChiTest (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiTest([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiTest(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiTest (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiTest(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16690)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">期待値に対する検定の実測値が入力されているデータ範囲を指定します。</param>
        <param name="Arg2">正確さの向上を提供することがあり、名前がその使用方法をより効果的に反映 1 つまたは複数の新しい関数を使用して、ImportantThis 関数は交換済み。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Test(System.Object,System.Object)" />メソッドです。 期待値が入力されているデータ範囲を指定します。実測値と期待値では、行方向の値の合計と列方向の値の合計がそれぞれ等しくなっている必要があります。</param>
        <summary>カイ 2 乗 (χ2) 検定を行います。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Chitest 関数</b>は、統計と自由度に対するカイ 2 乗 (χ2) 分布から値を返します。 Χ2 テストを使用すると、結果が実験によって検証仮説かどうかを決定します。</para>
          <para><b>実測値範囲と期待値は、データ要素の個数が異なるである場合、#N/A エラー値が返されます。</b> </para>
          <para>Χ2 テストは、最初に式を使用して χ2 の統計情報を計算します。 </para>
          <para>図 1: 数式の x 乗のテスト</para>
          <para> </para>
          <para> </para>
          <para>各項目の意味は次のとおりです。</para>
          <list type="bullet">
            <item>
              <description>Aij = i 行 j 列内の実際の頻度</description>
            </item>
            <item>
              <description>Eij = i 行 j 列内の予期周波数</description>
            </item>
            <item>
              <description>r = 番号または行</description>
            </item>
            <item>
              <description>c = 列数</description>
            </item>
          </list>
          <para> </para>
          <para>Χ2 の低値は、独立性を示すインジケーターです。 数式からわかるように、χ2 は常に正または 0 の場合、ありのみの場合は 0 を Aij Eij を = どの i、j。</para>
          <para>
            <b>Chitest 関数</b>を返します。 確率の値以上の高い χ2 の統計情報の値は、上記の数式で計算されることは、独立性の仮定の下で偶然発生したできます。 <b>この確率の計算と適切な自由度 df の χ2 分布が使用されます。</b> 場合 r &gt; 1 および c &gt; 1 は、df = (r - 1)(c-1)。 場合 r = 1 および c &gt; 1 は、df = c - 1 または r &gt; 1 および c = 1 では、df = r - 1。 r = c = 1 が許可されていませんし、エラーが生成されます。</para>
          <para><b>Chitest 関数</b>の使用は、Eij が小さすぎる場合に最適です。 統計学者は、各 Eij を 5 以上にすることをお勧めします。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Choose">
      <MemberSignature Language="C#" Value="public object Choose (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Choose([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Choose(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16484)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">どの引数値が選択されているかを指定します。 Arg1 には、1、29、数式または 1 ~ 29 の数値を含むセルへの参照の間の数値をする必要があります。</param>
        <param name="Arg2">選択される値または実行する操作を 1 から 29 個の値の引数は、引数 1 に基づいています。 引数は、数値、セル参照、定義名、数式、関数、または文字列にできます。</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>使用して<paramref name="Arg1" />インデックスの値の引数のリストから値を返すとします。</summary>
        <returns>To be added.</returns>
        <remarks><para>場合<paramref name="Arg1" />は、1、<b>値と値の 1 です。</b><b>2 の場合、返されます値 2。</b>などなど。 </para>
          <para>場合<paramref name="Arg1" />が 1 より小さいか、または数より大きい値<b>の選択</b>リストの最後の値のエラーが生成されます。 </para>
          <para>場合<paramref name="Arg1" />、分数では、使用する前に低い整数へ切り捨てられます。 </para>
          <para>場合<paramref name="Arg1" />は、配列では、<b>選択</b>が評価されるときにすべての値が評価されます。 </para>
          <para>引数<b>に</b>単一の値と範囲の参照を使用できます。 たとえば、次のような数式があるとします。</para>
          <para>= 合計 (選択 (2, a1: a10、b1: b10、C1:C10))</para>
          <para>評価されます。</para>
          <para>=SUM(B1:B10)</para>
          <para>範囲 b1: b10 の値に基づいて値を返します。</para>
          <para><b>Choose</b>関数が最初に評価、b1: b10 の参照を取得します。 SUM 関数は、引数として範囲 b1: b10 を<b>選択</b>関数の結果を使用して評価します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Clean">
      <MemberSignature Language="C#" Value="public string Clean (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Clean([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Clean(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Clean (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Clean(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16546)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">印刷できない文字を削除するワークシートの文字データを指定します。</param>
        <summary>印刷できない文字を文字列から削除します。</summary>
        <returns>To be added.</returns>
        <remarks><para>オペレーティング システムでは印刷できない文字が含まれている他のアプリケーションからインポートされたテキストの<b>消去</b>を使用します。 などで頻繁に先頭とデータ ファイルの末尾に印刷できない制御コードを削除するのには、 <b>Clean</b>を使用できます。</para>
          <para>
            <b>重要</b>: <b>Clean</b>関数は、7 ビット ASCII コード (値 0 ~ 31) の最初の 32 の印刷できない文字を削除するのにはテキストから設計されました。 Unicode 文字セットには、追加の編集記号 (値 127、129、141、143、144、および 157) があります。 自体は、 <b>Clean</b>関数では、これらの追加の印刷できない文字は削除されません。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Combin">
      <MemberSignature Language="C#" Value="public double Combin (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Combin([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Combin(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Combin (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Combin(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16660)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">抜き取る対象の全体の数 (総数) を指定します。</param>
        <param name="Arg2">組み合わせる 1 組に含まれる項目の数 (抜き取り数) を指定します。</param>
        <summary>指定されたアイテム数の組み合わせの数を返します。 <b>Combin</b>を使用すると、アイテム数が特定のグループの合計数を決定します。</summary>
        <returns>To be added.</returns>
        <remarks><para>整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para><b>いずれかの引数が数値以外の場合は、エラーになります。</b> </para>
          <para>数値の場合&lt;0、抜き取り&lt;0、または数&lt;抜き取り、 <b>Combin</b>エラーが発生します。 </para>
          <para>順列では、選択した項目の順序に意味があるのに対し、組み合わせでは、項目の順序に意味はありません。</para>
          <para>総数 = n、抜き取り数 = k とすると、組み合わせの総数は、次の数式で表されます。 </para>
          <para>図 1: の組み合わせの数</para>
          <para> </para>
          <para> </para>
          <para>ここで、</para>
          <para>図 2: 数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Combina">
      <MemberSignature Language="C#" Value="public double Combina (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Combina([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Combina(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Combina (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Combina(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16952)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">項目の合計数を指定します。</param>
        <param name="Arg2">組み合わせる 1 組に含まれる項目の数 (抜き取り数) を指定します。</param>
        <summary>すべての項目から指定された個数を選択するときの組み合わせ (反復あり) の数を返します。</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Complex">
      <MemberSignature Language="C#" Value="public string Complex (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Complex([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Complex (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16795)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数の実数係数を指定します。</param>
        <param name="Arg2">複素数の虚数係数を指定します。</param>
        <param name="Arg3">複素数の虚数部分の単位として、文字 "i" または "j" を指定します。虚数単位を省略すると、"i" を指定したと見なされます。</param>
        <summary>実数係数および虚数係数を "x+yi" または "x+yj" の形式の複素数に変換します。</summary>
        <returns>To be added.</returns>
        <remarks><para>複素数を処理するための関数では、虚数単位として "i" または "j" のいずれかを使用できますが、大文字の "I" と "J" を使用すると、エラーになります。複数の引数を指定する場合は、虚数単位を統一する必要があります。</para>
          <para>場合<paramref name="Arg1" />は、数値以外で、<b>複雑な</b>エラーが生成されます。 </para>
          <para>場合<paramref name="Arg2" />は、数値以外で、<b>複雑な</b>エラーが生成されます。 </para>
          <para>場合<paramref name="Arg3" />は、"i"または"j"では、<b>複雑な</b>エラーが生成されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public double Confidence (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16661)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">信頼度を計算するために使用する有意水準 (α) を指定します。信頼度は 100 * (1- α)% で計算されます。つまり、α = 0.05 であるとき、信頼度は 95% になります。</param>
        <param name="Arg2">データ範囲に対する母集団の標準偏差を指定します。これは、既知であると仮定されます。</param>
        <param name="Arg3">標本数を指定します。</param>
        <summary>母集団の平均に対する信頼区間を求めます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_Norm(System.Double,System.Double,System.Double)" />と<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_T(System.Double,System.Double,System.Double)" />の方法です。</para>
          <para>信頼区間とは、値の範囲です。 標本平均が、x は、この範囲の中心に、範囲は x ±<b>自信を持って</b>います。 などの場合は、メールで注文された商品の配達所要時間の標本平均を x には、x ±<b>自信を持って</b>は母集団の平均値の範囲です。 母集団平均 μ 0 で、この範囲にある場合、x よりも μ 0 から離れた標本平均の確率は、α より大きい母集団平均 μ 0 のこの範囲にある場合、x よりも μ 0 から離れた標本平均の確率ではなく、α より小さくは。 、つまりを使用して x、標準偏差、およびサイズの母集団の平均が μ 0 であるという仮説の有意水準 α における両側検定を行います。 私たちは仮説を却下せず μ 0 が信頼区間内には、μ 0 が信頼区間内にない場合はこの仮説を却下します。 信頼区間は確率 1-アルファ、次のパッケージが、配達所要時間が信頼区間内になることがあることを推論することできません。 </para>
          <para><b>いずれかの引数が数値以外の場合は、エラーになります。</b> </para>
          <para>場合は、α ≤ 0 であるか、またはアルファ受領 1、<b>信頼</b>には、エラーが生成されます。 </para>
          <para>場合は標準偏差 ≤ 0、<b>信頼</b>には、エラーが生成されます。 </para>
          <para>標本数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>Size &lt; 1、<b>エラーになります</b>。 </para>
          <para>Α = 0.05 と仮定した場合通常の標準の下の領域を計算する必要があります (1 - α) % つまり 95% の曲線です。 この値は ± 1.96 です。 信頼区間は、そのためです。 </para>
          <para>図 1: 信頼区間</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence_Norm">
      <MemberSignature Language="C#" Value="public double Confidence_Norm (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence_Norm([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_Norm(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence_Norm (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence_Norm(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16872)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">信頼度を計算するために使用する有意水準 (α) を指定します。信頼度は 100 * (1- α)% で計算されます。つまり、α = 0.05 であるとき、信頼度は 95% になります。</param>
        <param name="Arg2">データ範囲に対する母集団の標準偏差を指定します。これは、既知であると仮定されます。</param>
        <param name="Arg3">標本数を指定します。</param>
        <summary>母集団の平均に対する信頼区間を求めます。</summary>
        <returns>To be added.</returns>
        <remarks><para>信頼区間とは、値の範囲です。 標本平均 x は、この範囲の中心に、範囲は x ± <b>Confidence_Norm</b>です。 などの場合は、メールで注文された商品の配達所要時間の標本平均を x には、x ± <b>Confidence_Norm</b>は母集団の平均値の範囲です。 母集団平均 μ 0 で、この範囲にある場合、x よりも μ 0 から離れた標本平均の確率は、α より大きい母集団平均 μ 0 のこの範囲にある場合、x よりも μ 0 から離れた標本平均の確率ではなく、α より小さくは。 X、標準偏差、つまり、仮定して、サイズを使用して、母集団の平均が μ 0 であるという仮説の有意水準 α における両側検定を行います。 私たちは仮説を却下せず μ 0 が信頼区間内には、μ 0 が信頼区間内にない場合はこの仮説を却下します。 信頼区間では、推論の確率 1-アルファの次のパッケージが、配達所要時間が信頼区間内になることがあることは許可されていません。</para>
          <para>いずれかの引数が数値以外の場合は、 <b>Confidence_Norm</b>にはエラーが生成されます。 </para>
          <para>場合は、α ≤ 0 であるか、またはアルファ受領 1、 <b>Confidence_Norm</b>には、エラーが生成されます。 </para>
          <para>場合は標準偏差 ≤ 0、 <b>Confidence_Norm</b>には、エラーが生成されます。 </para>
          <para>標本数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>Size &lt; 1, <b>Confidence_Norm</b>には、エラーが生成されます。 </para>
          <para>アルファが 0.05 が通常の標準の下の領域を計算することが前提としている場合 (1 - α) % つまり 95% のカーブです。 この値は ± 1.96 です。 信頼区間は、そのためです。 </para>
          <para>図 1: 信頼区間</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence_T">
      <MemberSignature Language="C#" Value="public double Confidence_T (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence_T([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_T(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence_T (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence_T(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16873)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">α: 信頼度を計算するために使用する有意水準を指定します。信頼度は 100 * (1 - α)% で計算されます。つまり、α = 0.05 であるとき、信頼度は 95% になります。</param>
        <param name="Arg2">標準偏差: データ範囲に対する母集団の標準偏差を指定します。これは、既知であると仮定されます。</param>
        <param name="Arg3">標本数: 標本数を指定します。</param>
        <summary>スチューデントの t 分布を使用して、母集団の平均に対する信頼区間を求めます。</summary>
        <returns>To be added.</returns>
        <remarks><para>いずれかの引数が数値以外の場合は、 <b>Confidence_T</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>場合は、α ≤ 0 であるか、またはアルファ受領 1、 <b>Confidence_T</b>は、#NUM を返します。 エラー値です。 </para>
          <para>場合は標準偏差 ≤ 0、 <b>Confidence_T</b>は、#NUM を返します。 エラー値です。 </para>
          <para>標本数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>標本数が 1 に等しい、 <b>Confidence_T</b> # の DIV または 0 を返します。 エラー値です。 </para>
          <para>標本数が 1 に等しい、 <b>Confidence_T</b> # の DIV または 0 を返します。 エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public double Convert (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Convert([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Convert(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Convert (Arg1 As Object, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Convert(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16852)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">変換する値を指定します。</param>
        <param name="Arg2">数値の単位を指定します。</param>
        <param name="Arg3">結果の単位です。 <b>変換</b>の変換前単位と変換後単位以下の「解説」セクションに記載されて次のテキスト値 (引用符で囲まれた) を受け取ります。</param>
        <summary>数値を別の 1 つの測定システムに変換します。 たとえば、<b>変換</b>は、キロメートルの距離のテーブルにマイルの距離のテーブルを変換できます。</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>グラム</term>
              <description>"g"</description>
            </item>
            <item>
              <term>スラグ</term>
              <description>"sg"</description>
            </item>
            <item>
              <term>ポンド (常衡)</term>
              <description>"lbm"</description>
            </item>
            <item>
              <term>U (原子質量単位)</term>
              <description>"u"</description>
            </item>
            <item>
              <term>オンス (常衡)</term>
              <description>"ozm"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>メートル</term>
              <description>"m"</description>
            </item>
            <item>
              <term>法定マイル</term>
              <description>"mi"</description>
            </item>
            <item>
              <term>海里</term>
              <description>"Nmi"</description>
            </item>
            <item>
              <term>インチ</term>
              <description>"in"</description>
            </item>
            <item>
              <term>フィート</term>
              <description>"ft"</description>
            </item>
            <item>
              <term>ヤード</term>
              <description>"yd"</description>
            </item>
            <item>
              <term>オングストローム</term>
              <description>"ang"</description>
            </item>
            <item>
              <term>パイカ (1/72 インチ)</term>
              <description>"Pica"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>年</term>
              <description>"yr"</description>
            </item>
            <item>
              <term>日</term>
              <description>"day"</description>
            </item>
            <item>
              <term>時</term>
              <description>"hr"</description>
            </item>
            <item>
              <term>分</term>
              <description>"mn"</description>
            </item>
            <item>
              <term>秒</term>
              <description>"sec"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>パスカル</term>
              <description>"Pa" (または "p")</description>
            </item>
            <item>
              <term>気圧</term>
              <description>"atm" (または "at")</description>
            </item>
            <item>
              <term>ミリメートル Hg</term>
              <description>「mmHg」</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>ニュートン</term>
              <description>"N"</description>
            </item>
            <item>
              <term>ダイン</term>
              <description>"dyn" (または "dy")</description>
            </item>
            <item>
              <term>ポンド フォース</term>
              <description>"lbf"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>ジュール</term>
              <description>"J"</description>
            </item>
            <item>
              <term>エルグ</term>
              <description>"e"</description>
            </item>
            <item>
              <term>カロリー (物理化学的熱量)</term>
              <description>"c"</description>
            </item>
            <item>
              <term>カロリー (生理学的代謝熱量)</term>
              <description>"cal"</description>
            </item>
            <item>
              <term>電子ボルト</term>
              <description>"eV" (または "ev")</description>
            </item>
            <item>
              <term>馬力時</term>
              <description>"HPh" (または "hh")</description>
            </item>
            <item>
              <term>ワット時</term>
              <description>"Wh" (または "wh")</description>
            </item>
            <item>
              <term>フィートポンド</term>
              <description>"flb"</description>
            </item>
            <item>
              <term>BTU (英国熱量単位)</term>
              <description>"BTU" (または "btu")</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>馬力</term>
              <description>"HP" (または "h")</description>
            </item>
            <item>
              <term>ワット</term>
              <description>"W" (または "w")</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>テスラ</term>
              <description>"T"</description>
            </item>
            <item>
              <term>ガウス</term>
              <description>"ga"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>摂氏</term>
              <description>"C" (または "cel")</description>
            </item>
            <item>
              <term>華氏</term>
              <description>"F" (または "fah")</description>
            </item>
            <item>
              <term>絶対温度</term>
              <description>"K" (または "kel")</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>ティースプーン</term>
              <description>"tsp"</description>
            </item>
            <item>
              <term>テーブルスプーン</term>
              <description>"tbs"</description>
            </item>
            <item>
              <term>オンス</term>
              <description>"oz"</description>
            </item>
            <item>
              <term>カップ</term>
              <description>"cup"</description>
            </item>
            <item>
              <term>パイント (米)</term>
              <description>"pt" (または "us_pt")</description>
            </item>
            <item>
              <term>パイント (英)</term>
              <description>"uk_pt"</description>
            </item>
            <item>
              <term>クォート</term>
              <description>"qt"</description>
            </item>
            <item>
              <term>ガロン</term>
              <description>"gal"</description>
            </item>
            <item>
              <term>リットル</term>
              <description>"l" (または "lt")</description>
            </item>
          </list>
          <para>次に示す 10 のべき乗に対応する略語は、変換前単位または変換後単位に前置することができます。</para>
          <list type="table">
            <item>
              <term>exa</term>
              <description>1E+18</description>
              <description>"E"</description>
            </item>
            <item>
              <term>peta</term>
              <description>1E+15</description>
              <description>"P"</description>
            </item>
            <item>
              <term>tera</term>
              <description>1E+12</description>
              <description>"T"</description>
            </item>
            <item>
              <term>giga</term>
              <description>1E+09</description>
              <description>"G"</description>
            </item>
            <item>
              <term>mega</term>
              <description>1E+06</description>
              <description>"M"</description>
            </item>
            <item>
              <term>kilo</term>
              <description>1E+03</description>
              <description>"k"</description>
            </item>
            <item>
              <term>hecto</term>
              <description>1E+02</description>
              <description>"h"</description>
            </item>
            <item>
              <term>dekao</term>
              <description>1E+01</description>
              <description>"e"</description>
            </item>
            <item>
              <term>deci</term>
              <description>1E-01</description>
              <description>"d"</description>
            </item>
            <item>
              <term>centi</term>
              <description>1E-02</description>
              <description>"c"</description>
            </item>
            <item>
              <term>milli</term>
              <description>1E-03</description>
              <description>"m"</description>
            </item>
            <item>
              <term>micro</term>
              <description>1E-06</description>
              <description>"u"</description>
            </item>
            <item>
              <term>nano</term>
              <description>1E-09</description>
              <description>"n"</description>
            </item>
            <item>
              <term>pico</term>
              <description>1E-12</description>
              <description>"p"</description>
            </item>
            <item>
              <term>femto</term>
              <description>1E-15</description>
              <description>"f"</description>
            </item>
            <item>
              <term>atto</term>
              <description>1E-18</description>
              <description>"a"</description>
            </item>
          </list>
          <para>入力データ型が正しくない場合は、<b>変換</b>エラーが発生します。 </para>
          <para>ユニットが存在しない場合は、<b>変換</b>とエラーが発生します。 </para>
          <para>ユニットが、省略形の単位のプレフィックスをサポートしていない場合は<b>変換</b>エラーを生成します。 </para>
          <para>単位は、別のグループには、<b>変換</b>はエラーを生成します。 </para>
          <para>単位名と略語の大文字と小文字は区別されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Correl">
      <MemberSignature Language="C#" Value="public double Correl (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Correl([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Correl(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Correl (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Correl(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16691)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">データが入力されたセル範囲を指定します。</param>
        <param name="Arg2">もう一方のデータが入力されたセル範囲を指定します。</param>
        <summary>相関係数を返します、<paramref name="Arg1" />と<paramref name="Arg2" />の範囲のセルです。</summary>
        <returns>To be added.</returns>
        <remarks><para>相関係数は、2 つの特性の関係を判断するときに使用します。たとえば、各地域の平均気温とエアコンの普及率の相関関数を調べることができます。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、または空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>場合<paramref name="Arg1" />と<paramref name="Arg2" />のデータ ポイントの個数が異なる、<b>双方のデータ</b>にエラーが生成されます。 </para>
          <para>いずれか<paramref name="Arg1" />または<paramref name="Arg2" />が空の場合、<b>双方のデータ</b>がエラーを生成する場合は、それらの値は、s (標準偏差) が 0 に等しい、または。 </para>
          <para>相関関数は次の数式で計算できます。</para>
          <para>相関係数の数式を図 1:</para>
          <para> </para>
          <para> </para>
          <para>ここで、x は標本平均 Average(Arg1)、y は標本平均 Average(Arg2) です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public double Cosh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Cosh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Cosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Cosh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Cosh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16614)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">双曲線余弦を求める実数を指定します。</param>
        <summary>数値の双曲線余弦 (ハイパーボリック コサイン) を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>双曲線余弦は、次の数式で表されます。 </para>
          <para>双曲線余弦の数式を図 1:</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Cot">
      <MemberSignature Language="C#" Value="public double Cot (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Cot([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Cot(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Cot (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Cot(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16934)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">コタンジェントを求める角度をラジアンで指定します。</param>
        <summary>角度のコタンジェントを返します。</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Coth">
      <MemberSignature Language="C#" Value="public double Coth (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Coth([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Coth(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Coth (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Coth(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16935)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">双曲線余接を求める角度をラジアンを単位として指定します。</param>
        <summary>数値の双曲線余接を返します。</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public double Count (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Count([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Count(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Count (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16384)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">任意のデータ型を使用し、任意の値、名前付きのセル範囲、配列、またはセル参照を指定します。引数は 1 ～ 30 個まで指定できます。ただし、計算の対象となるのは数値だけです。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数リストの各項目に含まれる数値の個数の合計を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>範囲または値の配列に含まれる数値フィールド内のエントリの数を取得するのにには、 <b>Count</b>を使用します。 </para>
          <para>Count メソッドでは、数値、日付、数値を表す文字列が計算の対象となります。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>エラー値、数値に変換できない文字列は無視されます。</para>
          <para>引数が配列またはセル範囲である場合、その中に含まれる数値だけが計算の対象となります。空白セル、論理値、文字列、またはエラー値はすべて無視されます。</para>
          <para>論理値、文字列、またはエラー値をカウントする場合を使用して、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountA(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />関数です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountA">
      <MemberSignature Language="C#" Value="public double CountA (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountA([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountA(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountA (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16553)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">値、あるいは値を含む名前、配列、またはセル参照を指定します。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数リストの各項目に含まれるデータの個数の合計を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>範囲または配列内のデータを含むセルの数をカウントするのにには、 <b>CountA</b>を使用します。</para>
          <para>CountA メソッドでは、エラー値や空白文字列 ("") を含め、すべてのデータ型の値が計算の対象となります。ただし、空白セルだけは計算の対象となりません。</para>
          <para>引数に配列またはセル範囲の参照を指定した場合、そこに含まれる数値だけが計算の対象となります。配列またはセル範囲の参照に含まれる空白セルと文字列は無視されます。</para>
          <para>論理値、文字列、またはエラー値をカウントする必要はありません、する場合を使用して、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Count(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />関数です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountBlank">
      <MemberSignature Language="C#" Value="public double CountBlank (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountBlank([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountBlank(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountBlank (Arg1 As Range) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CountBlank(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16731)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">空白セルの個数を求めるセル範囲を指定します。</param>
        <summary>指定された範囲に含まれる空白セルの個数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>空白文字列 ("") を返す数式が入力されているセルも計算の対象となります。ただし、数値の 0 を含むセルは計算の対象となりません。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountIf">
      <MemberSignature Language="C#" Value="public double CountIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountIf(Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountIf (Arg1 As Range, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CountIf(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16730)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">セルの個数を求めるセル範囲を指定します。</param>
        <param name="Arg2">数値、式、セル参照、または計算の対象となるセルを定義するテキストの形式の条件です。 などの基準として表せる 32、32、"&gt;32」、「りんご」、または B4。</param>
        <summary>指定された範囲に含まれるセルのうち、検索条件に一致するセルの個数を返します。</summary>
        <returns>返します。 <see cref="T:System.Double" />。</returns>
        <remarks><para>検索条件では、半角の疑問符 (?) または半角のアスタリスク (*) をワイルドカード文字として使用することができます。ワイルドカード文字の疑問符は任意の 1 文字を表し、アスタリスクは任意の文字列を表します。ワイルドカード文字ではなく、通常の文字として疑問符やアスタリスクを検索する場合は、その文字の前に、"~*" のように半角のティルダ (~) を付けます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountIfs">
      <MemberSignature Language="C#" Value="public double CountIfs (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountIfs(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountIfs (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16865)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">対応する条件による評価の対象となる範囲を指定します。</param>
        <param name="Arg2">1 つまたは複数の条件の数値、式、セル参照、またはテキスト形式で計算の対象となるセルを定義します。 などの基準として表せる 32、32、"&gt;32」、「りんご」、または B4。</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>指定された範囲に含まれるセルのうち、複数の検索条件に一致するセルの個数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>セルに対して指定されたすべての検索条件が TRUE の場合にのみ、範囲内の各セルの個数を計算します。</para>
          <para><b>引数内のセルが空のセルの場合と見なされます 0 を指定します。</b> </para>
          <para>検索条件では、半角の疑問符 (?) または半角のアスタリスク (*) をワイルドカード文字として使用することができます。ワイルドカード文字の疑問符は任意の 1 文字を表し、アスタリスクは任意の文字列を表します。ワイルドカード文字ではなく、通常の文字として疑問符やアスタリスクを検索する場合は、その文字の前に、"~*" のように半角のティルダ (~) を付けます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDayBs">
      <MemberSignature Language="C#" Value="public double CoupDayBs (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDayBs([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDayBs(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDayBs (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16836)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">年間の利息支払回数を指定します。年 1 回の場合は 1、年 2 回の場合は 2、四半期ごとの場合は 4 を指定します。</param>
        <param name="Arg4">計算に使用する基準日数を示す数値を指定します。</param>
        <summary>利払期間の第 1 日目から受渡日までの日数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>次の表には、値のリストが含まれている<paramref name="Arg4" />。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4</term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 30 年後に当たる 2038 年 1 月 1 日になります。</para>
          <para>引数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>受領または成熟度が有効な日付でない場合、<b>指定すると</b>エラーが発生します。 </para>
          <para>頻度が 1、2、または 4 以外の数値の場合は、<b>指定すると</b>エラーを生成します。 </para>
          <para>場合単位&lt;0 または基準&gt;4、<b>指定すると</b>エラーが発生します。 </para>
          <para>場合受領成熟度を<b>指定すると</b>エラーになります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDays">
      <MemberSignature Language="C#" Value="public double CoupDays (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDays([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDays(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDays (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16837)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">年間の利息支払回数を指定します。年 1 回の場合は 1、年 2 回の場合は 2、四半期ごとの場合は 4 を指定します。</param>
        <param name="Arg4">計算に使用する基準日数を示す数値を指定します。</param>
        <summary>受渡日を含む利払期間内の日数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: DATE 関数を使用するか、他の数式または関数の結果として、日付を入力する必要があります。 たとえば、2008 年 5 月 23 日の DATE(2008,5,23) を使用します。 日付をテキストとして入力した場合、問題が発生することができます。</para>
          <para>次の表で使用する値が含まれている<paramref name="Arg4" />。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4</term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 30 年後に当たる 2038 年 1 月 1 日になります。</para>
          <para>引数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>受領または成熟度が有効な日付でない場合、<b>指定</b>には、エラーが生成されます。 </para>
          <para>頻度が 1、2、または 4 以外の数値の場合は、<b>指定</b>には、エラーが生成されます。 </para>
          <para>場合単位&lt;0 または基準&gt;4、<b>指定</b>には、エラーが生成されます。 </para>
          <para>場合は受領成熟度を<b>指定</b>には、エラーが生成されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDaysNc">
      <MemberSignature Language="C#" Value="public double CoupDaysNc (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDaysNc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDaysNc(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDaysNc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16838)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">年間の利息支払回数を指定します。年 1 回の場合は 1、年 2 回の場合は 2、四半期ごとの場合は 4 を指定します。</param>
        <param name="Arg4">計算に使用する基準日数を示す数値を指定します。</param>
        <summary>受渡日から次の利払日までの日数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: DATE 関数を使用するか、他の数式または関数の結果として、日付を入力する必要があります。 たとえば、2008 年 5 月 23 日の DATE(2008,5,23) を使用します。 日付をテキストとして入力した場合、問題が発生することができます。</para>
          <para>次の表で使用する値が含まれている<paramref name="Arg4" />。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4</term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>引数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>受領または成熟度が有効な日付でない場合、<b>指定すると</b>エラーが発生します。 </para>
          <para>頻度が 1、2、または 4 以外の数値の場合は、<b>指定すると</b>エラーを生成します。 </para>
          <para>場合単位&lt;0 または基準&gt;4、<b>指定すると</b>エラーが発生します。 </para>
          <para>場合受領成熟度を<b>指定すると</b>エラーになります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupNcd">
      <MemberSignature Language="C#" Value="public double CoupNcd (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupNcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupNcd(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupNcd (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16839)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">年間の利息支払回数を指定します。年 1 回の場合は 1、年 2 回の場合は 2、四半期ごとの場合は 4 を指定します。</param>
        <param name="Arg4">計算に使用する基準日数を示す数値を指定します。</param>
        <summary>受渡日後の次の利払日を数値で返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: DATE 関数を使用するか、他の数式または関数の結果として、日付を入力する必要があります。 たとえば、2008 年 5 月 23 日の DATE(2008,5,23) を使用します。 日付をテキストとして入力した場合、問題が発生することができます。</para>
          <para>次の表で使用する値が含まれている<paramref name="Arg4" />。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4</term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>引数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>受領または成熟度が有効な日付でない場合、<b>指定すると</b>エラーが発生します。 </para>
          <para>頻度が 1、2、または 4 以外の数値の場合は、<b>指定すると</b>エラーを生成します。 </para>
          <para>場合単位&lt;0 または基準&gt;4、<b>指定すると</b>エラーが発生します。 </para>
          <para>場合受領成熟度を<b>指定すると</b>エラーになります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupNum">
      <MemberSignature Language="C#" Value="public double CoupNum (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupNum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupNum(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupNum (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16840)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">年間の利息支払回数を指定します。年 1 回の場合は 1、年 2 回の場合は 2、四半期ごとの場合は 4 を指定します。</param>
        <param name="Arg4">計算に使用する基準日数を示す数値を指定します。</param>
        <summary>受渡日と満期日の間に利息が支払われる回数を返します。端数が出た場合は切り上げられます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: DATE 関数を使用するか、他の数式または関数の結果として、日付を入力する必要があります。 たとえば、2008 年 5 月 23 日の DATE(2008,5,23) を使用します。 日付をテキストとして入力した場合、問題が発生することができます。</para>
          <para>次の表で使用する値が含まれている<paramref name="Arg4" />。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4</term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>引数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>受領または成熟度が有効な日付でない場合、<b>指定</b>には、エラーが生成されます。 </para>
          <para>頻度が 1、2、または 4 以外の数値の場合は、<b>ある</b>には、エラーが生成されます。 </para>
          <para>場合単位&lt;0 または基準&gt;4、<b>指定</b>には、エラーが生成されます。 </para>
          <para>場合は受領成熟度、<b>ある</b>には、エラーが生成されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupPcd">
      <MemberSignature Language="C#" Value="public double CoupPcd (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupPcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupPcd(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupPcd (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16841)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">年間の利息支払回数を指定します。年 1 回の場合は 1、年 2 回の場合は 2、四半期ごとの場合は 4 を指定します。</param>
        <param name="Arg4">計算に使用する基準日数を示す数値を指定します。</param>
        <summary>受渡日の直前の利払日を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: DATE 関数を使用するか、他の数式または関数の結果として、日付を入力する必要があります。 たとえば、2008 年 5 月 23 日の DATE(2008,5,23) を使用します。 日付をテキストとして入力した場合、問題が発生することができます。</para>
          <para>次の表で使用する値が含まれている<paramref name="Arg4" />。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4</term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>引数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>受領または成熟度が有効な日付でない場合、<b>指定すると</b>エラーが発生します。 </para>
          <para>頻度が 1、2、または 4 以外の数値の場合は、<b>指定すると</b>エラーを生成します。 </para>
          <para>場合単位&lt;0 または基準&gt;4、<b>指定すると</b>エラーが発生します。 </para>
          <para>場合受領成熟度を<b>指定すると</b>エラーになります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Covar">
      <MemberSignature Language="C#" Value="public double Covar (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covar([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covar(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covar (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covar(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16692)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">整数のデータが入力されている一方のセル範囲を指定します。</param>
        <param name="Arg2">整数のデータが入力されているもう一方のセル範囲を指定します。</param>
        <summary>共分散を返します。共分散とは、2 組の対応するデータ間での標準偏差の積の平均値です。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_P(System.Object,System.Object)" />と<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_S(System.Object,System.Object)" />メソッドです。</para>
          <para>共分散を利用することによって、2 組のデータの相関関係を分析することができます。たとえば、ある社会集団を対象に、収入と最終学歴の相関関係を調べることができます。</para>
          <para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>場合<paramref name="Arg1" />と<paramref name="Arg2" />番号が異なる<b>covar 関数</b>、データ ポイントのエラーが発生します。 </para>
          <para>いずれか<paramref name="Arg1" />または<paramref name="Arg2" />が空の場合、<b>入力されて</b>エラーが発生します。 </para>
          <para>共分散は、次の数式で表されます。 </para>
          <para>共分散分析の図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para>ここで、x は標本平均 AVERAGE(配列 1)、y は標本平均 AVERAGE(配列 2)、n は標本数です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Covariance_P">
      <MemberSignature Language="C#" Value="public double Covariance_P (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covariance_P([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_P(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covariance_P (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covariance_P(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16876)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">整数のデータが入力されている一方のセル範囲を指定します。</param>
        <param name="Arg2">整数のデータが入力されているもう一方のセル範囲を指定します。</param>
        <summary>母集団の共分散を返します。共分散とは、2 組の対応するデータ間での標準偏差の積の平均値です。</summary>
        <returns>To be added.</returns>
        <remarks><para><b>Covariance_P</b>を使用すると、2 つのデータ セット間のリレーションシップを決定します。 たとえばより多くの収益には、高いレベルの教育が付随しているかどうかを調べることができます。</para>
          <para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>場合<paramref name="Arg1" />と<paramref name="Arg2" />番号が異なる、データ ポイントの<b>Covariance_P</b>には、エラーが生成されます。 </para>
          <para>いずれか<paramref name="Arg1" />または<paramref name="Arg2" />が空の場合、 <b>Covariance_P</b>エラーが生成されます。 </para>
          <para>共分散は、次の数式で表されます。 </para>
          <para>共分散分析の図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para>ここで、x は標本平均 AVERAGE(配列 1)、y は標本平均 AVERAGE(配列 2)、n は標本数です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Covariance_S">
      <MemberSignature Language="C#" Value="public double Covariance_S (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covariance_S([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_S(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covariance_S (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covariance_S(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16877)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列 1: 整数のデータが入力されている一方のセル範囲を指定します。</param>
        <param name="Arg2">配列 2: 整数のデータが入力されているもう一方のセル範囲を指定します。</param>
        <summary>標本の共分散を返します。共分散とは、2 組の対応するデータ間での標準偏差の積の平均値です。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>配列 1 と配列 2 のデータ ポイントの数が異なる場合、 <b>Covariance_S</b>はエラー値 #n/a を返します。 </para>
          <para>配列 1 または配列 2 が空か、各<b>Covariance_S</b>の 1 つだけのデータ ポイントが含まれて 場合は、# の DIV または 0 を返します。 エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Creator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Creator As XlCreator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlCreator Creator { Microsoft::Office::Interop::Excel::XlCreator get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のオブジェクトが作成されたアプリケーションを示す 32 ビットの整数を返します。 読み取り専用の<b>整数値</b>(C# では int)。</summary>
        <value>To be added.</value>
        <remarks><para>オブジェクトは、Microsoft Excel で作成されている場合を返します文字列 XCEL を 16 進数の 5843454c に相当 <b>Creator</b>プロパティは、各アプリケーションが 4 文字のクリエーター コードを持つ Macintosh の Excel で使用するよう設計されています。 たとえば、Microsoft Excel は、クリエーター コードを持っています。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CritBinom">
      <MemberSignature Language="C#" Value="public double CritBinom (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CritBinom([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CritBinom(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function CritBinom (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CritBinom(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16662)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">ベルヌーイ試行の回数を指定します。</param>
        <param name="Arg2">1 回の試行が成功する確率を指定します。</param>
        <param name="Arg3">基準値を指定します。</param>
        <summary>累積二項分布の値が基準値以上になるような最小の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>品質保証アプリケーションでこの関数を使用します。 たとえば、 <b>CritBinom</b>を使用して、ロット全体を拒否することを使わないで実行ラインから来ることができる欠陥部品の最大数を決定します。</para>
          <para>いずれかの引数が数値以外の場合は、 <b>CritBinom</b>はエラーを生成します。 </para>
          <para>試行回数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>場合試験&lt;0、 <b>CritBinom</b>エラーが発生します。 </para>
          <para>成功の場合&lt;0 または成功率&gt;1、 <b>CritBinom</b>エラーが発生します。 </para>
          <para>アルファの場合&lt;0 または α &gt; 1、 <b>CritBinom</b>エラーが発生します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Csc">
      <MemberSignature Language="C#" Value="public double Csc (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Csc([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Csc(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Csc (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Csc(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16936)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">コセカントを求める角度 (ラジアン)。</param>
        <summary>角度のコセカントを返します。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Csch">
      <MemberSignature Language="C#" Value="public double Csch (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Csch([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Csch(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Csch (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Csch(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16937)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">双曲線余割を求める角度をラジアンで指定します。</param>
        <summary>角度の双曲線余割 (ハイパーボリック コセカント) を返します。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CumIPmt">
      <MemberSignature Language="C#" Value="public double CumIPmt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CumIPmt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CumIPmt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CumIPmt (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CumIPmt(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4, System::Object ^ Arg5, System::Object ^ Arg6);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16832)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">貸付期間を通じて一定の利率を指定します。</param>
        <param name="Arg2">貸付期間全体での支払回数の合計を指定します。</param>
        <param name="Arg3">現在の貸付額、つまり将来行われる一連の支払いを、現時点で一括支払いした場合の合計金額を指定します。</param>
        <param name="Arg4">計算の対象となる最初の期を指定します。最初の期から順に、1 から始まる番号が割り当てられます。</param>
        <param name="Arg5">計算の対象となる最後の期を指定します。</param>
        <param name="Arg6">支払いがいつ行われるかを、数値の 0 または 1 で指定します。</param>
        <summary>開始から終了までの期間内で貸付金に対して支払われる利息の累計を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>次の表で使用される値<paramref name="Arg6" />。</para>
          <list type="table">
            <item>
              <term>0 (ゼロ)</term>
              <description>各期の期末</description>
            </item>
            <item>
              <term>1</term>
              <description>各期の期首</description>
            </item>
          </list>
          <para>利率と期間を指定するために使用する単位について一貫していることを確認します。 年利 12% の 4 年ローンを月払いにする場合、4 * 12 の 12 分の 12% を使用して、 <paramref name="Arg2" />。 同じローンを年払いにする場合は、12% を使用して、4 の<paramref name="Arg2" />。 </para>
          <para>
            <paramref name="Arg2" />、 <paramref name="Arg4" />、 <paramref name="Arg5" />、と、型が整数に切り捨てられます。 </para>
          <para>場合利率 ≤ 0、 <paramref name="Arg2" /> ≤ 0、または<paramref name="Arg3" />≤ 0、<b>支払</b>には、エラーが生成されます。 </para>
          <para>場合<paramref name="Arg4" /> &lt; 1, <paramref name="Arg5" /> &lt; 1、または<paramref name="Arg4" /> &gt; <paramref name="Arg5" /> <b>、エラー</b>です。 </para>
          <para>場合<paramref name="Arg6" />は、0 または 1 の場合、<b>指定</b>以外の数値には、エラーが生成されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CumPrinc">
      <MemberSignature Language="C#" Value="public double CumPrinc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CumPrinc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CumPrinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CumPrinc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CumPrinc(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4, System::Object ^ Arg5, System::Object ^ Arg6);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16831)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">貸付期間を通じて一定の利率を指定します。</param>
        <param name="Arg2">貸付期間全体での支払回数の合計を指定します。</param>
        <param name="Arg3">現在の貸付額、つまり将来行われる一連の支払いを、現時点で一括支払いした場合の合計金額を指定します。</param>
        <param name="Arg4">計算の対象となる最初の期を指定します。最初の期から順に、1 から始まる番号が割り当てられます。</param>
        <param name="Arg5">計算の対象となる最後の期を指定します。</param>
        <param name="Arg6">計算の対象となる最後の期を指定します。</param>
        <summary>開始から終了までの期間に、貸付金に対して支払われる元金の累計を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>次の表で使用される値<paramref name="Arg6" />。</para>
          <list type="table">
            <item>
              <term>0 (ゼロ)</term>
              <description>各期の期末</description>
            </item>
            <item>
              <term>1</term>
              <description>各期の期首</description>
            </item>
          </list>
          <para>利率と期間を指定するために使用する単位について一貫していることを確認します。 年利 12% の 4 年ローンを月払いにする場合、4 * 12 の 12 分の 12% を使用して、 <paramref name="Arg2" />。 同じローンを年払いにする場合は、12% を使用して、4 の<paramref name="Arg2" />。 </para>
          <para>
            <paramref name="Arg2" />、 <paramref name="Arg4" />、 <paramref name="Arg5" />、と、型が整数に切り捨てられます。 </para>
          <para>場合利率 ≤ 0、 <paramref name="Arg2" /> ≤ 0、または<paramref name="Arg3" />≤ 0、<b>支払</b>には、エラーが生成されます。 </para>
          <para>場合<paramref name="Arg4" /> &lt; 1, <paramref name="Arg5" /> &lt; 1、または<paramref name="Arg4" /> &gt; <paramref name="Arg5" /> <b>、エラー</b>です。 </para>
          <para>場合<paramref name="Arg6" />は、0 または 1 の場合、<b>指定</b>以外の数値には、エラーが生成されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DAverage">
      <MemberSignature Language="C#" Value="public double DAverage (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DAverage([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DAverage(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DAverage (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DAverage(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16426)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">リストまたはデータベースを構成するセル範囲を指定します。データベースは、行 (レコード) と列 (フィールド) にデータを関連付けたリストです。リストの先頭の行には、各列の見出しが入力されている必要があります。</param>
        <param name="Arg2">関数の中で使用する列を指定します。半角の二重引用符 (") で囲んだ "樹齢" や "歩どまり" などのような文字列、またはリストでの列の位置を示す、引用符なしの番号、たとえば、先頭の列を示す場合は 1、2 番目の列を示す場合は 2 を指定します。</param>
        <param name="Arg3">指定した条件が設定されているセル範囲を指定します。列見出しと検索条件を指定するセルが少なくとも 1 つずつ含まれている場合は、任意のセル範囲を指定することができます。</param>
        <summary>リストまたはデータベースの指定された列を検索し、条件を満たすレコードの平均値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>セル内のテキストまたは値を入力するときに、数式を示すために等号 (=) を使用するため Microsoft が評価され、入力した内容です。ただし、予期しないフィルターの結果があります。 テキストまたは値のいずれかの等値比較演算子を指定するには、検索条件範囲内の該当セルに文字列式としての条件を入力します。 </para>
          <para>= ' のエントリを = '</para>
          <para>場所を検索する文字列または値入力内容にします。 例:</para>
          <list type="table">
            <item>
              <term>="=西脇"</term>
              <description>=西脇</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>テキスト データの抽出では、大文字と小文字は区別されません。ただし、特定の関数を使用することによって、大文字と小文字を区別した検索を実行できます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Days">
      <MemberSignature Language="C#" Value="public double Days (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Days([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Days(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Days (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Days(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16957)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">start_date(Arg2) および end_date (Arg1) には、間の日数を求める 2 つの日付を指定します。</param>
        <param name="Arg2">start_date(Arg2) および end_date (Arg1) には、間の日数を求める 2 つの日付を指定します。</param>
        <summary>2 つの日付の間の日数を返します。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Days360">
      <MemberSignature Language="C#" Value="public double Days360 (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Days360([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Days360(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Days360 (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16604)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">間の日数を求める 2 つの日付を指定します。開始日 (Arg1) に終了日 (Arg2) 以降の日付を指定すると、負の値が返されます。日付は、DATE 関数を使って入力するか、他の数式または他の関数の結果を指定します。</param>
        <param name="Arg2">間の日数を求める 2 つの日付を指定します。開始日 (Arg1) に終了日 (Arg2) 以降の日付を指定すると、負の値が返されます。日付は、DATE 関数を使って入力するか、他の数式または他の関数の結果を指定します。</param>
        <param name="Arg3">計算で米国またはヨーロッパ言語メソッドを使用するかどうかを指定するブール値です。</param>
        <summary>1 年を 360 日 (30 日×12) として、支払いの計算などによく使用される 2 つの日付の間の日数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>会計システムが 12 の 30 - 日月に基づいている場合に支払を計算するのにには、この関数を使用します。値が次の表に含まれている<paramref name="Arg3" />。</para>
          <list type="table">
            <item>
              <term>
                <b>false を指定</b>するか省略します。</term>
              <description>NASD 方式。開始日が、ある月の 31 日になる場合、同じ月の 30 日として計算が行われます。終了日が、ある月の 31 日になる場合は、開始日が 30 日でない限り、その翌月の 1 日として計算が行われます。2 月の 28 日と 29 日は、いずれも 2 月 30 日と見なされます。</description>
            </item>
            <item>
              <term>
                <b>true</b>
              </term>
              <description>ヨーロッパ方式。開始日または終了日が、ある月の 31 日になる場合、同じ月の 30 日として計算が行われます。</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Db">
      <MemberSignature Language="C#" Value="public double Db (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Db([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Db(System.Double,System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Db (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16631)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">取得価額: 資産を購入した時点での価格を指定します。</param>
        <param name="Arg2">残存価額: 耐用年数が終了した時点での資産の価格を指定します。</param>
        <param name="Arg3">耐用年数: 資産を使用できる年数、つまり償却の対象となる資産の寿命年数を指定します。</param>
        <param name="Arg4">期間: 減価償却費を求める期を指定します。期間は耐用年数と同じ単位で指定する必要があります。</param>
        <param name="Arg5">月: 資産を購入した期 (年度) の月数を指定します。省略すると、12 を指定したと見なされます。</param>
        <summary>定率法 (Fixed-declining Balance Method) を利用して、特定の期における資産の減価償却費を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>固定定率法では、固定利率で減価償却費を計算します。 DB では、期間の減価償却を計算するのには次の数式を使用します。</para>
          <para>(取得価額 - 前期までの減価償却の合計) * レート</para>
          <para>各項目の意味は次のとおりです。</para>
          <para>率 = 1 - ((salvage/cost) ^ (1/ライフ))、3 つの小数点以下の桁数に丸められました。</para>
          <para>最初と最後の期間の減価償却は、特別なケースです。 最初の期間には、DB は、この数式を使用します。</para>
          <para>コスト * 率 * 月/12</para>
          <para>最後の期間には、DB は、この数式を使用します。</para>
          <para>((取得価額 - 前期までの減価償却の合計) * 率 * (12 - 月))/12</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dbcs">
      <MemberSignature Language="C#" Value="public string Dbcs (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dbcs([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dbcs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dbcs (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Dbcs(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16599)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">文字列または変換する文字列を含むセルの参照を指定します。</param>
        <summary>文字列内の半角 (1 バイト) 文字を全角 (2 バイト) 文字に変換します。 関数 (および変換する文字) の名前は、言語の設定によって異なります。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DCount">
      <MemberSignature Language="C#" Value="public double DCount (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DCount([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DCount(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DCount (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DCount(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16424)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">データベース: リストまたはデータベースを構成するセル範囲を指定します。データベースは、行 (レコード) と列 (フィールド) にデータを関連付けたリストです。リストの先頭の行には、各列の見出しが入力されている必要があります。</param>
        <param name="Arg2">フィールド: 関数の中で使用する列を指定します。フィールドには、半角の二重引用符 (") で囲んだ "樹齢" や "歩どまり" などのような文字列、またはリストでの列の位置を示す番号、たとえば、先頭の列を示す場合は 1、2 番目の列を示す場合は 2 を、引用符なしで指定します。</param>
        <param name="Arg3">検索条件: 指定した条件が設定されているセル範囲を指定します。列見出しと検索条件を指定するセルが少なくとも 1 つずつ含まれている場合は、任意のセル範囲を指定することができます。</param>
        <summary>リストまたはデータベースの指定された列を検索し、条件を満たすレコードの中で数値が入力されているセルの個数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>セル内のテキストまたは値を入力するときに、数式を示すために等号 (=) を使用するため Microsoft が評価され、入力した内容です。ただし、予期しないフィルターの結果があります。 テキストまたは値のいずれかの等値比較演算子を指定するには、検索条件範囲内の該当セルに文字列式としての条件を入力します。 </para>
          <para>= ' のエントリを = '</para>
          <para>エントリが、テキストまたは値を検索します。 例:</para>
          <list type="table">
            <item>
              <term>="=西脇"</term>
              <description>=西脇</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>テキスト データの抽出では、大文字と小文字は区別されません。ただし、特定の関数を使用することによって、大文字と小文字を区別した検索を実行できます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DCountA">
      <MemberSignature Language="C#" Value="public double DCountA (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DCountA([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DCountA(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DCountA (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DCountA(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16583)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">データベース: リストまたはデータベースを構成するセル範囲を指定します。データベースは、行 (レコード) と列 (フィールド) にデータを関連付けたリストです。リストの先頭の行には、各列の見出しが入力されている必要があります。</param>
        <param name="Arg2">フィールド: 関数の中で使用する列を指定します。フィールドには、半角の二重引用符 (") で囲んだ "樹齢" や "歩どまり" などのような文字列、またはリストでの列の位置を示す番号、たとえば、先頭の列を示す場合は 1、2 番目の列を示す場合は 2 を、引用符なしで指定します。</param>
        <param name="Arg3">検索条件: 指定した条件が設定されているセル範囲を指定します。列見出しと検索条件を指定するセルが少なくとも 1 つずつ含まれている場合は、任意のセル範囲を指定することができます。</param>
        <summary>リストまたはデータベースの指定された列を検索し、条件を満たすレコードの中の空白でないセルの個数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>セル内のテキストまたは値を入力するときに、数式を示すために等号 (=) を使用するため Microsoft が評価され、入力した内容です。ただし、予期しないフィルターの結果があります。 テキストまたは値のいずれかの等値比較演算子を指定するには、検索条件範囲内の該当セルに文字列式としての条件を入力します。 </para>
          <para>= ' のエントリを = '</para>
          <para>エントリが、テキストまたは値を検索します。 例:</para>
          <list type="table">
            <item>
              <term>="=西脇"</term>
              <description>=西脇</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>テキスト データの抽出では、大文字と小文字は区別されません。ただし、特定の関数を使用することによって、大文字と小文字を区別した検索を実行できます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ddb">
      <MemberSignature Language="C#" Value="public double Ddb (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ddb([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ddb(System.Double,System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ddb (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16528)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">取得価額: 資産を購入した時点での価格を指定します。</param>
        <param name="Arg2">残存価額: 耐用年数が終了した時点での資産の価格を指定します。0 (ゼロ) を指定することもできます。</param>
        <param name="Arg3">耐用年数: 資産を使用できる年数、つまり償却の対象となる資産の寿命年数を指定します。</param>
        <param name="Arg4">期間: 減価償却費を求める期を指定します。期間は耐用年数と同じ単位で指定する必要があります。</param>
        <param name="Arg5">率: 償却率を指定します。率を省略すると、2 を指定したと見なされ、倍額定率法で計算が行われます。</param>
        <summary>倍額定率法 (Double-declining Balance Method) を使用して、特定の期における資産の減価償却費を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: すべての 5 つの引数は正の数である必要があります。</para>
          <para>倍額定率法償却率で減価償却費を計算します。 減価償却は、最初の期が最も高くし、連続する期間に減少します。 <b>Ddb 関数</b>では、期間の減価償却費を計算するのに次の数式を使用します。</para>
          <code>Min( (cost - total depreciation from prior periods) * (factor/life), (cost - salvage -  total depreciation from prior periods) )
</code>
          <para>倍額定率法を使用しない場合は、率を指定してください。</para>
          <para>使用して、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Vdb(System.Double,System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />減価償却費が定率法による計算の結果よりも大きいときに定額法に切り替える場合に機能します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Bin">
      <MemberSignature Language="C#" Value="public string Dec2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16771)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 変換する 10 進の整数。 数値が負の場合は、有効桁数は無視され、 <b>Dec2Bin</b>が 10 桁 (10 ビット) の 2 進数を返します。 残りの 9 ビットは、ビットの大きさです。 負の数は 2 の補数表記を使用して表されます。</param>
        <param name="Arg2">場所で使用する文字の数です。 場所が省略されると、必要な文字の最小数を<b>Dec2Bin</b>が使用されます。 場所は、戻り値の先頭に 0 (ゼロ) をスペースに便利です。</param>
        <summary>10 進数を 2 進数に変換します。</summary>
        <returns>To be added.</returns>
        <remarks><para>番号の場合&lt;-512 または数値の場合は&gt;511 を<b>Dec2Bin</b>が #NUM を返します。 エラー値です。 </para>
          <para>数値が数値以外の場合は、#VALUE を<b>Dec2Bin</b>が返します。 エラー値です。 </para>
          <para><b>Dec2Bin</b>文字よりも大きくする必要がある場合、#NUM を返します。 エラー値です。 </para>
          <para>桁数に整数以外の値を指定すると、小数点以下は切り捨てられます。</para>
          <para>数値以外の場合、#VALUE を<b>Dec2Bin</b>が返します。 エラー値です。 </para>
          <para>場所は、ゼロまたは負を<b>Dec2Bin</b>が #NUM を返します。 エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Hex">
      <MemberSignature Language="C#" Value="public string Dec2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16772)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 変換する 10 進の整数。 数値が負の場合は、場所が無視され、10 桁 (40 ビット) の 16 進数を<b>Dec2Hex</b>が返します。 残りの 39 ビットは、ビットの大きさです。 負の数は 2 の補数表記を使用して表されます。</param>
        <param name="Arg2">場所で使用する文字の数です。 場所が省略されると、必要な文字の最小数を<b>Dec2Hex</b>が使用されます。 場所は、戻り値の先頭に 0 (ゼロ) をスペースに便利です。</param>
        <summary>10 進数を 16 進数に変換します。</summary>
        <returns>To be added.</returns>
        <remarks><para>数値の場合&lt;-549,755,813,888 場合は、番号または&gt;549,755,813,887 を<b>Dec2Hex</b>が #NUM を返す! エラー値です。 </para>
          <para>数値が数値以外の場合は、#VALUE を<b>Dec2Hex</b>が返します。 エラー値です。 </para>
          <para><b>Dec2Hex</b>文字よりも大きくする必要がある場合、#NUM を返します。 エラー値です。 </para>
          <para>桁数に整数以外の値を指定すると、小数点以下は切り捨てられます。</para>
          <para>場所が数値以外の場合は、#VALUE を<b>Dec2Hex</b>が返します。 エラー値です。 </para>
          <para>桁数が負の場合は、 <b>Dec2Hex</b>が #NUM を返します。 エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Oct">
      <MemberSignature Language="C#" Value="public string Dec2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16773)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 変換する 10 進の整数。 数値が負の場合は、場所が無視され、10 桁 (30 ビット) の 8 進数を<b>Dec2Oct</b>が返します。 残りの 29 ビットは、ビットの大きさです。 負の数は 2 の補数表記を使用して表されます。</param>
        <param name="Arg2">場所で使用する文字の数です。 場所が省略されると、必要な文字の最小数を<b>Dec2Oct</b>が使用されます。 場所は、戻り値の先頭に 0 (ゼロ) をスペースに便利です。</param>
        <summary>10 進数を 8 進数に変換します。</summary>
        <returns>To be added.</returns>
        <remarks><para>数値の場合&lt;-536,870,912 場合は、番号または&gt;536,870,911 を<b>Dec2Oct</b>が #NUM を返す! エラー値です。 </para>
          <para>数値が数値以外の場合は、#VALUE を<b>Dec2Oct</b>が返します。 エラー値です。 </para>
          <para><b>Dec2Oct</b>文字よりも大きくする必要がある場合、#NUM を返します。 エラー値です。 </para>
          <para>桁数に整数以外の値を指定すると、小数点以下は切り捨てられます。</para>
          <para>数値以外の場合、#VALUE を<b>Dec2Oct</b>が返します。 エラー値です。 </para>
          <para>桁数が負の場合は、 <b>Dec2Oct</b>が #NUM を返します。 エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Decimal">
      <MemberSignature Language="C#" Value="public double Decimal (string Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Decimal([in]string Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Decimal(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Decimal (Arg1 As String, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Decimal(System::String ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16956)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">変換する数値を指定します。</param>
        <param name="Arg2">変換する数値の基数を指定します。</param>
        <summary>指定された底の数値の文字列式を 10 進数に変換します。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Degrees">
      <MemberSignature Language="C#" Value="public double Degrees (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Degrees([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Degrees (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Degrees(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16727)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">角度: 度に変換する角度を指定します。</param>
        <summary>ラジアンを度に変換します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delta">
      <MemberSignature Language="C#" Value="public double Delta (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Delta([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Delta(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delta (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16802)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1: 一方の数値を指定します。</param>
        <param name="Arg2">数値 2: もう一方の数値を指定します。数値 2 を省略すると、0 を指定したと見なされます。</param>
        <summary>2 つの値が等しいかどうかを調べます。数値 1 = 数値 2 のとき 1 を返し、それ以外の場合は 0 を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>値のセットをフィルター処理するのにには、この関数を使用します。 たとえば、<b>デルタ</b>関数がいくつか合計することでは、値の等しい組の数を計算します。 この関数は、クロネッカーのデルタ関数とも呼ばれます。</para>
          <para>[数値 1] が数値以外の場合は、<b>デルタ</b>が #VALUE を返します。 エラー値です。 </para>
          <para>数値 2 が数値以外の場合は、<b>デルタ</b>が #VALUE を返します。 エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DevSq">
      <MemberSignature Language="C#" Value="public double DevSq (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DevSq([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DevSq(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DevSq (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16702)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1, 数値 2, … : 偏差の平方和を求める数値を指定します。引数は 1 ～ 30 個まで指定できます。引数をコンマ (,) で区切って指定する代わりに、単一配列や、配列への参照を引数として使用することもできます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>標本の平均値に対する各データの偏差の平方和を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。 </para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。 </para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。 </para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。 </para>
          <para>偏差の平方和は、次の数式で表されます。 </para>
          <para>偏差の平方和の合計の数式を図 1:</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DGet">
      <MemberSignature Language="C#" Value="public object DGet (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object DGet([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DGet(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DGet (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ DGet(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16619)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">データベース: リストまたはデータベースを構成するセル範囲を指定します。データベースは、行 (レコード) と列 (フィールド) にデータを関連付けたリストです。リストの先頭の行には、各列の見出しが入力されている必要があります。</param>
        <param name="Arg2">フィールド: 関数の中で使用する列を指定します。フィールドには、半角の二重引用符 (") で囲んだ "樹齢" や "歩どまり" などのような文字列、またはリストでの列の位置を示す番号、たとえば、先頭の列を示す場合は 1、2 番目の列を示す場合は 2 を、引用符なしで指定します。</param>
        <param name="Arg3">検索条件: 指定した条件が設定されているセル範囲を指定します。列見出しと検索条件を指定するセルが少なくとも 1 つずつ含まれている場合は、任意のセル範囲を指定することができます。</param>
        <summary>リストまたはデータベースの列から指定された条件を満たす 1 つの値を抽出します。</summary>
        <returns>To be added.</returns>
        <remarks><para>セル内のテキストまたは値を入力するときに、数式を示すために等号 (=) を使用するため Microsoft が評価され、入力した内容です。ただし、予期しないフィルターの結果があります。 テキストまたは値のいずれかの等値比較演算子を指定するには、検索条件範囲内の該当セルに文字列式としての条件を入力します。 </para>
          <para>= ' のエントリを = '</para>
          <para>エントリが、テキストまたは値を検索します。 例:</para>
          <list type="table">
            <item>
              <term>="=西脇"</term>
              <description>=西脇</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>テキスト データの抽出では、大文字と小文字は区別されません。ただし、特定の関数を使用することによって、大文字と小文字を区別した検索を実行できます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Disc">
      <MemberSignature Language="C#" Value="public double Disc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Disc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Disc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Disc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16819)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">現在価値: 額面 $ 100 に対する証券の価値を指定します。</param>
        <param name="Arg4">償還価額: 額面 $ 100 に対する証券の償還額を指定します。</param>
        <param name="Arg5">基準: 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>証券に対する割引率を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: DATE 関数を使用するか、他の数式または関数の結果として、日付を入力する必要があります。 たとえば、2008 年 5 月 23 日の DATE(2008,5,23) を使用します。 日付をテキストとして入力した場合、問題が発生することができます。 </para>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 30 年後に当たる 2038 年 1 月 1 日になります。</para>
          <para>受渡日、満期日、基準に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>受領または成熟度が有効な日付のシリアル番号でない場合、<b>ディスク</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>場合 ≤ 0 または償還 ≤ 0、<b>ディスク</b>が #NUM を返す場合。 エラー値です。 </para>
          <para>場合に&lt;0 または基準&gt;4 では、<b>ディスク</b>が #NUM を返します!。 エラー値です。 </para>
          <para>場合は受領成熟度、<b>ディスク</b>が #NUM を返します。 エラー値です。 </para>
          <para>
            <b>ディスク</b>は、次のように計算されます。 </para>
          <para>ディスクの方法を計算するための図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para>各項目の意味は次のとおりです。</para>
          <para>B = 年の基礎によって、1 年の日数です。</para>
          <para>DSM = 受渡日と満期日までの日数です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DMax">
      <MemberSignature Language="C#" Value="public double DMax (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DMax([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DMax(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DMax (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DMax(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16428)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">データベース: リストまたはデータベースを構成するセル範囲を指定します。データベースは、行 (レコード) と列 (フィールド) にデータを関連付けたリストです。リストの先頭の行には、各列の見出しが入力されている必要があります。</param>
        <param name="Arg2">フィールド: 関数の中で使用する列を指定します。フィールドには、半角の二重引用符 (") で囲んだ "樹齢" や "歩どまり" などのような文字列、またはリストでの列の位置を示す番号、たとえば、先頭の列を示す場合は 1、2 番目の列を示す場合は 2 を、引用符なしで指定します。</param>
        <param name="Arg3">検索条件: 指定した条件が設定されているセル範囲を指定します。列見出しと検索条件を指定するセルが少なくとも 1 つずつ含まれている場合は、任意のセル範囲を指定することができます。</param>
        <summary>リストまたはデータベースの指定された列を検索し、条件を満たすレコードの最大値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>セル内のテキストまたは値を入力するときに、数式を示すために等号 (=) を使用するため Microsoft が評価され、入力した内容です。ただし、予期しないフィルターの結果があります。 テキストまたは値のいずれかの等値比較演算子を指定するには、検索条件範囲内の該当セルに文字列式としての条件を入力します。 </para>
          <para>= ' のエントリを = '</para>
          <para>エントリが、テキストまたは値を検索します。 例:</para>
          <list type="table">
            <item>
              <term>="=西脇"</term>
              <description>=西脇</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>テキスト データの抽出では、大文字と小文字は区別されません。ただし、特定の関数を使用することによって、大文字と小文字を区別した検索を実行できます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DMin">
      <MemberSignature Language="C#" Value="public double DMin (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DMin([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DMin(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DMin (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DMin(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16427)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">データベース: リストまたはデータベースを構成するセル範囲を指定します。データベースは、行 (レコード) と列 (フィールド) にデータを関連付けたリストです。リストの先頭の行には、各列の見出しが入力されている必要があります。</param>
        <param name="Arg2">フィールド: 関数の中で使用する列を指定します。フィールドには、半角の二重引用符 (") で囲んだ "樹齢" や "歩どまり" などのような文字列、またはリストでの列の位置を示す番号、たとえば、先頭の列を示す場合は 1、2 番目の列を示す場合は 2 を、引用符なしで指定します。</param>
        <param name="Arg3">検索条件: 指定した条件が設定されているセル範囲を指定します。列見出しと検索条件を指定するセルが少なくとも 1 つずつ含まれている場合は、任意のセル範囲を指定することができます。</param>
        <summary>リストまたはデータベースの指定された列を検索し、条件を満たすレコードの最小値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>セル内のテキストまたは値を入力するときに、数式を示すために等号 (=) を使用するため Microsoft が評価され、入力した内容です。ただし、予期しないフィルターの結果があります。 テキストまたは値のいずれかの等値比較演算子を指定するには、検索条件範囲内の該当セルに文字列式としての条件を入力します。 </para>
          <para>= ' のエントリを = '</para>
          <para>エントリが、テキストまたは値を検索します。 例:</para>
          <list type="table">
            <item>
              <term>="=西脇"</term>
              <description>=西脇</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>テキスト データの抽出では、大文字と小文字は区別されません。ただし、特定の関数を使用することによって、大文字と小文字を区別した検索を実行できます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dollar">
      <MemberSignature Language="C#" Value="public string Dollar (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dollar([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dollar (Arg1 As Double, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16397)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 数値、数値を含むセルの参照、または戻り値が数値となる数式を指定します。</param>
        <param name="Arg2">桁数: 小数点以下の桁数を指定します。桁数に負の数を指定すると、数値は小数点の左側 (整数部分) の指定した桁 (1 の位を 0 とする) で四捨五入されます。桁数を省略すると、0 を指定したと見なされます。</param>
        <summary>数値を文字列形式に変換し、通貨記号を適用します。この関数の名前および適用される記号は、使用する言語の設定によって異なります。</summary>
        <returns>To be added.</returns>
        <remarks><para>セル] コマンド ([書式] メニュー) で数値を含むセルの書式設定と、 <b>Dollar</b>関数を直接数値を書式設定の主な違いは、<b>結果の数値は文字列に変換</b>します。 [セル] コマンドで書式設定された数値は、まだいくつかです。 Microsoft Excel が計算するとき、数値をテキスト値として入力した数値を変換するために、数式で<b>ドル</b>が設定される番号を使用する続行することができます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DollarDe">
      <MemberSignature Language="C#" Value="public double DollarDe (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DollarDe([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DollarDe(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DollarDe (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DollarDe(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16827)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">分子: 分数として表された数値を指定します。</param>
        <param name="Arg2">分母: 分数の分母となる整数を指定します。</param>
        <summary>分数で表されたドル単位の価格を、小数表示に変換します。分数で表された証券の価格などを、小数で表す場合に使用します。</summary>
        <returns>To be added.</returns>
        <remarks><para>分母に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>分母が 0 より小さい場合は、<b>分数で表された</b>が #NUM を返します。 エラー値です。 </para>
          <para>分母が 0 の場合は、<b>分数で表された</b>が # の DIV または 0 を返します。 エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DollarFr">
      <MemberSignature Language="C#" Value="public double DollarFr (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DollarFr([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DollarFr(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DollarFr (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DollarFr(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16828)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">小数値: 小数で表された数値を指定します。</param>
        <param name="Arg2">分母: 分数の分母となる整数を指定します。</param>
        <summary>小数で表されたドル単位の価格を、分数表示に変換します。証券の価格などを分数で表す場合に使用します。</summary>
        <returns>To be added.</returns>
        <remarks><para>分母に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>分母が 0 より小さい場合は、<b>分母</b>が #NUM を返します。 エラー値です。 </para>
          <para>分母が 0 の場合は、<b>分数で表す場合</b>は、# の DIV または 0 を返します。 エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DProduct">
      <MemberSignature Language="C#" Value="public double DProduct (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DProduct([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DProduct(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DProduct (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DProduct(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16573)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">データベース: リストまたはデータベースを構成するセル範囲を指定します。データベースは、行 (レコード) と列 (フィールド) にデータを関連付けたリストです。リストの先頭の行には、各列の見出しが入力されている必要があります。</param>
        <param name="Arg2">フィールド: 関数の中で使用する列を指定します。フィールドには、半角の二重引用符 (") で囲んだ "樹齢" や "歩どまり" などのような文字列、またはリストでの列の位置を示す、引用符なしの番号、たとえば、先頭の列を示す場合は 1、2 番目の列を示す場合は 2 を指定します。</param>
        <param name="Arg3">検索条件: 指定した条件が設定されているセル範囲を指定します。列見出しと検索条件を指定するセルが少なくとも 1 つずつ含まれている場合は、任意のセル範囲を指定することができます。</param>
        <summary>リストまたはデータベースの指定された列を検索し、条件を満たすレコードの積を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>セル内のテキストまたは値を入力するときに、数式を示すために等号 (=) を使用するため Microsoft が評価され、入力した内容です。ただし、予期しないフィルターの結果があります。 テキストまたは値のいずれかの等値比較演算子を指定するには、検索条件範囲内の該当セルに文字列式としての条件を入力します。 </para>
          <para>= ' のエントリを = '</para>
          <para>エントリが、テキストまたは値を検索します。 例:</para>
          <list type="table">
            <item>
              <term>="=西脇"</term>
              <description>=西脇</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>テキスト データの抽出では、大文字と小文字は区別されません。ただし、特定の関数を使用することによって、大文字と小文字を区別した検索を実行できます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DStDev">
      <MemberSignature Language="C#" Value="public double DStDev (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DStDev([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DStDev(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DStDev (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DStDev(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16429)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">データベース: リストまたはデータベースを構成するセル範囲を指定します。データベースは、行 (レコード) と列 (フィールド) にデータを関連付けたリストです。リストの先頭の行には、各列の見出しが入力されている必要があります。</param>
        <param name="Arg2">フィールド: 関数の中で使用する列を指定します。フィールドには、半角の二重引用符 (") で囲んだ "樹齢" や "歩どまり" などのような文字列、またはリストでの列の位置を示す番号、たとえば、先頭の列を示す場合は 1、2 番目の列を示す場合は 2 を、引用符なしで指定します。</param>
        <param name="Arg3">検索条件: 指定した条件が設定されているセル範囲を指定します。列見出しと検索条件を指定するセルが少なくとも 1 つずつ含まれている場合は、任意のセル範囲を指定することができます。</param>
        <summary>リストまたはデータベースの指定された列を検索し、条件を満たすレコードを標本と見なして、母集団の標準偏差を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>セル内のテキストまたは値を入力するときに、数式を示すために等号 (=) を使用するため Microsoft が評価され、入力した内容です。ただし、予期しないフィルターの結果があります。 テキストまたは値のいずれかの等値比較演算子を指定するには、検索条件範囲内の該当セルに文字列式としての条件を入力します。 </para>
          <para>= ' のエントリを = '</para>
          <para>エントリが、テキストまたは値を検索します。 例:</para>
          <list type="table">
            <item>
              <term>="=西脇"</term>
              <description>=西脇</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>テキスト データの抽出では、大文字と小文字は区別されません。ただし、特定の関数を使用することによって、大文字と小文字を区別した検索を実行できます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DStDevP">
      <MemberSignature Language="C#" Value="public double DStDevP (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DStDevP([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DStDevP(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DStDevP (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DStDevP(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16579)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">データベース: リストまたはデータベースを構成するセル範囲を指定します。データベースは、行 (レコード) と列 (フィールド) にデータを関連付けたリストです。リストの先頭の行には、各列の見出しが入力されている必要があります。</param>
        <param name="Arg2">フィールド: 関数の中で使用する列を指定します。フィールドには、半角の二重引用符 (") で囲んだ "樹齢" や "歩どまり" などのような文字列、またはリストでの列の位置を示す番号、たとえば、先頭の列を示す場合は 1、2 番目の列を示す場合は 2 を、引用符なしで指定します。</param>
        <param name="Arg3">検索条件: 指定した条件が設定されているセル範囲を指定します。列見出しと検索条件を指定するセルが少なくとも 1 つずつ含まれている場合は、任意のセル範囲を指定することができます。</param>
        <summary>リストまたはデータベースの指定された列を検索し、条件を満たすレコードを母集団全体と見なして、母集団の標準偏差を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>セル内のテキストまたは値を入力するときに、数式を示すために等号 (=) を使用するため Microsoft が評価され、入力した内容です。ただし、予期しないフィルターの結果があります。 テキストまたは値のいずれかの等値比較演算子を指定するには、検索条件範囲内の該当セルに文字列式としての条件を入力します。 </para>
          <para>= ' のエントリを = '</para>
          <para>エントリが、テキストまたは値を検索します。 例:</para>
          <list type="table">
            <item>
              <term>="=西脇"</term>
              <description>=西脇</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>テキスト データの抽出では、大文字と小文字は区別されません。ただし、特定の関数を使用することによって、大文字と小文字を区別した検索を実行できます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DSum">
      <MemberSignature Language="C#" Value="public double DSum (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DSum([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DSum(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DSum (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DSum(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16425)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">データベース: リストまたはデータベースを構成するセル範囲を指定します。データベースは、行 (レコード) と列 (フィールド) にデータを関連付けたリストです。リストの先頭の行には、各列の見出しが入力されている必要があります。</param>
        <param name="Arg2">フィールド: 関数の中で使用する列を指定します。フィールドには、半角の二重引用符 (") で囲んだ "樹齢" や "歩どまり" などのような文字列、またはリストでの列の位置を示す番号、たとえば、先頭の列を示す場合は 1、2 番目の列を示す場合は 2 を、引用符なしで指定します。</param>
        <param name="Arg3">検索条件: 指定した条件が設定されているセル範囲を指定します。列見出しと検索条件を指定するセルが少なくとも 1 つずつ含まれている場合は、任意のセル範囲を指定することができます。</param>
        <summary>リストまたはデータベースの指定された列を検索し、条件を満たすレコードの合計を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>セル内のテキストまたは値を入力するときに、数式を示すために等号 (=) を使用するため Microsoft が評価され、入力した内容です。ただし、予期しないフィルターの結果があります。 テキストまたは値のいずれかの等値比較演算子を指定するには、検索条件範囲内の該当セルに文字列式としての条件を入力します。 </para>
          <para>= ' のエントリを = '</para>
          <para>エントリが、テキストまたは値を検索します。 例:</para>
          <list type="table">
            <item>
              <term>="=西脇"</term>
              <description>=西脇</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>テキスト データの抽出では、大文字と小文字は区別されません。ただし、特定の関数を使用することによって、大文字と小文字を区別した検索を実行できます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dummy19">
      <MemberSignature Language="C#" Value="public object Dummy19 (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Dummy19([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dummy19(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dummy19 (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2827)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>内部使用のため予約済みです。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dummy21">
      <MemberSignature Language="C#" Value="public double Dummy21 (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Dummy21([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dummy21(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dummy21 (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Dummy21(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2826)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <summary>内部使用のため予約済みです。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public double Duration (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Duration([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Duration(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Duration (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16842)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">利率: 証券の年利を指定します。</param>
        <param name="Arg4">利回り: 証券の年間配当を指定します。</param>
        <param name="Arg5">頻度: 年間の利息支払回数を指定します。年 1 回の場合は頻度 = 1、年 2 回の場合は頻度 = 2、四半期ごとの場合は頻度 = 4 を指定します。</param>
        <param name="Arg6">基準: 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>額面を $100 と見なした証券のマコーレー デュレーションを返します。デュレーションは、キャッシュ フローの現在価値の加重平均として定義され、利回りの変化に対する債券価格の反応の指標として使用されます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: DATE 関数を使用するか、他の数式または関数の結果として、日付を入力する必要があります。 たとえば、2008 年 5 月 23 日の DATE(2008,5,23) を使用します。 日付をテキストとして入力した場合、問題が発生することができます。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4</term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>受渡日、満期日、頻度、基準に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>受領または成熟度が有効な日付でない場合、#VALUE を<b>期間</b>が返します。 エラー値です。 </para>
          <para>場合クーポン&lt;0 または利回り&lt;0、<b>期間</b>が #NUM を返します。 エラー値です。 </para>
          <para>頻度が 1、2、または 4 以外の数値の場合は、<b>期間</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合に&lt;0 または基準&gt;4、<b>期間</b>が #NUM を返す! エラー値です。 </para>
          <para>場合は受領成熟度<b>期間</b>が #NUM を返します。 エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DVar">
      <MemberSignature Language="C#" Value="public double DVar (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DVar([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DVar(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DVar (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DVar(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16431)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">データベース: リストまたはデータベースを構成するセル範囲を指定します。データベースは、行 (レコード) と列 (フィールド) にデータを関連付けたリストです。リストの先頭の行には、各列の見出しが入力されている必要があります。</param>
        <param name="Arg2">フィールド: 関数の中で使用する列を指定します。フィールドには、半角の二重引用符 (") で囲んだ "樹齢" や "歩どまり" などのような文字列、またはリストでの列の位置を示す番号、たとえば、先頭の列を示す場合は 1、2 番目の列を示す場合は 2 を、引用符なしで指定します。</param>
        <param name="Arg3">検索条件: 指定した条件が設定されているセル範囲を指定します。列見出しと検索条件を指定するセルが少なくとも 1 つずつ含まれている場合は、任意のセル範囲を指定することができます。</param>
        <summary>リストまたはデータベースの指定された列を検索し、条件を満たすレコードを標本と見なして、母集団の分散を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>セル内のテキストまたは値を入力するときに、数式を示すために等号 (=) を使用するため Microsoft が評価され、入力した内容です。ただし、予期しないフィルターの結果があります。 テキストまたは値のいずれかの等値比較演算子を指定するには、検索条件範囲内の該当セルに文字列式としての条件を入力します。 </para>
          <para>= ' のエントリを = '</para>
          <para>エントリが、テキストまたは値を検索します。 例:</para>
          <list type="table">
            <item>
              <term>="=西脇"</term>
              <description>=西脇</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>テキスト データの抽出では、大文字と小文字は区別されません。ただし、特定の関数を使用することによって、大文字と小文字を区別した検索を実行できます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DVarP">
      <MemberSignature Language="C#" Value="public double DVarP (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DVarP([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DVarP(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DVarP (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DVarP(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16580)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">データベース: リストまたはデータベースを構成するセル範囲を指定します。データベースは、行 (レコード) と列 (フィールド) にデータを関連付けたリストです。リストの先頭の行には、各列の見出しが入力されている必要があります。</param>
        <param name="Arg2">フィールド: 関数の中で使用する列を指定します。フィールドには、半角の二重引用符 (") で囲んだ "樹齢" や "歩どまり" などのような文字列、またはリストでの列の位置を示す番号、たとえば、先頭の列を示す場合は 1、2 番目の列を示す場合は 2 を、引用符なしで指定します。</param>
        <param name="Arg3">検索条件: 指定した条件が設定されているセル範囲を指定します。列見出しと検索条件を指定するセルが少なくとも 1 つずつ含まれている場合は、任意のセル範囲を指定することができます。</param>
        <summary>リストまたはデータベースの指定された列を検索し、条件を満たすレコードを母集団全体と見なして、母集団の分散を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>セル内のテキストまたは値を入力するときに、数式を示すために等号 (=) を使用するため Microsoft が評価され、入力した内容です。ただし、予期しないフィルターの結果があります。 テキストまたは値のいずれかの等値比較演算子を指定するには、検索条件範囲内の該当セルに文字列式としての条件を入力します。 </para>
          <para>= ' のエントリを = '</para>
          <para>エントリが、テキストまたは値を検索します。 例:</para>
          <list type="table">
            <item>
              <term>="=西脇"</term>
              <description>=西脇</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>テキスト データの抽出では、大文字と小文字は区別されません。ただし、特定の関数を使用することによって、大文字と小文字を区別した検索を実行できます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="EDate">
      <MemberSignature Language="C#" Value="public double EDate (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 EDate([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EDate(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function EDate (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double EDate(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16833)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">開始日: 起算日を表す日付を指定します。日付は、DATE 関数を使って入力するか、他の数式または他の関数の結果を指定します。たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。日付を文字列として入力した場合、エラーが発生することがあります。</param>
        <param name="Arg2">月: 開始日から起算した月数を指定します。月に正の数を指定すると、起算日より後の日付を返し、負の数を指定すると、起算日より前の日付を返します。</param>
        <summary>開始日から起算して、指定された月数だけ前または後の日付に対応するシリアル値を返します。このメソッドを使用すると、伝票の発行日と同じ日に当たる支払日や満期日の日付を計算することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para><b>開始日が無効な日付でない場合、#VALUE を!</b> エラー値です。 </para>
          <para>月に整数以外の値を指定すると、小数点以下は切り捨てられます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public double Effect (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Effect([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Effect(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Effect (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Effect(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16830)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">名目利率: 名目年利率を指定します。</param>
        <param name="Arg2">複利計算回数: 1 年あたりの複利計算回数を指定します。</param>
        <summary>指定された名目年利率と 1 年あたりの複利計算回数を基に、実効年利率を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>複利計算回数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>いずれかの引数が数値以外の場合は、<b>効果</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>場合名目利率 ≤ 0 または複利計算回数&lt;1、<b>効果</b>が #NUM を返します。 エラー値です。 </para>
          <para>
            <b>効果</b>は、次のように計算されます。 </para>
          <para>メソッドの効果を計算するための図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeURL">
      <MemberSignature Language="C#" Value="public object EncodeURL (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EncodeURL([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EncodeURL(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeURL (Arg1 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ EncodeURL(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16981)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">エンコードするテキスト。</param>
        <summary>引数が URL エンコードされます。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EoMonth">
      <MemberSignature Language="C#" Value="public double EoMonth (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 EoMonth([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EoMonth(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function EoMonth (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double EoMonth(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16834)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">開始日: 起算日を表す日付を指定します。日付は、DATE 関数を使って入力するか、他の数式または他の関数の結果を指定します。たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。日付を文字列として入力した場合、エラーが発生することがあります。</param>
        <param name="Arg2">月: 開始日から起算した月数を指定します。月に正の数を指定すると、起算日より後の日付を返し、負の数を指定すると、起算日より前の日付を返します。</param>
        <summary>開始日から起算して、指定された月数だけ前または後の月の最終日に対応するシリアル値を返します。このメソッドを使用すると、月末に発生する満期日や支払日を計算することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para><b>開始日に無効な日付を指定すると、#NUM</b> エラー値です。 </para>
          <para><b>開始日と月が無効な日付である場合、#NUM を!</b> エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Erf">
      <MemberSignature Language="C#" Value="public double Erf (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Erf([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Erf (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16807)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">下限の<b>積分</b>の下限です。</param>
        <param name="Arg2">上限の<b>積分</b>の上限です。 省略すると、積分値が 0 と下限の間で統合されています。</param>
        <summary>下限～上限の範囲で、誤差関数の積分値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf_Precise(System.Object)" />メソッドです。</para>
          <para>下限が数値以外の場合は、<b>上限</b>が #VALUE を返します。 エラー値です。 </para>
          <para>下限が負の場合は、<b>上限</b>が #NUM を返します。 エラー値です。 </para>
          <para>上限が数値以外の場合は、<b>上限</b>が #VALUE を返します。 エラー値です。 </para>
          <para>上限が負の場合は、<b>上限</b>が #NUM を返します。 エラー値です。 </para>
          <para>メソッドの積分値を計算するための図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para>メソッドの積分値を計算するため、図 2: 数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Erf_Precise">
      <MemberSignature Language="C#" Value="public double Erf_Precise (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Erf_Precise([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf_Precise(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Erf_Precise (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Erf_Precise(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16927)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">下限: 誤差関数を積分するときの下限値を指定します。</param>
        <summary>0 ～下限の範囲で、誤差関数の積分値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>下限が数値以外の場合は、 <b>Erf_Precise</b>にはエラーが生成されます。 下限が負の場合は、 <b>Erf_Precise</b>にはエラーが生成されます。</para>
          <para>図 1: Erf_Precise メソッドを計算する式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ErfC">
      <MemberSignature Language="C#" Value="public double ErfC (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ErfC([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErfC (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ErfC(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16808)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">最初の引数を指定します。</param>
        <summary>指定したパラメーター～無限大の範囲で、相補誤差関数の積分値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC_Precise(System.Object)" />メソッドです。</para>
          <para>場合この関数は利用できません、#NAME?エラー、分析ツール アドインを組み込む必要があります。</para>
          <para>パラメーターが数値以外の場合は、 <b>ErfC</b>が #VALUE を返します。 エラー値です。</para>
          <para>パラメーターが負の場合は、 <b>ErfC</b>が #NUM を返します。 エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ErfC_Precise">
      <MemberSignature Language="C#" Value="public double ErfC_Precise (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ErfC_Precise([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC_Precise(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErfC_Precise (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ErfC_Precise(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16928)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">計算する値を指定します。</param>
        <summary>指定した値～無限大の範囲で、相補誤差関数の積分値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>指定した値が数値以外の場合は、 <b>ErfC_Precise</b>にはエラーが生成されます。</para>
          <para>指定した値が負の場合は、 <b>ErfC_Precise</b>にはエラーが生成されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Even">
      <MemberSignature Language="C#" Value="public double Even (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Even([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Even(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Even (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Even(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16663)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 切り上げの対象となる数値を指定します。</param>
        <summary>指定した数値を最も近い偶数に切り上げた値を返します。この関数を使用して 2 つ 1 組のアイテムを処理することができます。たとえば、梱包容器を表す列に 1 つまたは 2 つのアイテムを入力する場合、アイテムの個数を偶数に切り上げることで、容器の収納量を把握できます。</summary>
        <returns>To be added.</returns>
        <remarks><para>数値が数値以外の場合は、<b>偶数</b>が #VALUE を返します。 エラー値です。 </para>
          <para>数値の符号に関係なく、切り上げられた値の絶対値は、数値より大きくなります。数値が既に偶数の値になっている場合、切り上げは行われません。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Expon_Dist">
      <MemberSignature Language="C#" Value="public double Expon_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Expon_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Expon_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Expon_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Expon_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16878)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: 関数に代入する値を指定します。</param>
        <param name="Arg2">λ: パラメーターの値を指定します。</param>
        <param name="Arg3">関数形式にするのには指数関数の形式を示す論理値です。 場合<b>は累積的な</b> <b>Expon_Dist</b>は累積分布関数の値を返します。かどうかは<b>false</b>を返します確率密度関数です。</param>
        <summary>指数分布関数を返します。このメソッドは、銀行の ATM で現金を引き出すのにかかる時間など、イベントの間隔をモデル化する場合に使用します。たとえば、EXPON_DIST メソッドを使って、ある処理が 1 分以内に終了する確率を算出することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>場合 x またはラムダ数値以外は、 <b>Expon_Dist</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>場合 x &lt; 0 <b>Expon_Dist</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合はラムダ ≤ 0、 <b>Expon_Dist</b>は、#NUM を返します。 エラー値です。 </para>
          <para>確率密度関数は、次の数式で表されます。 </para>
          <para>確率密度関数の数式を図 1:</para>
          <para> </para>
          <para> </para>
          <para>累積分布関数は、次の数式で表されます。</para>
          <para>分布の累積分布関数の数式を図 2:</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ExponDist">
      <MemberSignature Language="C#" Value="public double ExponDist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ExponDist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ExponDist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExponDist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ExponDist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16664)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: 関数に代入する値を指定します。</param>
        <param name="Arg2">λ: パラメーターの値を指定します。</param>
        <param name="Arg3">関数形式にするのには指数関数の形式を示す論理値です。 場合<b>は累積的な</b><b>間隔</b>が累積分布関数の値を返します。かどうかは<b>false</b>を返します確率密度関数です。</param>
        <summary>指数分布を返します。 <b>ExponDist</b>自動銀行の出納係で現金を引き出すのにかかる時間などのイベントまでの時間をモデル化に使用します。 たとえば、1 分以内にかかる確率を算出するのに<b>間隔</b>を使用できます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Expon_Dist(System.Double,System.Double,System.Boolean)" />メソッドです。</para>
          <para>場合 x またはラムダ数値以外は、<b>間隔</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>場合 x &lt; 0、<b>間隔</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合はラムダ ≤ 0、<b>間隔</b>が #NUM を返します。 エラー値です。 </para>
          <para>確率密度関数は、次の数式で表されます。 </para>
          <para>確率密度関数の数式を図 1:</para>
          <para> </para>
          <para> </para>
          <para>累積分布関数は、次の数式で表されます。</para>
          <para>分布の累積分布関数の数式を図 2:</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Dist">
      <MemberSignature Language="C#" Value="public double F_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16915)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 関数に代入する値を指定します。</param>
        <param name="Arg2">Deg_freedom1: 自由度の分子を指定します。</param>
        <param name="Arg3">Deg_freedom2: 自由度の分母を指定します。</param>
        <param name="Arg4">関数形式の関数の形式を決定する論理値です。 場合<b>は累積的な</b> <b>F_Dist</b>は累積分布関数の値を返します。かどうかは<b>false</b>を返します確率密度関数です。</param>
        <summary>F 分布の確率関数の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>いずれかの引数が数値以外の場合は、 <b>F_Dist</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>X が負の場合は、 <b>F_Dist</b>が #NUM を返します。 エラー値です。 </para>
          <para>deg_freedom1 または deg_freedom2 に正数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>場合 deg_freedom1 &lt; 1、 <b>F_Dist</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合 deg_freedom &lt; 1、 <b>F_Dist</b>が #NUM を返します。 エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Dist_RT">
      <MemberSignature Language="C#" Value="public double F_Dist_RT (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Dist_RT([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Dist_RT (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Dist_RT(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16916)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 関数に代入する値を指定します。</param>
        <param name="Arg2">自由度 1: 自由度の分子を指定します。</param>
        <param name="Arg3">自由度 2: 自由度の分母を指定します。</param>
        <summary>F 分布の右側確率関数の値を返します。この関数を使用すると、2 組のデータを比較して、ばらつきが両者で異なるかどうかを調べることができます。たとえば、テストの成績を男女別に分析して、男子生徒の成績と女子生徒の成績のばらつきが異なるかどうかを検定することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>いずれかの引数が数値以外の場合は、 <b>F_Dist_RT</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>X が負の場合は、 <b>F_Dist_RT</b>が #NUM を返します。 エラー値です。 </para>
          <para>自由度 1 または自由度 2 に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>場合自由度 1 &lt; 1 または自由度 1 の受領 10 ^10、 <b>F_Dist_RT</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合自由度 2 &lt; 1 または自由度 2 の受領 10 ^10、 <b>F_Dist_RT</b>が #NUM を返します。 エラー値です。 </para>
          <para>
            <b>F_Dist_RT</b>は、F_DIST_RT として計算されます = P (F&gt;x)、F は自由度 1、自由度 2 自由度で、F 分布の確率変数です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Inv">
      <MemberSignature Language="C#" Value="public double F_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16917)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">確率: F 累積分布に関連する確率を指定します。</param>
        <param name="Arg2">Deg_freedom1: 自由度の分子を指定します。</param>
        <param name="Arg3">Deg_freedom2: 自由度の分母を指定します。</param>
        <summary>F 分布の確率関数の逆関数の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>いずれかの引数が数値以外の場合は、 <b>F_Inv</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>場合確率&lt;0、または確率&gt;1、 <b>F_Inv</b>が #NUM を返します。 エラー値です。 </para>
          <para>deg_freedom1 または deg_freedom2 に正数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>場合 deg_freedom1 &lt; 1、または deg_freedom2 &lt; 1、 <b>F_Inv</b>が #NUM を返します。 エラー値です。 </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Inv_RT">
      <MemberSignature Language="C#" Value="public double F_Inv_RT (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Inv_RT([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv_RT(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Inv_RT (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Inv_RT(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16918)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">確率: F 累積分布に関連する確率を指定します。</param>
        <param name="Arg2">自由度 1: 自由度の分子を指定します。</param>
        <param name="Arg3">自由度 2: 自由度の分母を指定します。</param>
        <summary>F 分布の右側確率関数の逆関数の値を返します。つまり、確率 = F_DIST_RT(x,...) であるとき、F_INV_RT(確率,...) = x という関係が成り立ちます。</summary>
        <returns>To be added.</returns>
        <remarks><para>F 確率分布は、2 組のデータのばらつきを比較する F 検定で使用されます。たとえば、合衆国と日本の労働者の年収を比較し、両国で年収の分布に類似性があるかどうかを分析することができます。</para>
          <para>いずれかの引数が数値以外の場合は、 <b>F_Inv_RT</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>場合確率&lt;0、または確率&gt;1、 <b>F_Inv_RT</b>が #NUM を返します。 エラー値です。 </para>
          <para>自由度 1 または自由度 2 に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>場合自由度 1 &lt; 1 または自由度 1 の受領 10 ^10、 <b>F_Inv_RT</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合自由度 2 &lt; 1 または自由度 2 の受領 10 ^10、 <b>F_Inv_RT</b>が #NUM を返します。 エラー値です。</para>
          <para>F 分布の臨界値を返すには、 
            <b>F_Inv_RT</b>を使用できます。 たとえば、多くの場合、分散分析の計算の出力には、F 統計量、F 確率、および有意水準 0.05 で F の臨界値のデータが含まれています。 F の臨界値を返すには、 <b>F_Inv_RT</b>の確率引数に有効桁数のレベルを使用します。</para>
          <para>確率の値を与え、そのような値 x がシーク<b>F_Inv_RT</b>その F_DIST_RT を (x, 自由度 1, 自由度 2) = 確率です。 <b>F_Inv_RT</b>の精度がの精度に依存するため、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" />。 <b>F_Inv_RT</b>では、反復計算の手法を使用します。 検索は、64 回の反復後が収束しない、関数はエラー値 #n/a を返します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Test">
      <MemberSignature Language="C#" Value="public double F_Test (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Test([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Test(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Test (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Test(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16875)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列 1: 比較対象となる一方のデータを含む配列またはセル範囲を指定します。</param>
        <param name="Arg2">配列 2: 比較対象となるもう一方のデータを含む配列またはセル範囲を指定します。</param>
        <summary>F 検定の結果を返します。F 検定により、配列 1 と配列 2 とのデータのばらつきに有意な差が認められない両側確率が返されます。この関数を利用すると、2 つの高等学校で同じテストを実施した場合、両校の生徒の成績に有意な差が認められるかどうかを調べることができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>配列 1 または配列 2 のデータ ポイントの数が 2 未満である場合、または配列 1 または配列 2 の差異が 0 の場合は、 <b>F_Test</b>が # の DIV または 0 を返します。 エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fact">
      <MemberSignature Language="C#" Value="public double Fact (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fact([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fact(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fact (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Fact(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16568)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 階乗を求める正の数値を指定します。数値に整数以外の値を指定すると、小数点以下が切り捨てられます。数値に負の数を指定すると、エラー値 #NUM! が返されます。</param>
        <summary>数値の階乗を返します。数値の階乗は、1 ～数値の範囲にある整数の積です。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FactDouble">
      <MemberSignature Language="C#" Value="public double FactDouble (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FactDouble([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FactDouble(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FactDouble (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FactDouble(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16799)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 二重階乗を求める数値を指定します。数値に整数以外の値を指定すると、小数点以下が切り捨てられます。</param>
        <summary>数値の二重階乗を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>数値が数値以外の場合は、 <b>FactDouble</b>が #VALUE を返します。 エラー値です。 </para>
          <para>数値が負の場合は、 <b>FactDouble</b>が #NUM を返します。 エラー値です。 </para>
          <para>数値に偶数を指定した場合は、次の数式が成立します。 </para>
          <para>図 1: の数式も</para>
          <para> </para>
          <para> </para>
          <para>数値に奇数を指定した場合は、次の数式が成立します。</para>
          <para>奇数ページの図 2: 数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FDist">
      <MemberSignature Language="C#" Value="public double FDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16665)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 関数に代入する値を指定します。</param>
        <param name="Arg2">自由度 1: 自由度の分子を指定します。</param>
        <param name="Arg3">自由度 2: 自由度の分母を指定します。</param>
        <summary>F 分布の確率関数の値を返します。この関数を使用すると、2 組のデータを比較して、ばらつきが両者で異なるかどうかを調べることができます。たとえば、テストの成績を男女別に分析して、男子生徒の成績と女子生徒の成績のばらつきが異なるかどうかを検定することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" />と<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist(System.Double,System.Double,System.Double,System.Boolean)" />の方法です。</para>
          <para>いずれかの引数が数値以外の場合は、 <b>FDist</b>が #VALUE を返します。 エラー値です。 </para>
          <para>X が負の場合は、 <b>FDist</b>が #NUM を返します。 エラー値です。 </para>
          <para>自由度 1 または自由度 2 に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>場合自由度 1 &lt; 1 または自由度 1 の受領 10 ^10、 <b>FDist</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合自由度 2 &lt; 1 または自由度 2 の受領 10 ^10、 <b>FDist</b>が #NUM を返します。 エラー値です。 </para>
          <para>
            <b>Fdist 関数</b>は、fdist 関数として計算されます = P (F&gt;x)、F は自由度 1、自由度 2 自由度で、F 分布の確率変数です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterXML">
      <MemberSignature Language="C#" Value="public object FilterXML (string Arg1, string Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FilterXML([in]string Arg1, [in]string Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FilterXML(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FilterXML (Arg1 As String, Arg2 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FilterXML(System::String ^ Arg1, System::String ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16979)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">有効な xml 文字列。</param>
        <param name="Arg2">XPath クエリ文字列。</param>
        <summary>通常は<b>web サービス</b>の関数呼び出しから返された XML には、特定のデータを取得します。</summary>
        <returns><b>VARIANT</b></returns>
        <remarks><para>XPath パラメーターは 1024 文字に制限されています。</para>
          <para><b>FILTERXML</b>関数は、ユーザー データを指定したロケールを使用して解析される結果を返します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public double Find (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Find([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16508)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">ワークシートの名前を指定します。</param>
        <param name="Arg2">範囲の名前を指定します。</param>
        <param name="Arg3">検索を調整する引数の名前を指定します。</param>
        <summary>ワークシートで特定の情報を検索します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindB">
      <MemberSignature Language="C#" Value="public double FindB (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FindB([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindB (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16589)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">検索文字列: 検索する文字列を指定します。</param>
        <param name="Arg2">対象: 検索文字列を含む文字列を指定します。</param>
        <param name="Arg3">開始位置: 検索を開始する位置を指定します。対象の先頭文字から検索を開始するときは 1 を指定します。開始位置を省略すると、1 を指定したと見なされます。</param>
        <summary><see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /><b>findb 関数</b>は、2 番目のテキスト文字列内の 1 つのテキスト文字列を検索し、2 番目のテキスト文字列の最初の文字から最初のテキスト文字列の開始位置の数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>:<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />はシングル バイト文字を使用する言語での使用を意図したものセット (SBCS)、 <b>findb 関数</b>は、2 バイト文字セット (DBCS) を使用する言語を使用します。 お使いのコンピューター上の既定の言語設定は、戻り値を次のように影響します。</para>
          <list type="bullet">
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />常に 1 バイトまたは 2 バイト、1 は、既定の言語の設定に関係なくかどうかは、それぞれの文字をカウントします。</description>
            </item>
            <item>
              <description>
                <b>FindB</b>関数では、DBCS をサポートする言語の編集を有効にして、既定の言語として設定するときに、各 2 バイト文字が 2 として数えられます。 それ以外の場合、 <b>findb 関数</b>は、1 つとして各文字をカウントします。</description>
            </item>
          </list>
          <para>DBCS をサポートする言語には、日本語、簡体字中国語、繁体字中国語、および韓国語があります。</para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /><b>findb 関数</b>は大文字小文字を区別し、ワイルドカード文字を許可しません。 使用する文字の大文字小文字を区別検索またはワイルドカードを実行しない場合は、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Search(System.String,System.String,System.Object)" />と<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />。 </para>
          <para>指定した場合""(空の文字列) の場合、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />検索文字列の最初の文字に一致する (つまり、文字番号開始位置、または 1)。 </para>
          <para>検索文字列にワイルドカード文字を使うことはできません。</para>
          <para>文字列の検索文字列が表示されない場合<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> <b>findb メソッド</b>は、#VALUE を返すとします。 エラー値です。 </para>
          <para>開始位置が 0 より大きい値でない場合<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> <b>findb メソッド</b>は、#VALUE を返すとします。 エラー値です。 </para>
          <para>開始位置が対象の長さよりも大きい場合<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> <b>findb メソッド</b>は、#VALUE を返すとします。 エラー値です。 </para>
          <para>開始位置を使用すると、指定した文字数を省略できます。 使用して<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />例として、たとえば、文字列"AYF0093 を使用している.YoungMensApparel"です。 テキスト文字列の説明部分の最初の"Y"の数を検索するのには開始位置に設定 8 テキストのシリアル番号部分が検索されないようにします。 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />文字 8 で始まって、次の文字で find_text を検出し、数値 9 を返します。 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />常に開始位置が 1 より大きい場合、スキップする文字をカウントしている within_text の最初から文字の数を返します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FInv">
      <MemberSignature Language="C#" Value="public double FInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16666)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">確率: F 累積分布に関連する確率を指定します。</param>
        <param name="Arg2">自由度 1: 自由度の分子を指定します。</param>
        <param name="Arg3">自由度 2: 自由度の分母を指定します。</param>
        <summary>F 分布の確率関数の逆関数の値を返します。つまり、確率 = FDIST(x,...) であるとき、FINV(確率,...) = x という関係が成り立ちます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv_RT(System.Double,System.Double,System.Double)" />と<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv(System.Double,System.Double,System.Double)" />の方法です。</para>
          <para>F 確率分布は、2 組のデータのばらつきを比較する F 検定で使用されます。たとえば、合衆国と日本の労働者の年収を比較し、両国で年収の分布に類似性があるかどうかを分析することができます。</para>
          <para>いずれかの引数が数値以外の場合は、 <b>finv 関数</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>場合確率&lt;0、または確率&gt;1、 <b>finv 関数</b>が #NUM を返します。 エラー値です。 </para>
          <para>自由度 1 または自由度 2 に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>場合自由度 1 &lt; 1 または自由度 1 の受領 10 ^10、 <b>finv 関数</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合自由度 2 &lt; 1 または自由度 2 の受領 10 ^10、 <b>finv 関数</b>が #NUM を返します。 エラー値です。</para>
          <para>
            <b>FInv</b> F 分布の臨界値を返すに使用できます。 たとえば、多くの場合、分散分析の計算の出力には、F 統計量、F 確率、および有意水準 0.05 で F の臨界値のデータが含まれています。 F の臨界値を返すには、 <b>finv 関数</b>の確率引数に有効桁数のレベルを使用します。</para>
          <para><b>そのような値 x がシークの確率の値を指定した、</b> FDIST (x, 自由度 1, 自由度 2) = 確率です。 <b>Finv 関数</b>の精度がの精度に依存するため、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FDist(System.Double,System.Double,System.Double)" />。 <b>Finv 関数</b>では、反復計算の手法を使用します。 検索は、64 回の反復後が収束しない、関数はエラー値 #n/a を返します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fisher">
      <MemberSignature Language="C#" Value="public double Fisher (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fisher([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fisher(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fisher (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Fisher(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16667)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 変換の対象となる数値を指定します。</param>
        <summary>x に対するフィッシャー変換の値を返します。この関数を使うと、非対称分布を正規分布に変換することができます。この関数は、相関係数の仮説検定を行うときに使用します。</summary>
        <returns>To be added.</returns>
        <remarks><para>X が数値以外の場合は、<b>フィッシャー</b>が #VALUE を返します。 エラー値です。 </para>
          <para>X ≤-1 の場合、または受領 1 x には、<b>フィッシャー</b>が #NUM を返します。 エラー値です。 </para>
          <para>フィッシャー変換は、次の数式で表されます。</para>
          <para>フィッシャー変換の数式を図 1:</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FisherInv">
      <MemberSignature Language="C#" Value="public double FisherInv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FisherInv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FisherInv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FisherInv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FisherInv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16668)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">y: 逆変換の対象となる値を指定します。</param>
        <summary>フィッシャー変換の逆関数を返します。このメソッドは、データ範囲または配列間の相関を分析する場合に使用します。y = FISHER(x) であるとき、FISHERINV(y) = x という関係が成り立ちます。</summary>
        <returns>To be added.</returns>
        <remarks><para>Y が数値以外の場合は、 <b>FisherInv</b>が #VALUE を返します。 エラー値です。 </para>
          <para>フィッシャー変換の逆関数は、次の数式で表されます。</para>
          <para>逆のフィッシャー変換の数式を図 1:</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fixed">
      <MemberSignature Language="C#" Value="public string Fixed (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Fixed([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fixed(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fixed (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16398)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 四捨五入して文字列に変換する数値を指定します。</param>
        <param name="Arg2">桁数: 小数点以下の桁数を指定します。指定した桁数に四捨五入します。</param>
        <param name="Arg3">桁に論理値<b><b>true</b>、桁区切りにカンマを含む</b>場合。</param>
        <summary>数値を四捨五入し、ピリオド (.) とコンマ (,) を使って書式設定した文字列に変換します。</summary>
        <returns>To be added.</returns>
        <remarks><para>Microsoft Excel で扱うことができる数値の最大有効桁数は 15 桁ですが、桁数には 127 までの整数を指定することができます。</para>
          <para>桁数に負の数を指定すると、数値は小数点の左側 (整数部分) の指定した桁 (1 の位を 0 とする) で四捨五入されます。</para>
          <para>桁数を省略すると、2 を指定したと見なされます。</para>
          <para>桁では、 <b>false</b>を指定したり、省略すると、し、文字列が返されますコンマを含むいつものようにします。 </para>
          <para>主な違い、セルの書式設定の間でセル] コマンド ([書式] メニュー) に数値が含まれていると、FIXED 関数で直接数値を書式設定が<b>固定</b>がテキストにその結果を変換することです。 [セル] コマンドで書式設定された数値は、まだいくつかです。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public double Floor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Floor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16669)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 対象となる数値を指定します。</param>
        <param name="Arg2">基準値: 倍数の基準となる数値を指定します。</param>
        <summary>指定された基準値の倍数のうち、最も近い値に数値を切り捨てます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Precise(System.Double,System.Object)" />メソッドです。</para>
          <para>いずれかの引数が数値以外の場合は、<b>フロア</b>が #VALUE を返します。 エラー値です。 </para>
          <para>数値と基準値の符号が異なる場合、<b>フロア</b>が #NUM を返します。 エラー値です。 </para>
          <para>、Number の符号に関係なく値はゼロ丸められます。 数値が既に基準値の倍数になっている場合は、その値が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor_Math">
      <MemberSignature Language="C#" Value="public double Floor_Math (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor_Math([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Math(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor_Math (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16976)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">丸める数値。</param>
        <param name="Arg2">数値を丸める対象の倍数。</param>
        <param name="Arg3">0 以外の数値が指定されると、この関数は 0 に丸めます。</param>
        <summary>最も近い整数値、または基準値の倍数のうちで最も近い値に切り下げます。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor_Precise">
      <MemberSignature Language="C#" Value="public double Floor_Precise (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor_Precise([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Precise(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor_Precise (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16931)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 対象となる数値を指定します。</param>
        <param name="Arg2">基準値: 倍数の基準となる数値を指定します。</param>
        <summary>指定された基準値の倍数のうち、最も近い値に数値を丸めます。</summary>
        <returns>To be added.</returns>
        <remarks><para>によっては、数値と基準値の引数の符号、 <b>Floor_Precise</b>メソッドから離れるか、0 方向に丸めます。</para>
          <list type="table">
            <item>
              <term>-/-</term>
              <description>切り上げ</description>
            </item>
            <item>
              <term>+/+</term>
              <description>切り捨て</description>
            </item>
            <item>
              <term>-/+</term>
              <description>切り上げ</description>
            </item>
            <item>
              <term>+/-</term>
              <description>切り捨て</description>
            </item>
          </list>
          <para>いずれかの引数が数値以外の場合は、 <b>Floor_Precise</b>メソッドはエラーを生成します。 </para>
          <para>数値が既に基準値の倍数になっている場合は、その値が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Forecast">
      <MemberSignature Language="C#" Value="public double Forecast (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Forecast([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Forecast(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Forecast (Arg1 As Double, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Forecast(double Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16693)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 予測する従属変数の値に対する独立変数の値を、数値で示します。</param>
        <param name="Arg2">既知の y: 既知の従属変数の値が入力されているセル範囲または配列を指定します。</param>
        <param name="Arg3">既知の x: 既知の独立変数の値が入力されているセル範囲または配列を指定します。</param>
        <summary>既知の値を使用し、将来の値を予測します。予測する値は、x の値に対する y の値です。既知の x と既知の y から得られる回帰線上で、x の値に対する従属変数 (y) の値を予測します。この関数を使うと、将来の売上高、商品在庫量、消費動向などを予測できます。</summary>
        <returns>To be added.</returns>
        <remarks><para>X が数値以外の場合は、#VALUE を返す<b>予測</b>! エラー値です。 </para>
          <para>既知の y と既知のデータ ポイントの個数が異なる、または場合に、#N/A エラー値<b>の予測</b>を返します。 </para>
          <para>既知の x の分散が 0 の場合 # の DIV と 0 を返します<b>を予測</b>し、! エラー値です。 </para>
          <para><b>予測</b>の数式は、a + bx、場所。 </para>
          <para>予測方法の数式を図 1:</para>
          <para> </para>
          <para> </para>
          <para>そして：</para>
          <para>予測方法の数式を図 2:</para>
          <para> </para>
          <para> </para>
          <para>x と y のサンプルは、AVERAGE(known_x's) (既知の y) の平均値は、です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Frequency">
      <MemberSignature Language="C#" Value="public object Frequency (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Frequency([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Frequency(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Frequency (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Frequency(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16636)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列の配列、または対象となる周波数をカウントする値のセットへの参照。 データ配列に値が含まれていない場合は、ゼロの配列が返さ<b>れます</b>。</param>
        <param name="Arg2">区間配列、または範囲を配列の値をグループ化します。 区間配列に値が含まれていない場合、<b>頻度</b>で指定した配列要素の数を返します。</param>
        <summary>どのくらいの頻度を計算値、および数字の縦方向の配列を返しますし、範囲内の値が発生します。 たとえば、スコアの範囲内に含まれるテストの点数の数をカウントするのに<b>周波数</b>を使用します。 配列が返さ<b>れ</b>、配列数式として入力する必要があります。</summary>
        <returns>To be added.</returns>
        <remarks><para>返された配布を表示するセル範囲を選択した後、
            <b>頻度</b>は、配列数式として入力されます。 </para>
          <para>返される配列内の要素の数は、1 つ区間配列内の要素の数よりも詳細です。 返される配列内の余分な要素は、最も高い間隔を超えた値の数を返します。 などの 3 つの範囲 (間隔) の 3 つのセルに入力された値をカウントするとき必ず結果を得るのために 4 つのセルの<b>間隔</b>を入力してください。 余分のセルは、3 番目の間隔の値より大きい値は、データ配列の値の数を返します。 </para>
          <para>
            <b>頻度</b>は、空白セルやテキストを無視します。 </para>
          <para>計算結果が配列となる数式は、配列数式として入力する必要があります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FTest">
      <MemberSignature Language="C#" Value="public double FTest (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FTest([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FTest(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FTest (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FTest(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16694)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列 1: 比較対象となる一方のデータを含む配列またはセル範囲を指定します。</param>
        <param name="Arg2">配列 2: 比較対象となるもう一方のデータを含む配列またはセル範囲を指定します。</param>
        <summary>F 検定の結果を返します。F 検定により、配列 1 と配列 2 とのデータのばらつきに有意な差が認められない両側確率が返されます。この関数を利用すると、2 つの高等学校で同じテストを実施した場合、両校の生徒の成績に有意な差が認められるかどうかを調べることができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Test(System.Object,System.Object)" />メソッドです。</para>
          <para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>配列 1 または配列 2 のデータ ポイントの数が 2 未満である場合、または配列 1 または配列 2 の差異が 0 の場合は、<b>場合</b>は、# の DIV または 0 を返します。 エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fv">
      <MemberSignature Language="C#" Value="public double Fv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16441)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">利率: 投資の利率を指定します。</param>
        <param name="Arg2">期間: 投資期間全体での支払い回数の合計を指定します。</param>
        <param name="Arg3">定期支払額: 毎回の支払額を指定します。投資期間内に支払額を変更することはできません。通常、定期支払額には元金と利息が含まれますが、その他の手数料や税金は含まれません。定期支払額を省略した場合は、現在価値を必ず指定してください。</param>
        <param name="Arg4">現在価値: 現在の投資額、または、将来行われる一連の支払いを現時点で一括払いした場合の合計金額を指定します。現在価値を省略した場合は 0 (ゼロ) を指定したと見なされ、定期支払額を指定する必要があります。</param>
        <param name="Arg5">支払期日: 支払いがいつ行われるかを、数値の 0 または 1 で指定します。支払期日を省略すると、0 を指定したと見なされます。</param>
        <summary>定額の支払いを定期的に行い、利率が一定であると仮定して、投資の将来価値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para><b>Fv</b>の引数のより詳細な説明と財務関数の詳細についてを参照してください<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />。</para>
          <list type="table">
            <item>
              <term>0</term>
              <description>各期の期末</description>
            </item>
            <item>
              <term>1</term>
              <description>各期の期首</description>
            </item>
          </list>
          <para>利率と期間を指定するときは、時間的な単位を一致させる必要があります。たとえば、年利 12% の 4 年ローンを月払いで返済する場合、利率には 12%/12 = 1 (%) を、また期間には 4*12 = 48 (月) を指定します。また、これと同じローンを年払いで返済する場合は、利率に 12 (%)、期間に 4 (年) を指定します。</para>
          <para>すべての引数に関して、定額預金の支払いのような出金は負の数で表し、配当金のような入金は正の数で表します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FVSchedule">
      <MemberSignature Language="C#" Value="public double FVSchedule (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FVSchedule([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FVSchedule(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FVSchedule (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FVSchedule(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16860)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">元金: 投資の現在価値を指定します。</param>
        <param name="Arg2">利率配列: 投資期間内の変動金利を配列として指定します。</param>
        <summary>投資期間内の一連の金利を複利計算することにより、初期投資の元金の将来価値を返します。このメソッドは、金利が変動または調整されるような投資の将来価値を計算する場合に使用します。</summary>
        <returns>To be added.</returns>
        <remarks><para>スケジュールの値は、数値または空白セル。#VALUE を作成するその他の値です。 エラー値が<b>返されます</b>。 空白セルがゼロと見なされる (関係のない)。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma">
      <MemberSignature Language="C#" Value="public double Gamma (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16959)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">ガンマを計算する対象の値。</param>
        <summary>Gamma 関数の値を返します。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma_Dist">
      <MemberSignature Language="C#" Value="public double Gamma_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16879)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 関数に代入する値を指定します。</param>
        <param name="Arg2">α: 分布のパラメーターを指定します。</param>
        <param name="Arg3">β: 分布のパラメーターを指定します。 場合 β = 1, <b>Gamma_Dist</b>は、標準 γ 分布を返します。</param>
        <param name="Arg4">関数形式の関数の形式を決定する論理値です。 場合<b>は累積的な</b> <b>Gamma_Dist</b>は累積分布関数の値を返します。かどうかは<b>false</b>を返します確率密度関数です。</param>
        <summary>ガンマ分布関数の値を返します。この関数を使うと、正規分布に従わないデータの分析を行うことができます。ガンマ分布は待ち行列分析などで使用されます。</summary>
        <returns>To be added.</returns>
        <remarks><para>X、アルファ、ベータ版では、数値以外、 <b>Gamma_Dist</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>場合 x &lt; 0 <b>Gamma_Dist</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合アルファ ≤ 0 または β ≤ 0、 <b>Gamma_Dist</b>が #NUM を返します!。 エラー値です。 </para>
          <para>ガンマ確率密度関数は、次の数式で表されます。 </para>
          <para>図 1: ガンマ確率密度関数</para>
          <para> </para>
          <para> </para>
          <para>また、標準ガンマ確率密度関数は、次の数式で表されます。</para>
          <para>図 2: 標準ガンマ確率密度関数</para>
          <para> </para>
          <para> </para>
          <para>Α = 1、 <b>Gamma_Dist</b>は、指数分布を返します。</para>
          <para>図 3: 数式</para>
          <para> </para>
          <para> </para>
          <para>正の整数 n の場合は、α = n/2、β = 2、および累積的な = <b>true</b>、 <b>Gamma_Dist</b>を返します (n 個の自由度では 1 - CHIDIST(x)) です。 </para>
          <para>Α が正の整数の<b>Gamma_Dist</b>は、アーラン分布とも呼ばれます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma_Inv">
      <MemberSignature Language="C#" Value="public double Gamma_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16880)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">確率: ガンマ確率分布における確率を指定します。</param>
        <param name="Arg2">α: 分布のパラメーターを指定します。</param>
        <param name="Arg3">β: 分布のパラメーターを指定します。 場合 β = 1, <b>Gamma_Inv</b>は、標準 γ 分布を返します。</param>
        <summary>ガンマ分布の累積分布関数の逆関数の値を返します。つまり、確率 = GAMMA_DIST(x,...) であるとき、GAMMA_INV(確率,...) = x という関係が成り立ちます。</summary>
        <returns>To be added.</returns>
        <remarks><para>この関数は、正規分布に従わないと見られる変数を分析する場合に使います。</para>
          <para>いずれかの引数が文字列の場合は、 <b>Gamma_Inv</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>場合確率&lt;0、または確率&gt;1、 <b>Gamma_Inv</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合アルファ ≤ 0 または β ≤ 0、 <b>Gamma_Inv</b>が #NUM を返します!。 エラー値です。</para>
          <para>確率の値を与え、そのような値 x がシーク<b>Gamma_Inv</b>その GAMMA_DIST を (x、アルファ、ベータ版では TRUE) = 確率です。 <b>Gamma_Inv</b>の精度がの精度に依存するため、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" />。 <b>Gamma_Inv</b>では、反復計算の手法を使用します。 結果は 100 回反復後収束しないが、関数はエラー値 #n/a を返します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaDist">
      <MemberSignature Language="C#" Value="public double GammaDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16670)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 関数に代入する値を指定します。</param>
        <param name="Arg2">α: 分布のパラメーターを指定します。</param>
        <param name="Arg3">β: 分布のパラメーターを指定します。 場合 β = 1 の場合、<b>値</b>には、標準 γ 分布が返されます。</param>
        <param name="Arg4">関数形式の関数の形式を決定する論理値です。 場合<b>は累積的な</b>累積分布関数の値に<b>値</b>が返されますかどうかは<b>false</b>を返します確率密度関数です。</param>
        <summary>ガンマ分布関数の値を返します。この関数を使うと、正規分布に従わないデータの分析を行うことができます。ガンマ分布は待ち行列分析などで使用されます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" />メソッドです。</para>
          <para>X、アルファ、ベータ版では、数値、<b>値</b>には、#VALUE が返されます。 エラー値です。 </para>
          <para>場合 x &lt; 0 で、<b>値</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合アルファ ≤ 0 または β ≤ 0 の<b>場合</b>#NUM を返します!。 エラー値です。 </para>
          <para>ガンマ確率密度関数は、次の数式で表されます。 </para>
          <para>図 1: ガンマ確率密度関数</para>
          <para> </para>
          <para> </para>
          <para>また、標準ガンマ確率密度関数は、次の数式で表されます。</para>
          <para>図 2: 標準ガンマ確率密度関数</para>
          <para> </para>
          <para> </para>
          <para>Α = 1、<b>値</b>には、指数分布が返されます。</para>
          <para>図 3: 数式</para>
          <para> </para>
          <para> </para>
          <para>正の整数 n の場合は、α = n/2、β = 2、および累積的な = <b>true</b><b>値</b>を返します (n 個の自由度では 1 - CHIDIST(x)) です。 </para>
          <para>Α が正の整数の<b>場合</b>は、アーラン分布とも呼ばれるれます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaInv">
      <MemberSignature Language="C#" Value="public double GammaInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16671)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">確率: ガンマ確率分布における確率を指定します。</param>
        <param name="Arg2">α: 分布のパラメーターを指定します。</param>
        <param name="Arg3">β: 分布のパラメーターを指定します。 場合 β = 1 の場合、<b>標準ガンマ分布の値が返されます</b>。</param>
        <summary>ガンマ分布の累積分布関数の逆関数の値を返します。つまり、確率 = GAMMADIST(x,...) であるとき、GAMMAINV(確率,...) = x となるような x の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Inv(System.Double,System.Double,System.Double)" />メソッドです。</para>
          <para>この関数は、正規分布に従わないと見られる変数を分析する場合に使います。</para>
          <para>いずれかの引数が文字列の場合は、<b>指定した</b>が #VALUE を返します。 エラー値です。 </para>
          <para>場合確率&lt;0、または確率&gt;1 を<b>指定した</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合アルファ ≤ 0 または β ≤ 0 で、<b>指定した</b>が #NUM を返します!。 エラー値です。</para>
          <para><b>指定した</b>確率の値を与え、そのような値 x がシーク (x、アルファ、ベータ版では TRUE) は、その値の確率を = します。 <b>指定した</b>有効桁数がの精度に依存するため、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaDist(System.Double,System.Double,System.Double,System.Boolean)" />。 <b>指定した</b>反復計算の手法を使用します。 検索は、64 回の反復後が収束しない、関数はエラー値 #n/a を返します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaLn">
      <MemberSignature Language="C#" Value="public double GammaLn (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaLn([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaLn (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaLn(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16655)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 関数に代入する値を指定します。</param>
        <summary>ガンマ関数 Γ(x) の値の自然対数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn_Precise(System.Double)" />メソッドです。</para>
          <para>X が数値以外の場合は、 <b>GammaLn</b>が #VALUE を返します。 エラー値です。 </para>
          <para><b>GammaLn</b>は x ≤ 0 の場合、#NUM を返します。 エラー値です。 </para>
          <para>i を整数とするとき、自然対数の底 e の GAMMALN(i) 乗は (i-1)! と等しくなります。</para>
          <para>
            <b>GammaLn</b>は、次のように計算されます。 </para>
          <para>GammaLn メソッドの図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para>ここで、</para>
          <para>図 2: 数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaLn_Precise">
      <MemberSignature Language="C#" Value="public double GammaLn_Precise (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaLn_Precise([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn_Precise(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaLn_Precise (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaLn_Precise(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16929)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 関数に代入する値を指定します。</param>
        <summary>ガンマ関数 Γ(x) の値の自然対数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>X が数値以外の場合は、 <b>GammaLn_Precise</b>メソッドはエラーを生成します。 </para>
          <para>≤ 0、x は、 <b>GammaLn_Precise</b>メソッドはエラーを生成します。 </para>
          <para>i を整数とするとき、自然対数の底 e の GAMMALN(i) 乗は (i-1)! と等しくなります。</para>
          <para>GammaLn メソッドの値は、次の数式で計算されます。 </para>
          <para>GammaLn_Precise メソッドの図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para>ここで、</para>
          <para>図 2: 数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Gauss">
      <MemberSignature Language="C#" Value="public double Gauss (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gauss([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gauss(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gauss (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gauss(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16961)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">分布を求める値を指定します。</param>
        <summary>標準正規分布の累積分布関数より小さい 0.5 を返します。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gcd">
      <MemberSignature Language="C#" Value="public double Gcd (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gcd(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gcd (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16857)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1, 数値 2, … : 最大公約数を求める数値を指定します。引数は 1 ～ 29 個まで指定できます。整数以外の値を指定すると、小数点以下が切り捨てられます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>複数の整数の最大公約数を返します。最大公約数とは、引数の数値 1、数値 2 … に指定されたすべての整数に共通する約数の中で、最も大きい約数をいいます。</summary>
        <returns>To be added.</returns>
        <remarks><para>いずれかの引数が数値以外の場合は、<b>最大公約数</b>が #VALUE を返します。 エラー値です。 </para>
          <para><b>最大公約数</b>は、いずれかの引数が 0 より小さい場合、#NUM を返します。 エラー値です。 </para>
          <para>1 はあらゆる整数の約数となります。</para>
          <para>素数には、その数自体と 1 以外に約数がありません。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GeoMean">
      <MemberSignature Language="C#" Value="public double GeoMean (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GeoMean([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GeoMean(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GeoMean (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16703)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1, 数値 2, … : 相乗平均を計算するため、最大 30 個までの数値を指定できます。半角のコンマ (,) で区切られた引数の代わりに、数値配列または配列に対するセル参照を指定することもできます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>正の数から成る配列またはセル範囲のデータの相乗平均を返します。GeoMean メソッドを利用すると、利率が変動する場合の複利計算で、平均成長率を計算することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>≤ 0 のデータ場合は、<b>引数</b>が #NUM を返します。 エラー値です。 </para>
          <para>相乗平均は次の式で与えられます。 </para>
          <para>幾何平均の数式を図 1:</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GeStep">
      <MemberSignature Language="C#" Value="public double GeStep (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GeStep([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GeStep(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GeStep (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16803)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: しきい値と比較する値を指定します。</param>
        <param name="Arg2">ステップのしきい値となる値です。 <b>ステップの値を省略すると、0 を指定したと見なされます。</b></param>
        <summary>受領の数は、次のステップの場合は 1 を返します。それ以外の場合、0 (ゼロ) を返します。 値のセットをフィルター処理するのにには、この関数を使用します。 などの複数の<b>GeStep</b>関数の和では、しきい値を超える値の個数を計算します。</summary>
        <returns>To be added.</returns>
        <remarks><para>いずれかの引数が数値以外の場合は、 <b>GeStep</b>が #VALUE を返します。 エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Growth">
      <MemberSignature Language="C#" Value="public object Growth (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Growth([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Growth (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16436)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">既知の y: 既にわかっている y の値の系列で、y = b*m^x という関係が成り立ちます。</param>
        <param name="Arg2">既知の x: 既にわかっている x の値の系列で、y = b*m^x という関係になります。この引数は省略してもかまいません。</param>
        <param name="Arg3">新しい x の新しい x の値の対応する y の値を<b>増加</b>します。</param>
        <param name="Arg4">定数: 定数 b を 1 にするかどうかを論理値で指定します。</param>
        <summary>既存のデータを使用して、予測指数拡張を計算します。 <b>拡張</b>は、既存の x 値と y の値を使用して、指定した新規の x 値の系列の y 値を返します。 既存の x 値と y の値を指数曲線に合わせて<b>Growth</b>ワークシート関数を使用することもできます。</summary>
        <returns>To be added.</returns>
        <remarks><para>既知の y の配列が 1 つの列に入力されている場合、既知の x の各列はそれぞれ異なる変数であると見なされます。</para>
          <para>既知の y の配列が 1 つの行に入力されている場合、既知の x の各行はそれぞれ異なる変数であると見なされます。</para>
          <para>0 または負の値の既知の数値のいずれかの場合は、<b>成長</b>が #NUM を返します。 エラー値です。 </para>
          <para>既知の x の配列には、1 つまたは複数の変数の系列を指定することができます。変数の系列が 1 つである場合、既知の y と既知の x は、両者の次元が同じであれば、どのような形の範囲であってもかまいません。変数の系列が複数である場合、既知の y は 1 行または 1 列のセル範囲でなければなりません。</para>
          <para>既知の x を省略すると、既知の y と同じサイズの {1,2,3,...} という配列を指定したと見なされます。</para>
          <para>新しい x には、既知の x と同様にそれぞれ独立した変数が入力されている 1 つの列 (または 1 つの行) を指定する必要があります。既知の y が 1 つの列に入力されている場合、既知の x と新しい x は同じ列数でなければなりません。また、既知の y が 1 つの行に入力されている場合、既知の x と新しい x は同じ行数でなければなりません。</para>
          <para>新しい x を省略すると、既知の x と同じ値であると見なされます。</para>
          <para>既知の x と新しい x の両方を省略すると、既知の y と同じサイズの {1,2,3,...} という配列を指定したと見なされます。</para>
          <para>場合定数を<b>true</b>または省略すると、b の値も計算されます。 </para>
          <para>場合定数が<b>false の場合</b>b が 1 に設定し、m の値が調整されるように y = m ^ x です。 </para>
          <para>計算結果が配列となる数式は、適切なセル範囲を選択した後、その中に配列数式として入力する必要があります。</para>
          <para>既知の x のような引数に配列定数を指定するときは、半角のコンマ (,) を使って同じ行の値を区切り、半角のセミコロン (;) を使って各行を区切ります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HarMean">
      <MemberSignature Language="C#" Value="public double HarMean (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HarMean([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HarMean(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function HarMean (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16704)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1, 数値 2, … : 相乗平均を計算するため、最大 30 個までの数値を指定できます。半角のコンマ (,) で区切られた引数の代わりに、数値配列または配列に対するセル参照を指定することもできます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>1 組の数値の調和平均を返します。調和平均は、逆数の算術平均 (相加平均) に対する逆数として定義されます。</summary>
        <returns>To be added.</returns>
        <remarks><para>調和平均、相乗平均、相加平均の間には、調和平均 <= 相乗平均 <= 相加平均という関係が成り立ちます。</para>
          <para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>≤ 0 のデータ場合は、<b>引数</b>が #NUM を返します。 エラー値です。 調和平均は次の式で計算されます。 </para>
          <para>調和平均の数式を図 1:</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Bin">
      <MemberSignature Language="C#" Value="public string Hex2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16768)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 変換する 16 進数を文字列として指定します。数値に指定できる文字数は 10 文字 (40 ビット) までです。数値の最上位のビット (右から 40 番目のビット) は符号を表し、残りの 39 ビットは数値の大きさを表します。負の数は 2 の補数を使って表します。</param>
        <param name="Arg2">場所で使用する文字の数です。 場所が省略されると、 <b>Hex2Bin</b>が必要な文字の最小数を使用します。 場所は、戻り値の先頭に 0 (ゼロ) をスペースに便利です。</param>
        <summary>16 進数を 2 進数に変換します。</summary>
        <returns>To be added.</returns>
        <remarks><para>負の数である場合、 <b>Hex2Bin</b>が場所を無視し、10-文字バイナリ数を返します。 </para>
          <para>数値が負の数である場合、数値に FFFFFFFE00 より小さい値を指定することはできません。数値が正の数である場合、数値に 1FF より大きい値を指定することはできません。</para>
          <para>番号が 16 進数ではない場合、 <b>Hex2Bin</b>が #NUM を返します。 エラー値です。 </para>
          <para><b>Hex2Bin</b>文字よりも大きくする必要がある場合、#NUM を返します。 エラー値です。 桁数に整数以外の値を指定すると、小数点以下は切り捨てられます。 </para>
          <para>場所が数値以外の場合は、 <b>Hex2Bin</b>が #VALUE を返します。 エラー値です。 </para>
          <para>桁数が負の場合、 <b>Hex2Bin</b>が #NUM を返します。 エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Dec">
      <MemberSignature Language="C#" Value="public string Hex2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Hex2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16769)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 変換する 16 進数を文字列として指定します。数値に指定できる文字数は 10 文字 (40 ビット) までです。数値の最上位のビットは符号を表し、残りの 39 ビットは数値の大きさを表します。負の数は 2 の補数を使って表します。</param>
        <summary>16 進数を 10 進数に変換します。</summary>
        <returns>To be added.</returns>
        <remarks><para>番号が 16 進数でない場合は、 <b>Hex2Dec</b>が #NUM を返します。 エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Oct">
      <MemberSignature Language="C#" Value="public string Hex2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16770)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 変換する 16 進数を文字列として指定します。数値に指定できる文字数は 10 文字 (40 ビット) までです。数値の最上位のビットは符号を表し、残りの 39 ビットは数値の大きさを表します。負の数は 2 の補数を使って表します。</param>
        <param name="Arg2">場所で使用する文字の数です。 場所が省略されると、 <b>Hex2Oct</b>が必要な文字の最小数を使用します。 場所は、戻り値の先頭に 0 (ゼロ) をスペースに便利です。</param>
        <summary>16 進数を 8 進数に変換します。</summary>
        <returns>To be added.</returns>
        <remarks><para>負の数である場合、 <b>Hex2Oct</b>が場所を無視し、10-文字 8 進数を返します。 </para>
          <para>数値が負の数である場合、数値に FFE0000000 より小さい負の数を指定することはできません。数値が正の数である場合、数値に 1FFFFFFF より大きい正の数を指定することはできません。</para>
          <para>番号が 16 進数ではない場合、 <b>Hex2Oct</b>が #NUM を返します。 エラー値です。 </para>
          <para><b>Hex2Oct</b>文字よりも大きくする必要がある場合、#NUM を返します。 エラー値です。 </para>
          <para>桁数に整数以外の値を指定すると、小数点以下は切り捨てられます。</para>
          <para>場所が数値以外の場合は、 <b>Hex2Oct</b>が #VALUE を返します。 エラー値です。 </para>
          <para>桁数が負の場合、 <b>Hex2Oct</b>が #NUM を返します。 エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HLookup">
      <MemberSignature Language="C#" Value="public object HLookup (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object HLookup([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function HLookup (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16485)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">検索値: 範囲の上端行で検索する値を指定します。検索値には、値、セル参照、または文字列を指定します。</param>
        <param name="Arg2">範囲: 目的のデータが含まれるテーブルを指定します。セル範囲の参照、またはセル範囲名を指定します。</param>
        <param name="Arg3">行番号の行番号を範囲に一致する値を返されます。 1 の指定では、範囲の最初の行の値が返されます、2 の指定などと、範囲の 2 番目の行の値が返されます。 行番号が 1 未満の場合は、 <b>HLookup</b>は、#VALUE を返します。 エラー値です。行番号が範囲の行数より大きい場合は、 <b>HLookup</b>は、#REF を返す! エラー値です。</param>
        <param name="Arg4">検索の型が正確に一致するか、近似値を検索するのには、 <b>HLookup</b>を使用するかを指定する論理値です。 場合<b>は true</b>または省略すると、近似値が返されます。 つまり、厳密な一致が見つからない場合は、検索値未満である次の最大値が返されます。 場合は<b>false</b>、 <b>HLookup</b>を正確に一致すると見つかります。 1 つが見つからない場合、エラー値 #n/a が返されます。</param>
        <summary>テーブルの一番上の行または値の配列内の値を検索し、同じ列でテーブルまたは配列で指定した行から値を返します。 データ、テーブルの上部に、比較する値がある行で、行の指定された番号を検索する場合は、HLookup を使用します。 使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" />を検索するデータの左側の列で、比較する値のある場合。</summary>
        <returns>To be added.</returns>
        <remarks><para><b>検索値が見つからない、</b>検索の型は、 <b>true</b>の場合、検索値より小さい最大の値を使用します。 </para>
          <para>検査値が範囲の最初の行の最小値より小さい場合は、 <b>HLookup</b>は、#N/A エラー値を返します。 </para>
          <para>検索の型が FALSE で、検索値が文字列の場合、半角の疑問符 (?) または半角のアスタリスク (*) をワイルドカード文字として使用することができます。ワイルドカード文字の疑問符は任意の 1 文字を表し、アスタリスクは任意の文字列を表します。ワイルドカード文字ではなく、通常の文字として疑問符やアスタリスクを検索する場合は、その文字の前に、"~*" のように半角のティルダ (~) を付けます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HypGeom_Dist">
      <MemberSignature Language="C#" Value="public double HypGeom_Dist (double Arg1, double Arg2, double Arg3, double Arg4, bool Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HypGeom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]bool Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeom_Dist(System.Double,System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HypGeom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Arg5 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double HypGeom_Dist(double Arg1, double Arg2, double Arg3, double Arg4, bool Arg5);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16919)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">標本の成功数: 標本内で成功する数を指定します。</param>
        <param name="Arg2">標本数: 標本数を指定します。</param>
        <param name="Arg3">母集団の成功数: 母集団内で成功する数を指定します。</param>
        <param name="Arg4">母集団の大きさ: 母集団全体の数を指定します。</param>
        <param name="Arg5">関数形式の関数の形式を決定する論理値です。 累積的な場合は<b>true</b>、 <b>HypGeom_Dist</b>は、累積分布関数の値を取得し、かどうかは<b>false</b>を返します確率密度関数です。</param>
        <summary>超幾何分布を返します。 <b>HypGeom_Dist</b>は、指定された標本数、母集団の成功数、母集団の大きさを指定されたサンプル成功数の確率を返します。 各観測には、成功または失敗のいずれかと等しい確率で指定されたサイズの各サブセットを選択した場合、母集団が有限の問題を<b>HypGeom_Dist</b>を使用します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>いずれかの引数が数値以外の場合は、 <b>HypGeom_Dist</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>場合標本の成功数&lt;0 または標本の成功数がより大きい、小さい方の標本数または母集団の成功数は、 <b>HypGeom_Dist</b>が #NUM を返します。 エラー値です。 </para>
          <para>標本の成功数よりも小さい場合の 0 (標本数 - 母集団の大きさ + 母集団の成功数)、 <b>HypGeom_Dist</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合標本数 ≤ 0 または標本数&gt; <b>HypGeom_Dist</b>が #NUM を返す、母集団の大きさです。 エラー値です。 </para>
          <para>場合母集団の成功数 ≤ 0 または母集団の成功数&gt; <b>HypGeom_Dist</b>が #NUM を返す、母集団の大きさです。 エラー値です。 </para>
          <para>母集団の大きさの ≤ 0、 <b>HypGeom_Dist</b>は、#NUM を返します。 場合、 エラー値です。 </para>
          <para>超幾何分布は次の式で与えられます。 </para>
          <para>超幾何分布の数式を図 1:</para>
          <para> </para>
          <para> </para>
          <para>各項目の意味は次のとおりです。</para>
          <para>x = 標本の成功数</para>
          <para>n = 標本数</para>
          <para>M = 母集団の成功数</para>
          <para>N = 母集団の大きさ</para>
          <para>有限母集団からの交換せずに、サンプリングでは、 
            <b>HypGeom_Dist</b>が使用されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HypGeomDist">
      <MemberSignature Language="C#" Value="public double HypGeomDist (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HypGeomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeomDist(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function HypGeomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double HypGeomDist(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16673)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">標本の成功数: 標本内で成功する数を指定します。</param>
        <param name="Arg2">標本数: 標本数を指定します。</param>
        <param name="Arg3">母集団の成功数: 母集団内で成功する数を指定します。</param>
        <param name="Arg4">母集団の大きさ: 母集団全体の数を指定します。</param>
        <summary>超幾何分布を返します。 <b>HypGeomDist</b>は、指定された標本数、母集団の成功数、母集団の大きさを指定されたサンプル成功数の確率を返します。 各観測では、成功または失敗、および指定されたサイズの各サブセットが同じ可能性で選択は、母集団が有限で問題の<b>HypGeomDist</b>を使用します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeom_Dist(System.Double,System.Double,System.Double,System.Double,System.Boolean)" />メソッドです。</para>
          <para>引数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para><b>HypGeomDist</b>は、いずれかの引数が数値以外の場合は、#VALUE を返します! エラー値です。 </para>
          <para>場合標本の成功数&lt;0、または標本の成功数が小さい方より大きい標本数または母集団の成功数、 <b>HypGeomDist</b>が #NUM を返します。 エラー値です。 </para>
          <para>標本の成功数よりも小さい場合のか (標本数 - 母集団の大きさ + 母集団の成功数) の場合、 <b>HypGeomDist</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合標本数 ≤ 0 または標本数&gt;母集団の大きさ、HYPGEOMDIST が #NUM を返します。 エラー値です。 </para>
          <para>場合母集団の成功数 ≤ 0 または母集団の成功数&gt;母集団の大きさ、 <b>HypGeomDist</b>が #NUM を返します。 エラー値です。 </para>
          <para>母集団の大きさの ≤ 0、 <b>HypGeomDist</b>は、#NUM を返します。 場合、 エラー値です。 </para>
          <para>超幾何分布は次の式で与えられます。 </para>
          <para>超幾何分布の数式を図 1:</para>
          <para> </para>
          <para> </para>
          <para>各項目の意味は次のとおりです。</para>
          <para>x = 標本の成功数</para>
          <para>n = 標本数</para>
          <para>M = 母集団の成功数</para>
          <para>N = 母集団の大きさ</para>
          <para>
            <b>HypGeomDist</b>は、母集団が有限から交換せずに、サンプリングに使用されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IfError">
      <MemberSignature Language="C#" Value="public object IfError (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object IfError([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IfError(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IfError (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ IfError(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16864)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">値: エラーかどうかをチェックする引数です。</param>
        <param name="Arg2">エラーの場合の値: 数式がエラーとして評価される場合に返す値です。評価されるエラーの種類は、#N/A、#VALUE!、#REF!、#DIV/0!、#NUM!、#NAME?、および #NULL! です。</param>
        <summary>かどうか、数式にするとエラーを指定する値を返します。それ以外の場合、数式の結果を返します。 <b>IfError</b>関数を使用してトラップして数式のエラーを処理します。</summary>
        <returns>To be added.</returns>
        <remarks><para>値またはエラーの場合に空のセルがある場合として扱わ<b>れます空の文字列値</b>("")。 </para>
          <para>値が配列数式の場合は、値で指定した範囲の各セルの結果の配列が返さ<b>れます</b>。 次の 2 つ目の例を参照してください。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IfNa">
      <MemberSignature Language="C#" Value="public object IfNa (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object IfNa([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IfNa(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IfNa (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ IfNa(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16974)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">value: 任意の値、式、または参照。</param>
        <param name="Arg2">value_if_na: 任意の値、式、または参照。</param>
        <summary>式が #N/A に解決されると、指定した値を返します。それ以外の場合は、式の結果を返します。</summary>
        <returns><b>VARIANT</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImAbs">
      <MemberSignature Language="C#" Value="public string ImAbs (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImAbs([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImAbs(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImAbs (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImAbs(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16783)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数: 絶対値を求める複素数を指定します。</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された複素数の絶対値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />を実数と虚数係数を複素数に変換します。 </para>
          <para>複素数の絶対値は、次の数式で表されます。 </para>
          <para>複素数の絶対値の図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para>各項目の意味は次のとおりです。</para>
          <para>z = x + イ</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Imaginary">
      <MemberSignature Language="C#" Value="public double Imaginary (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Imaginary([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Imaginary(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Imaginary (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Imaginary(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16793)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数: 虚数係数を求める複素数を指定します。</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された複素数の虚数係数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />を実数と虚数係数を複素数に変換します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImArgument">
      <MemberSignature Language="C#" Value="public string ImArgument (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImArgument([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImArgument(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImArgument (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImArgument(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16791)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数: 引数 θ を求める複素数を、文字列 "x+yi" または "x+yj" の形式で指定します。</param>
        <summary>引数 (シータ) ラジアンで表わした角度を返すようにします。</summary>
        <returns>To be added.</returns>
        <remarks><para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />を実数と虚数係数を複素数に変換します。 </para>
          <para>
            <b>されて</b>は、次のように計算されます。 </para>
          <para>されてメソッドの図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para>ここで、</para>
          <para>図 2: 数式</para>
          <para> </para>
          <para> </para>
          <para>and</para>
          <para>z = x + イ</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImConjugate">
      <MemberSignature Language="C#" Value="public string ImConjugate (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImConjugate([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImConjugate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImConjugate (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImConjugate(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16792)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数: 共役を求める複素数を指定します。</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された複素数の複素共役を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />を実数と虚数係数を複素数に変換します。 </para>
          <para>複素数の共役は、次の数式で表されます。 </para>
          <para>複素数の共役の図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCos">
      <MemberSignature Language="C#" Value="public string ImCos (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCos([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCos(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCos (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCos(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16789)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数: コサインを求める複素数を指定します。</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された複素数のコサインを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />を実数と虚数係数を複素数に変換します。 </para>
          <para>複素数が論理値の場合は、<b>されて</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>複素数のコサインは、次の数式で表されます。 </para>
          <para>複素数のコサインを図 1:</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCosh">
      <MemberSignature Language="C#" Value="public string ImCosh (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCosh([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCosh(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCosh (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCosh(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16978)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">双曲線余弦を求める複素数を指定します。</param>
        <summary>複素数の双曲線余弦 (ハイパーボリック コサイン) を返します。</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCot">
      <MemberSignature Language="C#" Value="public string ImCot (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCot([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCot(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCot (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCot(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16941)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">余接を求める複素数を指定します。</param>
        <summary>複素数の余接を返します。</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCsc">
      <MemberSignature Language="C#" Value="public string ImCsc (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCsc([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCsc(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCsc (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCsc(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16942)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">余割を求める複素数を指定します。</param>
        <summary>複素数の余割 (コセカント) を返します。</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCsch">
      <MemberSignature Language="C#" Value="public string ImCsch (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCsch([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCsch(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCsch (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCsch(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16943)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">双曲線余割を求める複素数を指定します。</param>
        <summary>複素数の双曲線余割 (ハイパーボリック コセカント) を返します。</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImDiv">
      <MemberSignature Language="C#" Value="public string ImDiv (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImDiv([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImDiv(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImDiv (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImDiv(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16781)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数 1: 割り算の分子または被除数となる複素数を指定します。</param>
        <param name="Arg2">複素数 2: 割り算の分母または除数となる複素数を指定します。</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された 2 つの複素数の商を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />を実数と虚数係数を複素数に変換します。 </para>
          <para>2 つの複素数の商は、次の数式で表されます。 </para>
          <para>図 1: 2 つの複素数の商</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImExp">
      <MemberSignature Language="C#" Value="public string ImExp (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImExp([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImExp(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImExp (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImExp(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16790)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数: べき乗を求める複素数を指定します。</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された複素数のべき乗を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />を実数と虚数係数を複素数に変換します。 </para>
          <para>複素数のべき乗は、次の数式で表されます。 </para>
          <para>図 1: 複素数の指数</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLn">
      <MemberSignature Language="C#" Value="public string ImLn (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLn([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLn(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLn (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLn(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16785)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数: 自然対数を求める複素数を指定します。</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された複素数の自然対数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />を実数と虚数係数を複素数に変換します。 </para>
          <para>複素数の自然対数は、次の数式で表されます。 </para>
          <para>複素数の自然対数を図 1:</para>
          <para> </para>
          <para> </para>
          <para>各項目の意味は次のとおりです。</para>
          <para>図 2: 数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLog10">
      <MemberSignature Language="C#" Value="public string ImLog10 (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLog10([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLog10(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLog10 (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLog10(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16787)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数: 常用対数を求める複素数を指定します。</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された複素数の 10 を底とする対数 (常用対数) を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />を実数と虚数係数を複素数に変換します。 </para>
          <para>複素数の常用対数は、自然対数を使って計算することができます。 </para>
          <para>複素数の常用対数の図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLog2">
      <MemberSignature Language="C#" Value="public string ImLog2 (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLog2([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLog2(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLog2 (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLog2(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16786)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数: 2 を底とする対数を求める複素数を指定します。</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された複素数の 2 を底とする対数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />を実数と虚数係数を複素数に変換します。 </para>
          <para>複素数の 2 を底とする対数は、自然対数を使って計算することができます。 </para>
          <para>複素数の 2 を底とする対数の図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImPower">
      <MemberSignature Language="C#" Value="public string ImPower (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImPower([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImPower(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImPower (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImPower(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16782)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数: べき乗を求める複素数を指定します。</param>
        <param name="Arg2">数値: 複素数を底とするべき乗の指数を指定します。</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された複素数の整数乗を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />を実数と虚数係数を複素数に変換します。 </para>
          <para>数値が数値以外の場合は、<b>値</b>が #VALUE を返します。 エラー値です。 </para>
          <para>数値には、整数、分数、または負の数を指定することができます。</para>
          <para>複素数を底とするべき乗は、次の数式で表されます。 </para>
          <para>図 1: 数式の複雑な数値を累乗しました。</para>
          <para> </para>
          <para> </para>
          <para>各項目の意味は次のとおりです。</para>
          <para>図 2: 数式</para>
          <para> </para>
          <para> </para>
          <para>、および</para>
          <para>図 3: 数式</para>
          <para> </para>
          <para> </para>
          <para>、および</para>
          <para>図 4: 数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImProduct">
      <MemberSignature Language="C#" Value="public string ImProduct (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImProduct([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImProduct(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImProduct (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16797)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数 1, 複素数 2, … : 積を求める複素数を指定します。引数は 1 ～ 29 個まで指定できます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された 2 ～ 29 個の複素数の積を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />を実数と虚数係数を複素数に変換します。 </para>
          <para>2 つの複素数の積は、次の数式で表されます。</para>
          <para>図 1: 2 つの複素数の積</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImReal">
      <MemberSignature Language="C#" Value="public double ImReal (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ImReal([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImReal(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImReal (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ImReal(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16794)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数: 実数係数を求める複素数を指定します。</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された複素数の実数係数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />を実数と虚数係数を複素数に変換します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSec">
      <MemberSignature Language="C#" Value="public string ImSec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16944)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">双曲線余割を求める複素数を指定します。</param>
        <summary>複素数の双曲線余割 (ハイパーボリック コセカント) を返します。</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSech">
      <MemberSignature Language="C#" Value="public string ImSech (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSech([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSech(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSech (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSech(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16945)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">双曲線正割を求める複素数を指定します。</param>
        <summary>複素数の正割 (セカント) を返します。</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSin">
      <MemberSignature Language="C#" Value="public string ImSin (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSin([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSin(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSin (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSin(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16788)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数: サインを求める複素数を指定します。</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された複素数のサインを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />を実数と虚数係数を複素数に変換します。 </para>
          <para>複素数のサインは、次の数式で表されます。 </para>
          <para>複素数のサインを図 1:</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSinh">
      <MemberSignature Language="C#" Value="public string ImSinh (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSinh([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSinh(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSinh (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSinh(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16977)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">双曲線正接を求める複素数を指定します。</param>
        <summary>複素数の双曲線正弦 (ハイパーボリック サイン) を返します。</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSqrt">
      <MemberSignature Language="C#" Value="public string ImSqrt (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSqrt([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSqrt(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSqrt (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSqrt(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16784)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数: 平方根を求める複素数を指定します。</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された複素数の平方根を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />を実数と虚数係数を複素数に変換します。 複素数の平方根は、次の数式で表されます。 </para>
          <para>図 1: 複素数の平方根を求めます</para>
          <para> </para>
          <para> </para>
          <para>各項目の意味は次のとおりです。</para>
          <para>図 2: 数式</para>
          <para> </para>
          <para> </para>
          <para>、および</para>
          <para>図 3: 数式</para>
          <para> </para>
          <para> </para>
          <para>、および</para>
          <para>図 4: 数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSub">
      <MemberSignature Language="C#" Value="public string ImSub (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSub([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSub(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSub (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSub(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16780)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数 1: 複素数 2 から減算する複素数を指定します。</param>
        <param name="Arg2">複素数 2: 複素数 1 から減算する複素数を指定します。</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された 2 つの複素数の差を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />を実数と虚数係数を複素数に変換します。</para>
          <para>2 つの複素数の差は、次の数式で表されます。</para>
          <para>図 1: 2 つの複素数の差</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSum">
      <MemberSignature Language="C#" Value="public string ImSum (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSum(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSum (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16796)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">複素数 1, 複素数 2, … : 和を求める複素数を指定します。引数は 1 ～ 29 個まで指定できます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>文字列 "x+yi" または "x+yj" の形式で指定された 2 ～ 29 個の複素数の和を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>使用<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />を実数と虚数係数を複素数に変換します。 </para>
          <para>2 つの複素数の和は、次の数式で表されます。</para>
          <para>図 1: 2 つの複素数の和</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImTan">
      <MemberSignature Language="C#" Value="public string ImTan (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImTan([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImTan(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImTan (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImTan(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16940)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">タンジェントを求める複素数を指定します。</param>
        <summary>複素数の正接 (タンジェント) を返します。</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public object Index (object Arg1, double Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Index([in]object Arg1, [in]float64 Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Index(System.Object,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Index (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16413)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列または範囲: セル範囲または配列定数を指定します。セル範囲形式の場合は、1 つまたは複数のセルの参照を指定します。</param>
        <param name="Arg2">行番号: 配列の中にあり、値を返す行を数値で指定します。行番号を省略した場合は、必ず列番号を指定する必要があります。セル範囲形式の場合は、範囲の中にあり、セル参照を返すセルの行位置を数値で指定します。</param>
        <param name="Arg3">列番号: 配列の中にあり、値を返す列を数値で指定します。列番号を省略した場合は、必ず行番号を指定する必要があります。セル範囲形式の場合は、範囲の中にあり、セル参照を返すセルの列位置を数値で指定します。</param>
        <param name="Arg4">領域の参照を返す場合にのみ使用します。 中から行番号と列番号の積集合を返す対象となる範囲を選択します。 最初に選択または入力された領域は、番号 1、2 番目は 2 というようにします。 領域を省略すると、<b>インデックス</b>が 1 の領域を使用します。</param>
        <summary>値またはテーブルまたは範囲内の値への参照を返します。 <b>Index</b>関数の 2 つの形式があります。 配列形式とセル範囲形式です。</summary>
        <returns>To be added.</returns>
        <remarks><para>配列形式</para>
          <para>行番号と列番号で指定されるテーブルまたは配列の要素の値を返します。</para>
          <para><b>インデックス</b>を作成する最初の引数が配列定数である場合は、配列形式を使用します。</para>
          <para>行番号と列番号の両方の引数を使用する場合は、行番号と列の交差部分にあるセルの値が返さ<b>れます</b>。 </para>
          <para><b>行番号または列番号を 0 (ゼロ) に設定すると、それぞれ列全体または行の値の配列が返されます。</b> 配列として返される値を使用するには、行のセルの水平方向の範囲内と垂直方向の列のセル範囲に配列数式として<b>Index</b>関数を入力します。 配列数式を入力するには、ctrl キーと SHIFT キーを押しながら ENTER を押します。 </para>
          <para>行番号と列番号は、配列内のセルをポイントする必要があります。それ以外の場合、<b>インデックス</b>は、#REF を返す! エラー値です。 </para>
          <para>参照フォーム</para>
          <para>指定された行と列が交差する位置にあるセルの参照を返します。隣接しない複数のセル範囲を指定した場合、その中から任意の領域を選択できます。範囲で指定した各領域が 1 行または 1 列である場合、行番号または列番号はそれぞれ省略することができます。たとえば、範囲が 1 行のみである場合は、INDEX(範囲,列番号) と指定できます。</para>
          <para>行番号と列番号が特定のセルを選択して参照し、領域には、特定の範囲が選択され、: 行番号 1 は、範囲の最初の行、列番号 1 は、最初の列とします。 <b>インデックス</b>を使用して返された参照は、行番号と列の交差部分です。 </para>
          <para><b>行番号または列番号を 0 (ゼロ) に設定すると、それぞれ列全体または行の参照が返されます。</b></para>
          <para>行番号、列番号、および領域は、参照内のセルをポイントする必要があります。それ以外の場合、<b>インデックス</b>は、#REF を返す! エラー値です。 行番号と列番号を省略すると、領域で指定された参照の領域が返さ<b>れます</b>。 </para>
          <para><b>Index</b>関数の結果の参照は、ほかのように解釈されます。 関数、セル参照または値としてインデックスの戻り値を使用することがあります。 たとえば、数式のセル ("width"、インデックス (a1: b2、1, 2)) は、CELL("width",B1) と同じです。 CELL 関数は、セル参照とインデックスの戻り値を使用します。 一方、2*INDEX(A1:B2,1,2) の数式は、セル B1 の数値に<b>インデックス</b>の戻り値を変換します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Intercept">
      <MemberSignature Language="C#" Value="public double Intercept (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Intercept([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Intercept (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Intercept(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16695)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">既知の y: 観測またはデータの従属範囲を指定します。</param>
        <param name="Arg2">既知の x: 観測またはデータの独立範囲を指定します。</param>
        <summary>既存の x 値と y の値を使用して、直線が y 軸を交差するが、ポイントを計算します。 切片は、回帰直線の既知の x 値と既知の y 値です。 0 (ゼロ) は、独立変数と従属変数の値を決定するときは、<b>インターセプト</b>関数を使用します。 たとえば、室温と高く、データ ポイントが作成されたときに、0 ° C で、金属の電気抵抗を予測するため<b>を受け取る</b>関数を使用することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、あるいは数値を含む範囲を参照する名前またはセル参照を指定します。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>既知の y と既知のデータ ポイントの個数が異なる、データ ポイントが含まれていない場合は、#N/A エラー値を返します<b>をインターセプト</b>します。 </para>
          <para>回帰直線の切片 a は、次の数式で表されます。</para>
          <para>回帰直線の切片の図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para>また、回帰直線の傾き b は、次の数式で表されます。</para>
          <para>傾きの図 2: 数式</para>
          <para> </para>
          <para> </para>
          <para>ここで、x は標本平均 AVERAGE(既知の x)、y は標本平均 AVERAGE(既知の y) です。</para>
          <para><b>インターセプト</b>をで使用される基になるアルゴリズムと<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" />関数で使用されている基になるアルゴリズムとは異なる、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />関数です。 データが不定で共線性と、これらのアルゴリズムの違いは異なる結果につながります。 たとえば、既知の y 引数のデータ要素が 0、既知の x 引数のデータ要素が 1 の場合。 </para>
          <list type="bullet">
            <item>
              <description>
                <b>インターセプト</b>し、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> #DIV または 0 を返します。 エラーを返します。 の<b>インターセプト</b>と<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" />のアルゴリズムは、1 つの答えを探すように設計されていて、ここですることができます複数の回答です。 </description>
            </item>
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />0 の値を返します。 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />アルゴリズムは、共線性のデータに対して適切な結果を返すように設計されていて、ここで少なくとも 1 つの解が求められます。</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IntRate">
      <MemberSignature Language="C#" Value="public double IntRate (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 IntRate([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IntRate(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IntRate (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16817)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">投資額: 証券への投資額を指定します。</param>
        <param name="Arg4">償還価額: 満期日における証券の償還額を指定します。</param>
        <param name="Arg5">基準: 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>全額投資された証券の利率を返します。</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4</term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>受渡日、満期日、基準に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para><b>受領または成熟度が有効な日付でない場合、#VALUE を!</b> エラー値です。 </para>
          <para>場合投資 ≤ 0 または償還 ≤ 0 で<b>ある</b>が #NUM を返します!。 エラー値です。 </para>
          <para>場合に&lt;0 または基準&gt;4 で<b>ある</b>が #NUM を返す! エラー値です。 </para>
          <para>場合は受領成熟度で<b>ある</b>が #NUM を返します。 エラー値です。 </para>
          <para>
            <b>ある</b>は、次のように計算されます。 </para>
          <para>あるメソッドの図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para>各項目の意味は次のとおりです。</para>
          <para>B = 年の基礎によって、1 年の日数です。</para>
          <para>DIM = 受渡日から満期日までの日数です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ipmt">
      <MemberSignature Language="C#" Value="public double Ipmt (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ipmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ipmt(System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ipmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16551)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">利率: 投資の利率を指定します。</param>
        <param name="Arg2">期: 金利支払額を求める期を 1 ～期間の範囲で指定します。</param>
        <param name="Arg3">期間: 投資期間全体での支払い回数の合計を指定します。</param>
        <param name="Arg4">現在価値: 現在の投資額、または、将来行われる一連の支払いを現時点で一括払いした場合の合計金額を指定します。</param>
        <param name="Arg5">将来価値: 投資の将来価値、つまり最後の支払いを行った後に残る現金の収支を指定します。将来価値を省略すると、0 を指定したと見なされます。たとえば、ローンなどの借入金の将来価値は 0 になります。</param>
        <param name="Arg6">支払期日: 支払いがいつ行われるかを、数値の 0 または 1 で指定します。支払期日を省略すると、0 を指定したと見なされます。</param>
        <summary>定額の支払いを定期的に行い、利率が一定であると仮定して、投資期間内の指定された期に支払われる金利を返します。</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0</term>
              <description>各期の期末</description>
            </item>
            <item>
              <term>1</term>
              <description>各期の期首</description>
            </item>
          </list>
          <para>利率と期間を指定するときは、時間的な単位を一致させる必要があります。たとえば、年利 12% の 4 年ローンを月払いで返済する場合、利率には 12%/12 = 1 (%) を、また期間には 4*12 = 48 (月) を指定します。また、これと同じローンを年払いで返済する場合は、利率に 12 (%)、期間に 4 (年) を指定します。 </para>
          <para>すべての引数に関して、定額預金の支払いのような出金は負の数で表し、配当金のような入金は正の数で表します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Irr">
      <MemberSignature Language="C#" Value="public double Irr (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Irr([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Irr (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16446)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">範囲: 数値を含む配列またはセル参照を指定します。これらの数値は、定期的に発生する一連の支払い (負の値) と収益 (正の値) に対応します。</param>
        <param name="Arg2">推定値: Irr メソッドの計算結果に近いと思われる数値を指定します。</param>
        <summary>一連の定期的なキャッシュ フローに対する内部利益率を返します。個人年金などの投資では、キャッシュ フローの差し引きが 0 である必要はありません。ただし、キャッシュ フローとは、月や年などのような一定期間をおいて、必ず発生するものでなければなりません。内部利益率とは、一定の期間ごとに発生する支払い (負の数) と収益 (正の数) から成る投資効率を表す利率のことです。</summary>
        <returns>To be added.</returns>
        <remarks><para>内部利益率を計算するには、正の値と負の値が範囲に少なくとも 1 つずつ含まれている必要があります。</para>
          <para>範囲に入力されている値の順序は、キャッシュ フローの順序であると見なされます。支払額と収益額を入力するときは、その順序と符号に注意してください。(支払額は負の値、収益額は正の値)。</para>
          <para>範囲に文字列、論理値、または空白セルが含まれる場合、これらは無視されます。</para>
          <para>Microsoft Excel では、 <b>irr 関数</b>の計算に反復計算の手法を使用します。 推定値から始めて、 <b>Irr</b>順に計算結果が 0.00001% 以内になるまでです。 <b>Irr 関数</b>は、結果を見つけられない場合は 20 とすると、#NUM! エラー値が返されます。 </para>
          <para>ほとんどの場合は、 <b>irr 関数</b>の計算の推定値を指定する必要はありません。 推定値を省略すると、0.1 (10%) と見なされます。 </para>
          <para><b>Irr</b>は、#NUM を示します。 場合、 エラー値、または予測した結果がない場合は、もう一度別の値を推定値にします。</para>
          <para>
            <b>Irr 関数</b>と密接な関係<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />、正味の現在値の関数です。 <b>Irr 関数</b>によって計算された利益率は、0 (ゼロ) の正味現在価値に対応する利率です。 次の数式を示して 方法<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <b>irr 関数</b>が関連付けられているとします。</para>
          <para>NPV(IRR(B1:B6),B1:B6) 3.60E に等しい-08 [3.60E の値、 <b>irr 関数</b>の計算の精度内に-08 が効果的に 0 (ゼロ) です]。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsErr">
      <MemberSignature Language="C#" Value="public bool IsErr (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsErr([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsErr(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsErr (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsErr(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16510)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">テストの対象: テストするデータを指定します。引数には、空白セル、エラー値、論理値、文字列、数値、セル参照、または対象となるデータを参照する名前を指定することができます。</param>
        <summary>値の型をチェックし、値が #n/a を除くエラー値を参照する場合は、 <b>true</b>または<b>false</b>によってを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>IS 関数の引数は変換されません。 など、ほとんどその他の関数で、数値が必要な場所は、文字列値「19」は数値 19 に変換されます。 ただし、数式 ISNUMBER("19") で、「19」はありませんから変換、テキスト値、および<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" />関数は<b>false</b>を返します。 </para>
          <para>IS 関数は、数式の計算結果をテストするために役立ちます。 IF 関数を組み合わせると、数式でのエラーを検索するためのメソッドを提供します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public bool IsError (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsError([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsError(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16387)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">テストの対象: テストするデータを指定します。引数には、空白セル、エラー値、論理値、文字列、数値、セル参照、または対象となるデータを参照する名前を指定することができます。</param>
        <summary>値の型をチェックし、値がエラー値を参照する場合は、 <b>true</b>または<b>false</b>によってを返します (#n/a、#VALUE!、#REF!、#DIV/0!、#NUM!、#NAME?、または #NULL!)。</summary>
        <returns>To be added.</returns>
        <remarks><para>IS 関数の引数は変換されません。 など、ほとんどその他の関数で、数値が必要な場所は、文字列値「19」は数値 19 に変換されます。 ただし、数式 ISNUMBER("19") で、「19」はありませんから変換、テキスト値、および<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" />関数は<b>false</b>を返します。 </para>
          <para>IS 関数は、数式の計算結果をテストするために役立ちます。 IF 関数を組み合わせると、数式でのエラーを検索するためのメソッドを提供します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEven">
      <MemberSignature Language="C#" Value="public bool IsEven (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEven([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsEven(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsEven (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsEven(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16804)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">テストの対象: テストするデータを指定します。引数には、空白セル、エラー値、論理値、文字列、数値、セル参照、または対象となるデータを参照する名前を指定することができます。</param>
        <summary>値の型をチェックし、値が偶数の場合、 <b>true</b>または<b>false</b>によってを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>IS 関数の引数は変換されません。 など、ほとんどその他の関数で、数値が必要な場所は、文字列値「19」は数値 19 に変換されます。 ただし、数式 ISNUMBER("19") で、「19」はありませんから変換、テキスト値、および<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" />関数は<b>false</b>を返します。 </para>
          <para>IS 関数は、数式の計算結果をテストするために役立ちます。 IF 関数を組み合わせると、数式でのエラーを検索するためのメソッドを提供します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFormula">
      <MemberSignature Language="C#" Value="public bool IsFormula (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsFormula([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsFormula(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsFormula (Arg1 As Range) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsFormula(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16973)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">テストするセル参照を指定します。セル範囲、数式、またはセルを参照する名前を指定できます。</param>
        <summary>および参照、数式を含むセルには<b>TRUE</b>または<b>FALSE</b>が返されますかどうかをチェックします。</summary>
        <returns><b>BOOL</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLogical">
      <MemberSignature Language="C#" Value="public bool IsLogical (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsLogical([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsLogical(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsLogical (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsLogical(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16582)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">テストの対象: テストするデータを指定します。引数には、空白セル、エラー値、論理値、文字列、数値、セル参照、または対象となるデータを参照する名前を指定することができます。</param>
        <summary>値の型をチェックし、値が論理値を参照する場合は、 <b>true</b>または<b>false</b>によってを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>IS 関数の引数は変換されません。 など、ほとんどその他の関数で、数値が必要な場所は、文字列値「19」は数値 19 に変換されます。 ただし、数式 ISNUMBER("19") で、「19」はありませんから変換、テキスト値、および<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" />関数は<b>false</b>を返します。 </para>
          <para>IS 関数は、数式の計算結果をテストするために役立ちます。 IF 関数を組み合わせると、数式でのエラーを検索するためのメソッドを提供します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNA">
      <MemberSignature Language="C#" Value="public bool IsNA (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNA([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNA(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNA (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNA(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16386)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">テストの対象: テストするデータを指定します。引数には、空白セル、エラー値、論理値、文字列、数値、セル参照、または対象となるデータを参照する名前を指定することができます。</param>
        <summary>値の型をチェックし、値がエラー値 #n/a: (値がない) を参照する場合は、 <b>true</b>または<b>false</b>によってを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>IS 関数の引数は変換されません。 など、ほとんどその他の関数で、数値が必要な場所は、文字列値「19」は数値 19 に変換されます。 ただし、数式 ISNUMBER("19") で、「19」はありませんから変換、テキスト値、および<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" />関数は<b>false</b>を返します。 </para>
          <para>IS 関数は、数式の計算結果をテストするために役立ちます。 IF 関数を組み合わせると、数式でのエラーを検索するためのメソッドを提供します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNonText">
      <MemberSignature Language="C#" Value="public bool IsNonText (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNonText([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNonText(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNonText (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNonText(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16574)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">テストの対象: テストするデータを指定します。引数には、空白セル、エラー値、論理値、文字列、数値、セル参照、または対象となるデータを参照する名前を指定することができます。</param>
        <summary>値の型をチェックし、値が文字列以外の任意の項目を参照する場合は、 <b>true</b>または<b>false</b>によってを返します。 (ことを返します<b>true</b>の値が空白のセルを参照する場合に注意してください)。</summary>
        <returns>To be added.</returns>
        <remarks><para>IS 関数の引数は変換されません。 など、ほとんどその他の関数で、数値が必要な場所は、文字列値「19」は数値 19 に変換されます。 ただし、数式 ISNUMBER("19") で、「19」はありませんから変換、テキスト値、および<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" />関数は<b>false</b>を返します。 </para>
          <para>IS 関数は、数式の計算結果をテストするために役立ちます。 IF 関数を組み合わせると、数式でのエラーを検索するためのメソッドを提供します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public bool IsNumber (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNumber([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumber (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNumber(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16512)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">テストの対象: テストするデータを指定します。引数には、空白セル、エラー値、論理値、文字列、数値、セル参照、または対象となるデータを参照する名前を指定することができます。</param>
        <summary>値の型をチェックし、値が数値を参照する場合は、 <b>true</b>または<b>false</b>によってを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>IS 関数の引数は変換されません。 など、ほとんどその他の関数で、数値が必要な場所は、文字列値「19」は数値 19 に変換されます。 ただし、数式 ISNUMBER("19") で、「19」はありませんから変換、テキスト値、および<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" />関数は<b>false</b>を返します。 </para>
          <para>IS 関数は、数式の計算結果をテストするために役立ちます。 IF 関数を組み合わせると、数式でのエラーを検索するためのメソッドを提供します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ISO_Ceiling">
      <MemberSignature Language="C#" Value="public double ISO_Ceiling (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ISO_Ceiling([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ISO_Ceiling(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ISO_Ceiling (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16907)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 対象となる数値を指定します。</param>
        <param name="Arg2">基準値 - 省略可能です。数値はこの基準値の倍数に切り上げられます。基準値を省略した場合の既定値は 1 です。</param>
        <summary>指定した基準値の倍数のうち、最も近い整数値に切り上げた値を返します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOdd">
      <MemberSignature Language="C#" Value="public bool IsOdd (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsOdd([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsOdd(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsOdd (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOdd(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16805)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">テストの対象: テストするデータを指定します。引数には、空白セル、エラー値、論理値、文字列、数値、セル参照、または対象となるデータを参照する名前を指定することができます。</param>
        <summary>値の型をチェックし、値が奇数の場合は、 <b>true</b>または<b>false</b>によってを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>IS 関数の引数は変換されません。 など、ほとんどその他の関数で、数値が必要な場所は、文字列値「19」は数値 19 に変換されます。 ただし、数式 ISNUMBER("19") で、「19」はありませんから変換、テキスト値、および<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" />関数は<b>false</b>を返します。 </para>
          <para>IS 関数は、数式の計算結果をテストするために役立ちます。 IF 関数を組み合わせると、数式でのエラーを検索するためのメソッドを提供します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsoWeekNum">
      <MemberSignature Language="C#" Value="public double IsoWeekNum (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 IsoWeekNum([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsoWeekNum(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsoWeekNum (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16968)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">日付と時刻のコードは Excel で日付と時刻の計算に使用します。</param>
        <param name="Arg2">この引数は、この関数では使用できません。</param>
        <summary>特定の日付の年の ISO 週数を返します。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks><para>特定の日付の年で、[ISO8601] カレンダーの曜日の序数を返します。 ISO 8601 では、カレンダーの週として、月曜日から始まる 7 日の時間間隔とその年の最初の木曜日が含まれていると 1 年の最初の週を定義します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ispmt">
      <MemberSignature Language="C#" Value="public double Ispmt (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ispmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ispmt(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ispmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ispmt(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16734)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">利率: 投資の利率を指定します。</param>
        <param name="Arg2">期: 金利支払額を求める期を 1 ～期間の範囲で指定します。</param>
        <param name="Arg3">期間: 投資期間全体での支払回数の合計を指定します。</param>
        <param name="Arg4">現在価値: 投資の現在価値、つまり、将来行われる一連の支払いを現時点で一括払いした場合の合計金額を指定します。</param>
        <summary>投資期間内の指定された期に支払われる金利を返します。この関数は、Lotus 1-2-3 関数との互換性を保つために用意されています。</summary>
        <returns>To be added.</returns>
        <remarks><para>利率と期間を指定するときは、時間的な単位を一致させる必要があります。たとえば、年利 12% の 4 年ローンを月払いで返済する場合、利率には 12%/12 = 1 (%) を、また期間には 4*12 = 48 (月) を指定します。また、これと同じローンを年払いで返済する場合は、利率に 12 (%)、期間に 4 (年) を指定します。</para>
          <para>すべての引数に関して、定額預金の支払いのような出金は負の数で表し、配当金のような入金は正の数で表します。</para>
          <para>財務関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />関数です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsText">
      <MemberSignature Language="C#" Value="public bool IsText (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsText([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsText(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsText (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsText(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16511)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">テストの対象: テストするデータを指定します。引数には、空白セル、エラー値、論理値、文字列、数値、セル参照、または対象となるデータを参照する名前を指定することができます。</param>
        <summary>値の型をチェックし、値がテキストを参照する場合は、 <b>true</b>または<b>false</b>によってを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>IS 関数の引数は変換されません。 など、ほとんどその他の関数で、数値が必要な場所は、文字列値「19」は数値 19 に変換されます。 ただし、数式 ISNUMBER("19") で、「19」はありませんから変換、テキスト値、および<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" />関数は<b>false</b>を返します。 </para>
          <para>IS 関数は、数式の計算結果をテストするために役立ちます。 IF 関数を組み合わせると、数式でのエラーを検索するためのメソッドを提供します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsThaiDigit">
      <MemberSignature Language="C#" Value="public bool IsThaiDigit (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsThaiDigit([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsThaiDigit(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsThaiDigit (Arg1 As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsThaiDigit(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16759)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>内部使用のため予約済みです。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Kurt">
      <MemberSignature Language="C#" Value="public double Kurt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Kurt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Kurt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Kurt (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16706)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1、数値 2 ...: 尖度を計算するため、最大 30 個までの数値を指定します。引数をコンマ (,) で区切って指定する代わりに、単一配列または配列への参照を引数として使用することもできます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数として指定したデータの尖度を返します。尖度とは、対象となるデータの分布を標準分布と比較して、度数分布曲線の相対的な鋭角度または平たん度を表した数値です。尖度が正の数になる場合、度数分布曲線が相対的に鋭角になっていることを表し、負の数になる場合は、相対的に平たんになっていることを表します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>データ ポイントが 4 つより少ない場合、またはサンプルの標準偏差が 0 に等しい場合は、 <b>Kurt</b>は #DIV または 0 を返します。 エラー値です。 </para>
          <para>尖度は次のように定義されます。 </para>
          <para>図 1: 尖度方程式</para>
          <para> </para>
          <para> </para>
          <para>s は標本に基づいた標準偏差を表します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Large">
      <MemberSignature Language="C#" Value="public double Large (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Large([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Large(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Large (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Large(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16709)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">範囲: 抽出の対象となる値が入力されている配列またはデータの範囲を指定します。</param>
        <param name="Arg2">順位: 抽出する値の、大きい方から数えた順位を数値で指定します。</param>
        <summary>データ セットに k-th 最大値を返します。 相対位置に基づいて値を選択するのには、この関数を使用できます。 などは最高に戻るには、<b>大</b>、2 位、または第 3 位のスコアを使用することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>配列が空の場合は、<b>大</b>が #NUM を返します。 エラー値です。 </para>
          <para>≤ 0 または k は、データの数より大きいかどうかは次のようにポイントしている場合、<b>大</b>は、#NUM を返します。 エラー値です。</para>
          <para>n を範囲に含まれているデータ要素の数とするとき、LARGE(範囲,1) は対象となるデータの最大値を返します。また、LARGE(範囲,n) は対象となるデータの最小値を返します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Lcm">
      <MemberSignature Language="C#" Value="public double Lcm (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Lcm([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lcm(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Lcm (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16859)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1、数値 2 ...: 最小公倍数を求める数値を指定します。引数は最大 30 個まで指定できます。整数以外の値を指定すると、小数点以下が切り捨てられます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>複数の整数の最小公倍数を返します。最小公倍数とは、引数数値 1、数値 2 ... に指定されたすべての整数に共通する倍数の中で、最も小さい倍数のことです。LCM 関数は、分母の異なる分数の和を求める場合などに使用します。</summary>
        <returns>To be added.</returns>
        <remarks><para>いずれかの引数が数値以外の場合は、 <b>Lcm</b>が #VALUE を返します。 エラー値です。 </para>
          <para><b>Lcm</b>は、いずれかの引数が 0 より小さい場合、#NUM を返します。 エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LinEst">
      <MemberSignature Language="C#" Value="public object LinEst (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object LinEst([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function LinEst (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16433)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">既知の y: 既にわかっている y の値の系列で、y = mx + b という関係になります。</param>
        <param name="Arg2">既知の x: 既にわかっている x の値の系列で、y = mx + b という関係になります。</param>
        <param name="Arg3">定数: 定数 b を 0 にするかどうかを論理値で指定します。</param>
        <param name="Arg4">補正: 回帰指数曲線の補正項を追加情報として返すかどうかを、論理値で指定します。</param>
        <summary>"最小二乗法" を使って指定したデータに最もよく当てはまる直線を算出し、この直線を記述する配列を返すことによって直線の補正項を計算します。この関数では、配列の値を返すので、配列数式として入力する必要があります。</summary>
        <returns>To be added.</returns>
        <remarks><para>直線は次の演算式で表されます。</para>
          <para>y = mx + b または</para>
          <para>y = m1x1 + m2x2 + ... + b (独立変数 x の範囲が複数の場合)</para>
          <para>場所、従属変数 y は独立変数 x の関数です。 M の値は、各 x 値に対応する係数で、b は定数値です。 Y、x、および m はベクトルであることに注意してください。 <b>Linest 関数</b>を返す配列 {mn、ミネソタ-1,..., m1, b}。 <b>LinEst</b>では、追加回帰統計情報を返すこともできます。</para>
          <para>既知の y の配列が 1 つの列に入力されている場合、既知の x の各列はそれぞれ異なる変数であると見なされます。</para>
          <para>既知の y の配列が 1 つの行に入力されている場合、既知の x の各行はそれぞれ異なる変数であると見なされます。</para>
          <para>既知の x の配列には、1 つまたは複数の変数の系列を指定することができます。変数の系列が 1 つである場合、既知の y と既知の x は、両者の次元が同じであれば、どのような形の範囲であってもかまいません。変数の系列が複数である場合、既知の y は 1 行または 1 列のセル範囲でなければなりません。</para>
          <para>既知の x を省略すると、既知の y と同じサイズの {1,2,3,...} という配列を指定したと見なされます。</para>
          <para>場合定数を<b>true</b>または省略すると、b の値も計算されます。 </para>
          <para>場合定数が<b>false の場合</b>b を 0 に設定されて、m の値が y に合わせて調整されます = mx です。 </para>
          <para>統計 (stats) は、 <b>truuue</b>は、<b>配列</b>が返されます、追加回帰統計、ため、返される配列は {mn、ミネソタ-1、...、m1、b; sen と、sen と-1,..., se1, seb; r2 を予測します。F、df; ssreg、ssresid} です。 </para>
          <para>統計 (stats) は、 <b>false</b>を指定したり、省略した場合、だけ、m 係数と定数 b<b>配列</b>が返されます。 </para>
          <para>次のような回帰直線の補正項が追加情報として返されます。</para>
          <list type="table">
            <item>
              <term>se1,se2,...,sen</term>
              <description>係数 m1,m2,...,mn に対する標準誤差の値です。</description>
            </item>
            <item>
              <term>seb</term>
              <description>定数 b の標準誤差の値 (seb = #n/a は、定数が<b>false の場合</b>)。</description>
            </item>
            <item>
              <term>r2</term>
              <description>決定の係数です。 推定と実際の y 値を比較し、範囲は 0 から 1 までの値にします。 サンプルの完全な相関関係がある 1 である場合、y の予測値と実際の y の値との間の違いはありません。 他の極端な例として、決定の係数が 0 の場合回帰方程式は y の値を予測する場合に便利です。 </description>
            </item>
            <item>
              <term>sey</term>
              <description>予測される y の値に対する標準誤差です。</description>
            </item>
            <item>
              <term>F</term>
              <description>F 補正項または F 観測値です。F 補正項を利用すると、独立変数と従属変数の間で観察された関係が偶然によるものかどうかを判断できます。</description>
            </item>
            <item>
              <term>df</term>
              <description>自由度。 統計テーブルで F の臨界値を検索するための自由度を使用します。 F 補正項をテーブル内で検索する値が返されます、信頼の決定には、 <b>LinEst</b>によってモデルのレベルを比較します。 </description>
            </item>
            <item>
              <term>ssreg</term>
              <description>回帰の平方和です。</description>
            </item>
            <item>
              <term>ssresid</term>
              <description>四角形の残余合計。</description>
            </item>
          </list>
          <para>次の図では、回帰直線の追加補正項が返される順序を示します。</para>
          <para>図 1: ワークシート</para>
          <para> </para>
          <para> </para>
          <para>任意の直線の傾きと y 切片を記述することができます。 </para>
          <para>傾き (m):</para>
          <para>
M として書き込まれる多くの場合、直線の傾きを検索するに 2 つの点 (x1, y1)、行と (x2、y2)。傾きが (y2 が y1) と (x 2 - x 1)。</para>
          <para>Y 切片 (b)。</para>
          <para>
B として書き込まれる多くの場合、直線の y 切片は、直線が y 軸と交差する位置の y の値です。</para>
          <para>直線の方程式は、y = mx+b とします。 M と b の値がわかれば、y または x の値をこの方程式にケーブルを差し込んで、行の任意の点を求めることができます。 使用することも、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trend(System.Object,System.Object,System.Object,System.Object)" />関数です。</para>
          <para>独立変数 x の値が 1 つだけがある場合は、次の数式を使って、傾きと y 切片の値を取得できます。 </para>
          <para>スロープ。</para>
          <para>
=INDEX(LINEST(known_y's,known_x's),1)</para>
          <para>Y 切片:</para>
          <para>
INDEX(LINEST(既知の y, 既知の x),2)</para>
          <para><b>LineEst</b>で計算した直線の精度は、データの散布の度合いによって異なります。 直線データより正確な<b>LineEst</b>モデルです。 <b>LineEst</b>では、最小 2 乗法のメソッドを使用して、最適なデータを決定するためです。 独立変数 x の値が 1 つだけがある場合は、m と b の計算は、次の数式に基づいてください。 </para>
          <para>図 2: 数式</para>
          <para> </para>
          <para> </para>
          <para>図 3: 数式</para>
          <para> </para>
          <para> </para>
          <para>ここで、x は標本平均 AVERAGE(既知の x)、y は標本平均 AVERAGE(既知の y) です。</para>
          <para>行と曲線の調整機能の<b>LineEst</b>と<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogEst(System.Object,System.Object,System.Object,System.Object)" />直線または、データに適合する指数曲線を計算できます。 ただし、データに適合する 2 つの最適な結果を決定する必要があります。 指数曲線の直線、または拡張 (既知の y, 既知の x) の直線を求めることができます。 新しい x の引数がない場合、これらの関数は、直線または曲線は、実際のデータ ポイントの上に予測される y の値の配列を返します。 予測値と実際の値を比較できます。 比較の両方のグラフを作成することがあります。 </para>
          <para>回帰分析では、Microsoft Excel は、予測される y の値と実際の y の値との間の平方差をポイントごとに計算します。 これらの平方差の合計は、残余の平方和、ssresid 和と呼ばれます。 Microsoft Excel では、正方形、総平方和の合計が計算されます。 定数 = <b>true</b>、または、省略すると、平方和の合計は、実際の y の値と y の値の平均値の平方差の合計。 定数 = <b>false</b>、平方和の合計は、(個々 の y の値から y の平均値を減算する) ことがなく実際の y の値の平方和の合計です。 回帰平方和、ssreg を参照して、: ssreg = 総平方和 - ssresid。 残余の平方和を総平方和を比較が小さいほど、決定、r2 は、回帰分析で得られたどれだけの方程式の指標となる係数の値説明間の関係が大きいほど、変数です。 ssreg/総平方和を r2 に相当します。 </para>
          <para>場合によっては、1 つまたは複数の X 列の (を想定しています Y と X の列には) その他の X 列が存在する場合の他の予測値がない可能性があります。 つまり、X 列が 1 つまたは複数を排除することが生じることが均等に正確な予測される Y の値にします。 その場合は列 X 冗長回帰モデルから省略する必要があります。 この現象と呼ばれます場合は、「冗長な X 列は冗長な X 列の倍数の和として表すことができます。 <b>LinEst</b>は、共線性をチェックし、それらを識別するときに冗長な X 列を回帰モデルから削除します。 削除された X 列は、 <b>LinEst</b>出力の係数を 0 と se を 0 として識別できます。 1 つまたは複数の列が冗長として削除されると、し、df が影響を受けます df は、予測のために実際に使用されている列の X の数に依存するためです。 に df が変更された場合は、冗長な X 列が削除されると、sey の値 F にも影響し、。 共線性をまれにする必要があります。 ただしである可能性が高いが発生する唯一の 0 と 1 に冗長な x 列が含まれている場合は、1 つのケースは、実験の件名は、かどうかの指標としてのまたは特定のグループのメンバーではありません。 定数 = <b>true</b>または省略すると、 <b>LinEst</b>が効果的に挿入、追加の X 切片をモデル化する 1 のすべての列。 各対象者、またはそうでない場合は 0 と 1 列があるし、列 (メス)、または 0 の場合は、各件名のない場合は、この後者の列もある場合は冗長なエントリは、「男性インジケーター」のエントリを引いてから入手できます。列 1 のすべての他の列内のエントリからは、 <b>LineEst</b>で追加されます。 </para>
          <para>共線性が原因でモデルから削除される X 列がない場合、df が次のように計算されます: 既知の x の k 列がある場合、const = <b>true</b>または省略すると、し、df = n – k – 1 です。 定数 = <b>false</b>は、df = n の k です。 どちらの場合も、各列が共線性のため削除 X df 1 ずつ増えています。 </para>
          <para>計算結果が配列となる数式は、配列数式として入力する必要があります。 引数として known_x など配列定数を入力するときは、コンマを使用して、同じ行と同じセミコロンの値を区切る。 区切り文字は、[地域と言語のオプション コントロール パネルのロケール設定によって異なる場合があります。 </para>
          <para>回帰演算式によって予測計算された y の値は、演算式を決定するときに使用した y の値の範囲外では、有効な値にならない場合があります。 <b>LinEst</b>関数で使用される基になるアルゴリズムで使用されている基になるアルゴリズムとは異なる、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" />と<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" />の関数です。 データが不定で共線性と、これらのアルゴリズムの違いは異なる結果につながります。 たとえば、既知の y 引数のデータ要素が 0、既知の x 引数のデータ要素が 1 の場合。 </para>
          <para>
            <b>LineEst</b>は、0 の値を返します。 <b>LinEst</b>のアルゴリズムは、共線性のデータに対して適切な結果を返すように設計されていて、ここで少なくとも 1 つの解が求められます。 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /><see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> #DIV または 0 を返します。 エラーを返します。 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" />と<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" />のアルゴリズムは、1 つの答えを探すように設計されていて、ここですることができます複数の回答です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ln">
      <MemberSignature Language="C#" Value="public double Ln (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ln([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ln(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ln (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ln(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16406)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 自然対数を求める正の実数を指定します。</param>
        <summary>数値の自然対数を返します。自然対数とは、定数 e (2.71828182845904) を底とする対数のことです。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Ln</b>は、EXP 関数の逆関数です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public double Log (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Log([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Log(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Log (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16493)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 対数を求める正の実数を指定します。</param>
        <param name="Arg2">底: 対数の底を指定します。底を省略すると、10 を指定したと見なされます。</param>
        <summary>指定された数を底とする数値の対数を返します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public double Log10 (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Log10([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Log10(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Log10 (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Log10(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16407)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 10 を底とする対数 (常用対数) を求める正の実数を指定します。</param>
        <summary>数値の底が 10 の対数を返します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogEst">
      <MemberSignature Language="C#" Value="public object LogEst (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object LogEst([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogEst(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogEst (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16435)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">既知の y: 既にわかっている y の値の系列で、y = b*m^x という関係が成り立ちます。</param>
        <param name="Arg2">既知の x: 既にわかっている x の値の系列で、y = b*m^x という関係になります。この引数は省略してもかまいません。</param>
        <param name="Arg3">定数: 定数 b を 1 にするかどうかを論理値で指定します。</param>
        <param name="Arg4">補正: 回帰指数曲線の補正項を追加情報として返すかどうかを、論理値で指定します。</param>
        <summary>回帰分析では、データに適合する指数曲線を計算し、この曲線を表す値の配列を返します。この関数は値の配列を返すため、配列数式として入力する必要があります。</summary>
        <returns>To be added.</returns>
        <remarks><para>指数曲線は次の演算式で表されます。</para>
          <para>y = b*m^x または</para>
          <para>y = (b *(m1^x1)*(m2^x2)*_) (x の値が複数ある場合)</para>
          <para>場所、従属変数 y は独立変数 x の関数です。 M の値は、各指数の x の値に対応する底で、b は定数値です。 Y、x、および m はベクトルであることに注意してください。 <b>LogEst</b>を返す配列 {mn、ミネソタ-1,..., m1, b}。</para>
          <para>既知の y の配列が 1 つの列に入力されている場合、既知の x の各列はそれぞれ異なる変数であると見なされます。</para>
          <para>既知の y の配列が 1 つの行に入力されている場合、既知の x の各行はそれぞれ異なる変数であると見なされます。</para>
          <para>既知の x の配列には、1 つまたは複数の変数の系列を指定することができます。変数の系列が 1 つだけの場合、既知の y と既知の x は、双方の次元が同じである限り、どのような形の範囲でも指定できます。複数の変数を使用する場合、既知の y はセル範囲 (1 行または 1 列の範囲で、ベクトル範囲とも呼ばれます) である必要があります。</para>
          <para>既知の x を省略すると、既知の y と同じサイズの {1,2,3,...} という配列を指定したと見なされます。</para>
          <para>場合定数を<b>true</b>または省略すると、b の値も計算されます。</para>
          <para>場合定数が<b>false の場合</b>b を 1 に、設定、および y m の値が調整 = m ^ x です。</para>
          <para><b>統計 (stats) が<b>true</b>の場合は、返されます、追加回帰統計、ため、返される配列は</b>{mn、ミネソタ-1、...、m1、b; sen と、sen と-1,..., se1, seb; r 2 を予測します。F、df; ssreg、ssresid} です。 </para>
          <para><b>統計 (stats) は、 <b>false</b>を指定したり、省略すると場合、のみ、m 係数と定数 b 返されます。</b> </para>
          <para>追加回帰統計の詳細についてを参照してください<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />。</para>
          <para>プロット データを指数曲線に近づけば、ほどの計算された行がデータに適合します。 ように<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />、 <b>logest 関数</b>は、値間の関係を記述する値の配列を返しますが、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> 、データを直線に対応<b>LogEst</b>では、指数曲線に適合します。 詳細については、「<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />」をご覧ください。 </para>
          <para>独立変数 x の値が 1 つだけがある場合は、ときに、次の数式を使用して直接 y 切片 (b) の値を取得できます。 </para>
          <para>Y 切片 (b)。</para>
          <para>
INDEX(LOGEST(known_y's,known_x's),2)</para>
          <para>Y を使用することができます = b * m ^ x、y の値を予測する数式 Excel に用意されていますが、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" />にこの操作を実行する関数。 詳細については、「<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" />」をご覧ください。</para>
          <para>計算結果が配列となる数式は、配列数式として入力する必要があります。</para>
          <para>既知の x のような引数に配列定数を指定するとき、同じ行の値を区切るには半角のコンマ (,) を使い、各行を区切るには半角のセミコロン (;) を使います。なお、区切り文字は、コントロール パネルの [地域と言語のオプション] のロケール設定によって異なる場合があります。</para>
          <para>回帰方程式によって予測計算された y の値は、方程式を決定するときに使用した y の値の範囲外では、適切な値にならない場合があります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogInv">
      <MemberSignature Language="C#" Value="public double LogInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16675)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">確率: 対数正規型分布に伴う確率を指定します。</param>
        <param name="Arg2">平均: ln(x) の平均値を指定します。</param>
        <param name="Arg3">標準偏差: ln(x) の標準偏差を指定します。</param>
        <summary>対数正規型分布は、対数的に変換されたデータを分析する場合に使用します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Inv(System.Double,System.Double,System.Double)" />メソッドです。</para>
          <para>いずれかの引数が数値以外の場合、 <b>LogInv</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>場合確率&lt;= 0、または確率&gt;= 1、 <b>LogInv</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合標準偏差&lt;= 0、 <b>LogInv</b>が #NUM を返します。 エラー値です。 </para>
          <para>対数正規型分布関数の逆関数は、次の数式で表されます。 </para>
          <para>対数正規型分布関数の逆関数の値は、図 1:</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNorm_Dist">
      <MemberSignature Language="C#" Value="public double LogNorm_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNorm_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNorm_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNorm_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16920)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 関数に代入する値を指定します。</param>
        <param name="Arg2">平均: ln(x) の平均値を指定します。</param>
        <param name="Arg3">標準偏差: ln(x) の標準偏差を指定します。</param>
        <param name="Arg4">関数形式の関数の形式を決定する論理値です。 場合<b>は累積的な</b> <b>LogNorm_Dist</b>は累積分布関数の値を返します。かどうかは<b>false</b>を返します確率密度関数です。</param>
        <summary>x の対数正規分布の確率を返します。ln(x) は、平均と標準偏差を引数にする正規型分布になります。この関数は、対数的に変換されたデータを分析する場合に使用します。</summary>
        <returns>To be added.</returns>
        <remarks><para>いずれかの引数が数値以外の場合は、 <b>LogNorm_Dist</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>X ≤ 0 または標準偏差 ≤ 0、 <b>LogNorm_Dist</b>が #NUM を返す場合。 エラー値です。 </para>
          <para>対数正規累積分布関数は、次の数式で表されます。 </para>
          <para>対数正規累積分布の数式を図 1:</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNorm_Inv">
      <MemberSignature Language="C#" Value="public double LogNorm_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNorm_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNorm_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNorm_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16921)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">確率: 対数正規型分布に伴う確率を指定します。</param>
        <param name="Arg2">平均: ln(x) の平均値を指定します。</param>
        <param name="Arg3">標準偏差: ln(x) の標準偏差を指定します。</param>
        <summary>対数正規型の累積分布関数の逆関数を返します。対数正規型分布は、対数的に変換されたデータを分析する場合に使用します。</summary>
        <returns>To be added.</returns>
        <remarks><para>いずれかの引数が数値以外の場合は、 <b>LogNorm_Inv</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>場合確率&lt;= 0、または確率&gt;= 1、 <b>LogNorm_Inv</b> #NUM を返します。 エラー値です。 </para>
          <para>場合標準偏差&lt;= 0、 <b>LogNorm_Inv</b> #NUM を返します。 エラー値です。 </para>
          <para>対数正規型分布関数の逆関数は、次の数式で表されます。 </para>
          <para>対数正規型分布関数の逆関数の値は、図 1:</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNormDist">
      <MemberSignature Language="C#" Value="public double LogNormDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNormDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNormDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNormDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNormDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16674)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 関数に代入する値を指定します。</param>
        <param name="Arg2">平均: ln(x) の平均値を指定します。</param>
        <param name="Arg3">標準偏差: ln(x) の標準偏差を指定します。</param>
        <summary>x の対数正規分布の累積分布関数の値を返します。ln(x) は、引数平均と標準偏差による正規型分布です。この関数は、対数的に変換されたデータを分析する場合に使用します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Dist(System.Double,System.Double,System.Double,System.Boolean)" />メソッドです。</para>
          <para>いずれかの引数が数値以外の場合は、 <b>LogNormDist</b>が #VALUE を返します。 エラー値です。 </para>
          <para>X ≤ 0 または標準偏差 ≤ 0、 <b>LogNormDist</b>が #NUM を返す場合。 エラー値です。 </para>
          <para>対数正規累積分布関数は、次の数式で表されます。 </para>
          <para>対数正規累積分布の数式を図 1:</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Lookup">
      <MemberSignature Language="C#" Value="public object Lookup (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Lookup([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lookup(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Lookup (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16412)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">検査値の<b>最初のベクターで検索</b>する値です。 検査値は、数値、テキスト、論理値、名前または値を参照する参照することができます。</param>
        <param name="Arg2">検査範囲または配列: ベクトル形式では、1 行または 1 列のみのセル範囲を指定します。検査範囲には、文字列、数値、または論理値を指定できます。配列形式では、検査値と比較する文字列、数値、または論理値を含むセル範囲を指定します。</param>
        <param name="Arg3">対応範囲: ベクトル形式でのみ使用します。1 行または 1 列のみの範囲を指定します。対応範囲は検査範囲と同じサイズあることが必要です。</param>
        <summary>1 行または 1 列のみのセル範囲、または配列に含まれる値を返します。LOOKUP 関数には、ベクトル形式と配列形式の 2 つの構文形式があります。</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>1 行または 1 列のみのセル範囲 (ベクトル) を検査範囲として検査値を検索し、検査値が見つかると、セル範囲の次の行または列の同じ位置にある値を返す</term>
              <description>ベクトル形式</description>
              <description>ベクトル形式の LOOKUP 関数を使用するのは、検索する値のリストが大きい場合や、値が経時変化する場合です。</description>
            </item>
            <item>
              <term>配列の先頭行または先頭列で、指定された値を検索し、検査値が見つかると、配列の最終行または最終列の同じ位置の値を返す</term>
              <description>配列形式</description>
              <description>配列形式の LOOKUP 関数を使用するのは、検索する値のリストが小さい場合や、値が経時変化しない場合です。</description>
            </item>
          </list>
          <para>
            <b>注</b>: 7 つ以上の条件のテストの IF 関数の代わりに、 <b>Lookup</b>関数を使用することもできます。 配列形式の例を参照してください。</para>
          <para>ベクトル形式</para>
          <para>ベクトルとは、1 つだけの行または 1 列の範囲です。 ベクトル形式の<b>lookup 関数</b>は、値の 1 行または 1 列範囲 (ベクトルと呼ばれます) の検索し、2 つ目の 1 行または 1 列の範囲内の同じ位置から値を返します。 一致する値を含む範囲を指定するときは、この形式の<b>Lookup</b>関数を使用します。 その他の形式の<b>lookup 関数</b>は、最初の列または行を自動的に検索します。</para>
          <para>
            <b>重要</b>: 検査範囲内の値を昇順で配置しなければなりません。.、-2、-1、0、1、2、...、A ~ Z, <b>false</b>, <b>true を指定</b>します。それ以外の場合、<b>参照</b>では、正しい値が得られない場合がします。 大文字と小文字のテキストは、同じです。</para>
          <para>検査値が見つからない場合は、検査範囲に含まれている検査値以下の最大の値が使用されます。</para>
          <para>検査値が検査範囲の最小値より小さい場合は、<b>ルックアップ</b>は、#N/A エラー値を使用できます。</para>
          <para>配列形式</para>
          <para>配列形式の<b>lookup 関数</b>では、最初の行または列の指定された値の配列の検索し、最後の行または列の配列の同じ位置から値を返します。 最初の行または列の配列は、一致する値がある場合は、この形式の<b>lookup 関数</b>を使用します。 列または行の場所を指定するときに、他の形式の<b>lookup 関数</b>を使用します。</para>
          <para>
            <b>ヒント</b>: 一般を使用して、最善の方法が、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" />または<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" />配列形式の<b>lookup 関数</b>ではなく関数です。 この形式の<b>lookup 関数</b>は、ほかのスプレッドシート プログラムとの互換性のため提供されています。</para>
          <para><b>検査値が見つからない</b>場合は、検査値と等しいかそれより小さい値である配列の最大値を使用します。</para>
          <para><b>検査値が先頭行または先頭列配列の次元) の最小値より小さい場合は、エラー値 #n/a が返されます。</b></para>
          <para>配列形式の<b>lookup 関数</b>では、非常のような<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" />と<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" />の関数です。 違いは、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" />最初の行で検査値を検索<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" />では、最初の列を検索し、<b>配列の次元に応じて検索</b>します。</para>
          <para>配列の場合は高さ (行数より列)、<b>最初の行で検査値が検索</b>されます。</para>
          <para>配列が正方形または高さよりも大きい場合は、全体 (列数より行数)、<b>最初の列で検索</b>します。</para>
          <para><see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" />と<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" />、下または横方向には、インデックスを作成できますが、<b>参照</b>は常に行または列内の最後の値を選択します。</para>
          <para>
            <b>重要</b>: 昇順で配列内の値を配置する必要があります:...、-2、-1、0、1, 2,..., A ~ Z, <b>false</b>, <b>true を指定</b>します。それ以外の場合、<b>参照</b>では、正しい値が得られない場合がします。 大文字と小文字のテキストは、同じです。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public double Match (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Match([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Match(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Match (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16448)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">検査値: 表の中で必要な項目を検索するために使用する値を指定します。</param>
        <param name="Arg2">検査範囲: 検査値を含む隣接したセル範囲を指定します。検査範囲は、配列または配列に対するセル参照を指定してもかまいません。</param>
        <param name="Arg3">照合の型: -1、0、1 の数値のいずれかを指定します。照合の型には、検査範囲の中で検査値を探す方法を指定します。</param>
        <summary>指定された順序で指定された値と一致する配列内の項目の相対位置を返します。 <b>一致</b>を使用して、いずれかではなく、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lookup(System.Object,System.Object,System.Object)" />項目そのものではなく範囲内の項目の位置を作成する必要があるときに機能します。</summary>
        <returns>To be added.</returns>
        <remarks><para>検査値は、検査範囲に一致する値です。 などの電話番号帳で他のユーザーの数を確認するときに参照の値として、人の名前を使用しているが、電話番号は、目的の値。</para>
          <para>検査値には、数値、文字列、論理値、またはこれらの値に対するセル参照を指定できます。</para>
          <para>照合の型が 1 の場合<b>と</b>は、検査値以下の最大値を検索します。 昇順で並べ替えておく必要があります:...-2、-1、0、1、2、...、A ~ Z, <b>false</b>, <b>true を指定</b>します。</para>
          <para>照合の型が 0 の場合は、<b>一致するもの</b>は、検査値に等しい最初の値を検索します。 任意の順序で検査ができます。</para>
          <para>照合の型が-1 の場合<b>と</b>は、検査値以上の最小の値を検索します。 降順に並べ替えておく必要があります<b>true</b>、 <b>false</b>、Z は、.。2、1、0、-1、-2、...、およびようにします。照合の型を省略した場合は 1 であると見なされます。</para>
          <para>
            <b>一致するもの</b>では、値自体ではなく、検査範囲内で一致する値の位置を返します。 たとえば、MATCH("b",{"a","b","c"},0) は、2、{"a""b"、"c"} の配列内には、"b"の相対的な位置を返します。 </para>
          <para>
            <b>一致するもの</b>では、このテキスト値に一致するときは、大文字と小文字の文字が区別されません。 </para>
          <para><b>一致</b>一致の検索に失敗した場合、#N/A エラー値を返します。 </para>
          <para>検索の型が 0 で、検索値が文字列の場合、半角の疑問符 (?) または半角のアスタリスク (*) をワイルドカード文字として使用することができます。ワイルドカード文字の疑問符は任意の 1 文字を表し、アスタリスクは任意の文字列を表します。ワイルドカード文字ではなく、通常の文字として疑問符やアスタリスクを検索する場合は、その文字の前に、"~*" のように半角のチルダ (~) を付けます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public double Max (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Max([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Max (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16391)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1、数値 2 ...: 最大の数値を見つけるため、1 ～ 30 個までの数値を指定することができます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数リストに含まれる最大の数値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数に配列またはセル範囲の参照を指定した場合、その中に含まれる数値だけが計算の対象となります。配列やセル範囲に含まれる空白セル、論理値、または文字列はすべて無視されます。</para>
          <para>引数に数値が含まれない場合、<b>最大値</b>は 0 (ゼロ) を返します。 </para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>セル参照に計算の一部として論理値や数値を表す文字列を含める場合を使用して、<see cref="MAXA" />関数です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MDeterm">
      <MemberSignature Language="C#" Value="public double MDeterm (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MDeterm([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MDeterm(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MDeterm (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MDeterm(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16547)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列: 行数と列数が等しい数値配列 (正方行列) を指定します。</param>
        <summary>配列の行列式を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>たとえば、a1: c3 のセル範囲、配列を指定することができます。配列定数として次のように {1,2,3; 4,5,6; 7,8,9} です。またはこれらのいずれかの名前として。<b>MDeterm</b>は、#VALUE を返します。 エラーとします。 </para>
          <para>配列に空白または文字列が含まれるセルがある。</para>
          <para>配列の行数と列数が等しくない。</para>
          <para>配列のサイズが 73 列、73 行を超える。</para>
          <para>行列式は、配列内の値から派生した数です。 3 つの行と 3 列配列で、a1: c3 の行列式として定義されます。 </para>
          <code>MDETERM(A1:C3)</code>
          <para>と等しい</para>
          <code>A1*(B2*C3-B3*C2) + A2*(B3*C1-B1*C3) + A3*(B1*C2-B2*C1)</code>
          <para>行列式は、一般に、多変数の連立方程式を解くために使用されます。</para>
          <para>
            <b>MDeterm</b>は、約 16 計算が完了しないと、小さな数値エラーの先頭の桁の精度で計算されます。 たとえば、1E 16 でゼロから特異な行列の行列式が異なる場合があります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MDuration">
      <MemberSignature Language="C#" Value="public double MDuration (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MDuration([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MDuration(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MDuration (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16843)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">利率: 証券の年利を指定します。</param>
        <param name="Arg4">利回り: 証券の年間配当を指定します。</param>
        <param name="Arg5">頻度: 年間の利息支払回数を指定します。年 1 回の場合は頻度 = 1、年 2 回の場合は頻度 = 2、四半期ごとの場合は頻度 = 4 を指定します。</param>
        <param name="Arg6">基準: 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>額面価格を $100 と仮定して、証券に対する修正マコーレー デュレーションを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: DATE 関数を使用するか、他の数式または関数の結果として、日付を入力する必要があります。 たとえば、2008 年 5 月 23 日の DATE(2008,5,23) を使用します。 日付をテキストとして入力した場合、問題が発生することができます。</para>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 30 年後に当たる 2038 年 1 月 1 日になります。</para>
          <para>受渡日、満期日、頻度、基準に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para><b>受領または成熟度が有効な日付でない場合、#VALUE を!</b> エラー値です。 </para>
          <para>場合利回り&lt;0 またはクーポン&lt;0、<b>指定</b>が #NUM を返します。 エラー値です。 </para>
          <para>頻度が 1、2、または 4 以外の数値の場合は、<b>指定</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合に&lt;0 または基準&gt;4 では、<b>指定</b>が #NUM を返す! エラー値です。 </para>
          <para>場合は受領成熟度、<b>指定</b>が #NUM を返します。 エラー値です。 </para>
          <para>修正デュレーションは、次の演算式で表されます。 </para>
          <para>修正デュレーションの式を図 1:</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Median">
      <MemberSignature Language="C#" Value="public double Median (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Median([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Median (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16611)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1、数値 2 ...: メジアンを計算するため、1 個から 30 個までの数値を指定することができます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数リストに含まれる数値のメジアン (中央値) を返します。メジアンとは、引数リストの数値を小さいものから大きなものに順に並べたとき、その中央にくる数値のことです。</summary>
        <returns>To be added.</returns>
        <remarks><para>集合内の数値の数は偶数である場合、<b>中央値</b>は中央の 2 つの数値の平均を計算します。 2 番目の数式の例を参照してください。</para>
          <para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>
            <b>注</b>: <b>Median</b>関数中心傾向、統計的分布における数値グループの中央の場所であります。 中心傾向を表す指標は、3 つ。</para>
          <list type="bullet">
            <item>
              <description>平均 演算によって求める平均値であり、グループの各数値を加算してそれらの数値の個数で割ることにより計算します。たとえば、2、3、3、5、7、および 10 の平均は、30 を 6 で割った商、つまり 5 です。</description>
            </item>
            <item>
              <description>メジアン 数値のグループの中で中央に当たる数値であり、メジアンより大きい数値と小さい数値の個数が半々になります。たとえば、2、3、3、5、7、および 10 のメジアンは 4 です。</description>
            </item>
            <item>
              <description>モード 数値のグループの中で、最も頻出する数値です。たとえば、2、3、3、5、7、および 10 のモードは 3 です。</description>
            </item>
          </list>
          <para>数値のグループが対称分布の場合には、これら 3 つの中心傾向の測度の値は同じになります。数値のグループが非対称分布の場合には、値が異なることがあります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public double Min (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Min([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Min (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16390)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1、数値 2 ...: 最小の数値を見つけるため、1 ～ 30 個までの数値を指定することができます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数リストに含まれる最小の数値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数に配列またはセル範囲の参照を指定した場合、その中に含まれる数値だけが計算の対象となります。配列やセル範囲に含まれる空白セル、論理値、または文字列はすべて無視されます。</para>
          <para>引数に数値が含まれない場合、<b>最小値</b>は 0 を返します。 </para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>セル参照に計算の一部として論理値や数値を表す文字列を含める場合は、MINA 関数を使用します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MInverse">
      <MemberSignature Language="C#" Value="public object MInverse (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MInverse([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MInverse(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MInverse (Arg1 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MInverse(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16548)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列: 行数と列数が等しい数値配列 (正方行列) を指定します。</param>
        <summary>行列の逆行列を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>配列に指定できる最大サイズは、52 列掛ける 52 行です。このサイズを超える場合、エラー値 #VALUE! が返されます。</para>
          <para>配列には、A1:C3 のようなセル範囲、{1,2,3;4,5,6;7,8,9} のような配列定数、またはこのどちらかを参照する名前を指定することができます。</para>
          <para><b>MInverse</b>は、配列内の任意のセルまたはテキストが含まれている、#VALUE を返します。 エラー値です。 </para>
          <para>
            <b>MInverse</b>は、また、#VALUE を返します。 配列が同じ数の行と列を持っていない場合は、エラー値です。 </para>
          <para>計算結果が配列となる数式は、配列数式として入力する必要があります。</para>
          <para>逆行列は、行列式と同様に、多変数の連立方程式を解くために使用されます。行列とその逆行列の積は、単位行列 (右下がりの対角線上にある成分の値がすべて 1 で、その他の成分がすべて 0 であるような正方行列) となります。</para>
          <para>2 行 2 列の行列がどのように計算されるかを示します。セル範囲 A1:B2 にはそれぞれ a、b、c、d という数値が含まれているとします。次の表は、行列 A1:B2 の逆行列を示しています。</para>
          <list type="table">
            <item>
              <term>行 1</term>
              <description>d/(a*d-b*c)</description>
              <description>b/(b*c-a*d)</description>
            </item>
            <item>
              <term>行 2</term>
              <description>c/(b*c-a*d)</description>
              <description>a/(a*d-b*c)</description>
            </item>
          </list>
          <para>
            <b>MInverse</b>は、約 16、キャンセルが完了しないと、小さな数値エラーの先頭の桁の精度で計算されます。 </para>
          <para>いくつかの正方行列は反転することはできませんし、#NUM を返します。 エラー値が<b>返されます</b>。 逆行行列の行列式は 0 です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MIrr">
      <MemberSignature Language="C#" Value="public double MIrr (object Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MIrr([in]object Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MIrr(System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function MIrr (Arg1 As Object, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MIrr(System::Object ^ Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16445)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">範囲: 数値を含む配列またはセル参照を指定します。これらの数値は、定期的に発生する一連の支払い (負の値) と収益 (正の値) に対応します。</param>
        <param name="Arg2">安全利率: 支払額 (負のキャッシュ フロー) に対する利率を指定します。</param>
        <param name="Arg3">危険利率: 収益額 (正のキャッシュ フロー) に対する利率を指定します。</param>
        <summary>一連の定期的なキャッシュ フローに基づいて、修正内部利益率を返します。MIRR 関数では、投資原価と現金の再投資に対する受取利率 (危険利率) の両方が考慮されます。</summary>
        <returns>To be added.</returns>
        <remarks><para>値は、1 つ以上の正の値と変更された内部利益率を計算する 1 つの負の値を含める必要があります。 それ以外の場合、 <b>MIrr</b> #DIV または 0 を返します。 エラー値です。 </para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>
            <b>MIrr</b>は、キャッシュ フローの順序を解釈するために、値の順序を使用します。 シーケンスでは正しい記号 (正の値、収益額、支払額は負の値) での支払いと収入値を入力することを確認します。 </para>
          <para>N はキャッシュ フローの数、frate、利率、rrate では、利率、 <b>MIrr</b>の数式です。 </para>
          <para>MIrr メソッドの図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MMult">
      <MemberSignature Language="C#" Value="public object MMult (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MMult([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MMult(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MMult (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MMult(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16549)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列 1、配列 2: 行列積を求める 2 つの配列を指定します。</param>
        <param name="Arg2">配列 1、配列 2: 行列積を求める 2 つの配列を指定します。</param>
        <summary>2 つの配列の行列積を返します。計算結果は、行数が配列 1 と同じで、列数が配列 2 と同じ配列になります。</summary>
        <returns>To be added.</returns>
        <remarks><para>配列 1 の列数は、配列 2 の行数と等しい必要があります。また、両方の配列には数値だけが含まれている必要があります。</para>
          <para>配列 1、配列 2 には、セル範囲、配列定数、またはその参照を指定します。</para>
          <para>
            <b>づれ</b>が #VALUE を返します。 エラーとします。 </para>
          <para>いずれかのセルが空白であるか、文字列が含まれている。</para>
          <para>配列 1 の列数が配列 2 の行数と異なる。</para>
          <para>計算結果の配列が合計 5,461 セル以上になる。</para>
          <para>2 つの配列 b、c の行列積である配列 a は次のように定義されます。 </para>
          <para>図 1: 行列積である配列の 2 つの配列 b、c の</para>
          <para> </para>
          <para> </para>
          <para>ここでは、i = 行数、j = 列数を示します。</para>
          <para>計算結果が配列となる数式は、配列数式として入力する必要があります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public double Mode (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Mode([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16714)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1、数値 2 ...: 計算の対象となる最大 30 個までの引数を指定できます。また、半角のコンマ (,) で区切られた数値の代わりに、配列またはセル範囲を指定することもできます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>配列またはセル範囲として指定されたデータの中で、最も頻繁に出現する値 (最頻値) を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>正確さの向上を提供することがあり、名前がその使用方法をより効果的に反映 1 つまたは複数の新しい関数を使用して、この関数は交換済み。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Sngl(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />と<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Mult(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />の方法です。</para>
          <para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>データ セットに重複するデータ ポイントが含まれていない場合、<b>モード</b>は、エラー値 #n/a を返します。</para>
          <para>
            <b>注</b>:<b>モード</b>関数メジャー中心的な傾向、統計的分布における数値グループの中央の場所であります。 中心傾向を表す指標は、3 つ。</para>
          <list type="bullet">
            <item>
              <description>平均 演算によって求める平均値であり、グループの各数値を加算してそれらの数値の個数で割ることにより計算します。たとえば、2、3、3、5、7、および 10 の平均は、30 を 6 で割った商、つまり 5 です。</description>
            </item>
            <item>
              <description>メジアン 数値のグループの中で中央に当たる数値であり、メジアンより大きい数値と小さい数値の個数が半々になります。たとえば、2、3、3、5、7、および 10 のメジアンは 4 です。</description>
            </item>
            <item>
              <description>モード 数値のグループの中で、最も頻出する数値です。たとえば、2、3、3、5、7、および 10 のモードは 3 です。</description>
            </item>
          </list>
          <para>数値のグループが対称分布の場合には、これら 3 つの中心傾向の測度の値は同じになります。数値のグループが非対称分布の場合には、値が異なることがあります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode_Mult">
      <MemberSignature Language="C#" Value="public object Mode_Mult (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Mode_Mult([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Mult(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode_Mult (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16881)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1: 計算の対象となる最初の引数の数値を指定します。</param>
        <param name="Arg2">数値 2 ～ 数値 30: 計算の対象となる 2 番目から 30 番目までの引数の数値を指定します。また、半角のコンマ (,) で区切られた数値の代わりに、配列またはセル範囲を指定することもできます。</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>配列またはセル範囲として指定されたデータの中で、最も頻繁に出現する値 (最頻値) の垂直配列を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>データ セットに重複するデータ ポイントが含まれていない場合、 <b>Mode_Mult</b>は、エラー値 #n/a を返します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode_Sngl">
      <MemberSignature Language="C#" Value="public double Mode_Sngl (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Mode_Sngl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Sngl(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode_Sngl (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16882)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1、数値 2 ...: 計算の対象となる引数を最大 30 個まで指定します。また、半角のコンマ (,) で区切られた数値の代わりに、配列またはセル範囲を指定することもできます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>配列またはセル範囲として指定されたデータの中で、最も頻繁に出現する値 (最頻値) を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>データ セットに重複するデータ ポイントが含まれていない場合、 <b>Mode_Sngl</b>は、エラー値 #n/a を返します。</para>
          <para>
            <b>注</b>: <b>Mode_Sngl</b>関数での中心傾向の統計的分布における数値グループの中央の場所であります。 中心傾向を表す指標は、3 つ。</para>
          <list type="bullet">
            <item>
              <description>平均 算術平均です。数値グループを加算した値を、さらに、数値の個数で割ることによって求められます。たとえば、2、3、3、5、7、10 という数値グループがあった場合、30 を 6 で割った 5 が平均値となります。</description>
            </item>
            <item>
              <description>メジアン 数値のグループの中で中央に当たる数値であり、メジアンより大きい数値と小さい数値の個数が半々になります。たとえば、2、3、3、5、7、10 のメジアンは 4 になります。</description>
            </item>
            <item>
              <description>モード 数値グループの中で最も頻繁に出現する数値のことです。たとえば、2、3、3、5、7、10 のモードは 3 になります。</description>
            </item>
          </list>
          <para>数値のグループが対称分布の場合には、これら 3 つの中心傾向の測度の値は同じになります。数値のグループが非対称分布の場合には、値が異なることがあります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MRound">
      <MemberSignature Language="C#" Value="public double MRound (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MRound([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MRound(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MRound (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MRound(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16806)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 切り上げの対象となる数値を指定します。</param>
        <param name="Arg2">倍数: 四捨五入した数値が、その倍数となるような数値を指定します。つまり、倍数は、四捨五入した数値の約数になります。</param>
        <summary>指定された値の倍数になるように、数値を四捨五入します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>倍数</b>に丸め、ゼロでは、複数の数値を除算した剰余が倍数の半分の値以上である場合。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiNomial">
      <MemberSignature Language="C#" Value="public double MultiNomial (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MultiNomial([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MultiNomial(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MultiNomial (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16858)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1、数値 2 ...: 計算の対象となる数値を最大 29 個まで指定できます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>指定された数値の和の階乗と、指定された数値の階乗の積との比を返します。つまり、多項係数を求めます。</summary>
        <returns>To be added.</returns>
        <remarks><para>いずれかの引数が数値以外の場合は、<b>数値</b>が #VALUE を返します。 エラー値です。 </para>
          <para><b>数値</b>は、いずれかの引数が 0 より小さい場合、#NUM を返します。 エラー値です。 </para>
          <para>多項係数の計算は次のように定義されています。 </para>
          <para>数値メソッドの図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Munit">
      <MemberSignature Language="C#" Value="public object Munit (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Munit([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Munit(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Munit (Arg1 As Double) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Munit(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16966)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">求める単位行列の次元を指定する整数。</param>
        <summary>指定された次元の単位行列を返します。</summary>
        <returns><b>VARIANT</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NegBinom_Dist">
      <MemberSignature Language="C#" Value="public double NegBinom_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NegBinom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinom_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function NegBinom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NegBinom_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16922)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">失敗数: 試行が失敗する回数を指定します。</param>
        <param name="Arg2">成功数: 分析のしきい値となる、試行が成功する回数を指定します。</param>
        <param name="Arg3">成功率: 試行が成功する確率を指定します。</param>
        <param name="Arg4">関数形式の関数の形式を決定する論理値です。 場合<b>は累積的な</b> <b>NegBinom_Dist</b>は累積分布関数の値を返します。かどうかは<b>false</b>を返します確率密度関数です。</param>
        <summary>負の二項分布を返します。 <b>NegBinom_Dist</b>がある、成功、成功する前に指定した回数失敗、成功の確率が成功する確率を返します。 この関数は、成功数は固定であり、試行の回数は、変数が二項分布と似ています。 、二項分布のような試行は独立するいると見なされます。</summary>
        <returns>To be added.</returns>
        <remarks><para>など優れるリフレックスで 10 人を検索する必要があり、応募者がこれらの資格を持っている確率は 0.3 をことがわかっています。 <b>NegBinom_Dist</b>では、面接する候補者の不適切な数 10 個すべての修飾された候補者を見つける前に確率を計算します。 </para>
          <para>失敗数、成功数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>いずれかの引数が数値以外の場合は、 <b>NegBinom_Dist</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>場合成功率&lt;0 または確率&gt;1、 <b>NegBinom_Dist</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合失敗&lt;0 または成功数&lt;1、 <b>NegBinom_Dist</b>が #NUM を返します。 エラー値です。 </para>
          <para>負の二項分布は、次の演算式で表されます。 </para>
          <para>図 1: 負の二項分布の数式</para>
          <para> </para>
          <para> </para>
          <para>各項目の意味は次のとおりです。</para>
          <para>x は失敗数、r は成功数で、p は成功率です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NegBinomDist">
      <MemberSignature Language="C#" Value="public double NegBinomDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NegBinomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinomDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NegBinomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NegBinomDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16676)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">失敗数: 試行が失敗する回数を指定します。</param>
        <param name="Arg2">成功数: 分析のしきい値となる、試行が成功する回数を指定します。</param>
        <param name="Arg3">成功率: 試行が成功する確率を指定します。</param>
        <summary>負の二項分布を返します。 NegBinomDist がある、成功、成功する前に指定した回数失敗、成功の確率が成功する確率を返します。 この関数は、成功数は固定であり、試行の回数は、変数が二項分布と似ています。 、二項分布のような試行は独立するいると見なされます。</summary>
        <returns>To be added.</returns>
        <remarks><para>正確さの向上を提供することがあり、名前がその使用方法をより効果的に反映 1 つまたは複数の新しい関数を使用して、この関数は交換済み。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinom_Dist(System.Double,System.Double,System.Double,System.Boolean)" />メソッドです。</para>
          <para>など優れるリフレックスで 10 人を検索する必要があり、応募者がこれらの資格を持っている確率は 0.3 をことがわかっています。 <b>NegBinomDist</b>は、面接する候補者の不適切な数 10 個すべての修飾された候補者を見つける前に確率を計算します。 </para>
          <para>失敗数、成功数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>いずれかの引数が数値以外の場合は、 <b>NegBinomDist</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>場合成功率&lt;0 または確率&gt;1、 <b>NegBinomDist</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合失敗&lt;0 または成功数&lt;1、 <b>NegBinomDist</b>が #NUM を返します。 エラー値です。 </para>
          <para>負の二項分布は、次の演算式で表されます。 </para>
          <para>図 1: 負の二項分布の数式</para>
          <para> </para>
          <para> </para>
          <para>各項目の意味は次のとおりです。</para>
          <para>x は失敗数、r は成功数で、p は成功率です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NetworkDays">
      <MemberSignature Language="C#" Value="public double NetworkDays (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NetworkDays([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NetworkDays(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NetworkDays (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16856)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">開始日: 起算日を表す日付を指定します。</param>
        <param name="Arg2">終了日: 対象期間の最終日を表す日付を指定します。</param>
        <param name="Arg3">休日: 国民の祝日や夏期休暇など、稼動日数の計算から除外する日を表す日付を指定します。この引数は省略することができます。日付を含む一連のセルか、日付を示すシリアル値の配列定数を指定できます。</param>
        <summary>開始日と終了日の間には、全体の稼働日の数を返します。 稼働日は、週末や祝日に識別される日付を除外します。 見越計上する従業員の福利厚生を計算する使用<b>NetworkDays</b>は、特定の期間中に作業日の数に基づいています。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: DATE 関数を使用するか、他の数式または関数の結果として、日付を入力する必要があります。 たとえば、2008 年 5 月 23 日の DATE(2008,5,23) を使用します。 日付をテキストとして入力した場合、問題が発生することができます。</para>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para><b>いずれかの引数が無効な日付でない場合、#VALUE を!</b> エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NetworkDays_Intl">
      <MemberSignature Language="C#" Value="public double NetworkDays_Intl (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NetworkDays_Intl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NetworkDays_Intl(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NetworkDays_Intl (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16904)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">開始日: 差分を計算するための起算日です。開始日は、終了日よりも前か、同じか、または後にすることができます。</param>
        <param name="Arg2">終了日: 差分を計算するための最終日です。開始日は、終了日よりも前か、同じか、または後にすることができます。</param>
        <param name="Arg3">週末に-、日、週の週末の日付、開始日と終了日の間の全体の稼働日の数には含まれませんを示します。 週末は、週末の番号または週末のタイミングを指定する文字列です。</param>
        <param name="Arg4">祭日: 稼動日数の計算から除外する日付のセットです。このパラメーターは、日付が入力されているセル範囲、または日付を表すシリアル値の配列定数です。祭日の日付またはシリアル値は任意の順序で指定できます。</param>
        <summary>週末の曜日と日数を示すパラメーターを使用して、2 つの日付の間に含まれる稼動日の日数を返します。週末、および祭日として指定されている日は、稼動日と見なされません。</summary>
        <returns>To be added.</returns>
        <remarks><para>開始日が終了日よりも後の場合、戻り値の符号は負になり、値の大きさは稼働日数になります。</para>
          <para>開始日が現在の日付の基準値の範囲外にある場合は、 <b>NetworkDays_Intl</b>が #NUM を返します。 エラー値です。 </para>
          <para>終了日が現在の日付の基準値の範囲外にある場合は、 <b>NetworkDays_Intl</b>が #NUM を返します。 エラー値です。 </para>
          <para>週末文字列の長さが無効なまたは無効な文字が含まれていますは、 <b>NetworkDays_Intl</b>は、#VALUE を返します。 エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Nominal">
      <MemberSignature Language="C#" Value="public double Nominal (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Nominal([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Nominal(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Nominal (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Nominal(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16829)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">実効利率: 実効年利率を指定します。</param>
        <param name="Arg2">複利計算回数: 1 年あたりの複利計算回数を指定します。</param>
        <summary>指定された実効年利率と 1 年あたりの複利計算回数を元に、名目年利率を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>複利計算回数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>いずれかの引数が数値以外の場合は、<b>公称値</b>#VALUE を返す、! エラー値です。 </para>
          <para>場合実効 ≤ 0 または複利計算回数&lt;1、<b>名目</b>が #NUM を返します。 エラー値です。 </para>
          <para>
            <b>公称値</b>に関連して<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Effect(System.Object,System.Object)" />次の式に示すようにします。 </para>
          <para>図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_Dist">
      <MemberSignature Language="C#" Value="public double Norm_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16883)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 関数に代入する値を指定します。</param>
        <param name="Arg2">平均: 対象となる分布の算術平均 (相加平均) を指定します。</param>
        <param name="Arg3">標準偏差: 対象となる分布の標準偏差を指定します。</param>
        <param name="Arg4">関数形式の関数の形式を決定する論理値です。 場合<b>は累積的な</b> <b>Norm_Dist</b>は累積分布関数の値を返します。かどうかは<b>false</b>を返します確率密度関数です。</param>
        <summary>指定した平均と標準偏差に対する正規分布関数の値を返します。この関数は、仮説検定を始めとする統計学の幅広い分野に応用できます。</summary>
        <returns>To be added.</returns>
        <remarks><para>平均または標準偏差が数値以外の場合は、 <b>Norm_Dist</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>場合は標準偏差 ≤ 0、 <b>Norm_Dist</b>は、#NUM を返します。 エラー値です。 </para>
          <para>平均 = 0、標準偏差 = 1、および累積的な<b>true</b>= <b>Norm_Dist</b>は、標準正規分布を返します<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" />。 </para>
          <para>正規密度関数の数式 (累積的な = <b>false</b>) です。 </para>
          <para>正規密度関数の数式を図 1:</para>
          <para> </para>
          <para> </para>
          <para>関数形式が<b>true</b>数式は、負の無限大から指定した数式の x の積分です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_Inv">
      <MemberSignature Language="C#" Value="public double Norm_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16884)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">確率: 正規分布における確率を指定します。</param>
        <param name="Arg2">平均: 対象となる分布の算術平均 (相加平均) を指定します。</param>
        <param name="Arg3">標準偏差: 対象となる分布の標準偏差を指定します。</param>
        <summary>指定した平均と標準偏差に対する正規分布の累積分布関数の逆関数の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>いずれかの引数が数値以外の場合は、 <b>Norm_Inv</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>場合確率&lt;= 0 または確率&gt;= 1、 <b>Norm_Inv</b> #NUM を返します。 エラー値です。 </para>
          <para>場合は標準偏差 ≤ 0、 <b>Norm_Inv</b>は、#NUM を返します。 エラー値です。 </para>
          <para>平均 = 0 かつ標準偏差 = 1、 <b>Norm_Inv</b>を使用して、標準正規分布関数 (を参照してください<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" />)。</para>
          <para>確率の値を与え、そのような値 x がシーク<b>Norm_Inv</b>その NORM_DIST を (x、平均、標準偏差、TRUE) = 確率です。 <b>Norm_Inv</b>の精度がの精度に依存するため、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" />。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_S_Dist">
      <MemberSignature Language="C#" Value="public double Norm_S_Dist (double Arg1, bool Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_S_Dist([in]float64 Arg1, [in]bool Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_S_Dist (Arg1 As Double, Arg2 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_S_Dist(double Arg1, bool Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16923)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">z: 関数に代入する値を指定します。</param>
        <param name="Arg2">関数形式の関数の形式を決定する論理値です。 場合<b>は累積的な</b> <b>Norm_S_Dist</b>は累積分布関数の値を返します。かどうかは<b>false</b>を返します確率密度関数です。</param>
        <summary>標準正規分布の累積分布関数の値を返します。この分布は、平均が 0 (ゼロ) で標準偏差が 1 である正規分布に対応します。正規分布表の代わりにこの関数を使用することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>Z が数値以外の場合は、 <b>Norm_S_Dist</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>分布の標準密度関数の数式は次のとおりです。 </para>
          <para>分布の標準密度関数の数式を図 1:</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_S_Inv">
      <MemberSignature Language="C#" Value="public double Norm_S_Inv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_S_Inv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_S_Inv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_S_Inv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16924)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">確率: 正規分布における確率を指定します。</param>
        <summary>標準正規分布の累積分布関数の逆関数の値を返します。この分布は、平均が 0 (ゼロ) で標準偏差が 1 である正規分布に対応します。</summary>
        <returns>To be added.</returns>
        <remarks><para>確率が数値以外の場合は、 <b>Norm_S_Inv</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>場合確率&lt;0 または確率&gt;1、 <b>Norm_S_Inv</b>が #NUM を返します。 エラー値です。</para>
          <para>このような z 値が<b>Norm_S_Inv</b>シークの確率の値が指定する NORM_S_DIST(z) = 確率です。 <b>Norm_S_Inv</b>の精度がの精度に依存するため、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" />。 <b>Norm_S_Inv</b>では、反復計算の手法を使用します。 結果は 100 回反復後収束しないが、関数はエラー値 #n/a を返します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormDist">
      <MemberSignature Language="C#" Value="public double NormDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16677)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 関数に代入する値を指定します。</param>
        <param name="Arg2">平均: 対象となる分布の算術平均 (相加平均) を指定します。</param>
        <param name="Arg3">標準偏差: 対象となる分布の標準偏差を指定します。</param>
        <param name="Arg4">関数形式の関数の形式を決定する論理値です。 場合<b>は累積的な</b>累積分布関数の値を返す<b>式</b>かどうかは<b>false</b>を返します確率密度関数です。</param>
        <summary>指定した平均と標準偏差に対する正規分布関数の値を返します。この関数は、仮説検定を始めとする統計学の幅広い分野に応用できます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" />メソッドです。</para>
          <para>平均または標準偏差が数値以外の場合は、<b>式</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>場合は標準偏差 ≤ 0 では、<b>式</b>が #NUM を返します。 エラー値です。 </para>
          <para>平均 = 0、標準偏差 = 1、および累積的な = <b>true</b><b>式</b>は、標準正規分布関数、<b>式</b>を返します。 </para>
          <para>正規密度関数の数式 (累積的な = <b>false</b>) です。 </para>
          <para>正規密度関数の数式を図 1:</para>
          <para> </para>
          <para> </para>
          <para>関数形式が<b>true</b>数式は、負の無限大から指定した数式の x の積分です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormInv">
      <MemberSignature Language="C#" Value="public double NormInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16679)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">確率: 正規分布における確率を指定します。</param>
        <param name="Arg2">平均: 対象となる分布の算術平均 (相加平均) を指定します。</param>
        <param name="Arg3">標準偏差: 対象となる分布の標準偏差を指定します。</param>
        <summary>指定した平均と標準偏差に対する正規分布の累積分布関数の逆関数の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Inv(System.Double,System.Double,System.Double)" />メソッドです。</para>
          <para>いずれかの引数が数値以外の場合は、<b>ある場合</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>場合確率&lt;0 または確率&gt;1 で<b>ある場合</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合は標準偏差 ≤ 0 で<b>ある場合</b>#NUM を返します。 エラー値です。 </para>
          <para>平均 = 0 かつ標準偏差 = 1 で<b>ある場合</b>は、標準正規分布を使用して (を参照してください<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSInv(System.Double)" />)。 </para>
          <para><b>NormInv</b>確率の値を与え、そのような値 x がシークする式を (x、平均、標準偏差、TRUE) = 確率。 <b>ある場合</b>の有効桁数がの精度に依存するため、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormDist(System.Double,System.Double,System.Double,System.Boolean)" />。 <b>ある場合</b>は、反復計算の手法を使用します。 結果は 100 回反復後収束しないが、関数はエラー値 #n/a を返します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormSDist">
      <MemberSignature Language="C#" Value="public double NormSDist (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormSDist([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSDist(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormSDist (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormSDist(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16678)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">z: 関数に代入する値を指定します。</param>
        <summary>標準正規分布の累積分布関数の値を返します。この分布は、平均が 0 (ゼロ) で標準偏差が 1 である正規分布に対応します。正規分布表の代わりにこの関数を使用することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" />メソッドです。</para>
          <para>Z が数値以外の場合は、 <b>NormSDist</b>が #VALUE を返します。 エラー値です。 </para>
          <para>分布の標準密度関数の数式は次のとおりです。 </para>
          <para>分布の標準密度関数の数式を図 1:</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormSInv">
      <MemberSignature Language="C#" Value="public double NormSInv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormSInv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSInv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormSInv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormSInv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16680)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">確率: 正規分布における確率を指定します。</param>
        <summary>標準正規分布の累積分布関数の逆関数の値を返します。この分布は、平均が 0 で標準偏差が 1 である正規分布に対応します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" />メソッドです。</para>
          <para>確率が数値以外の場合、 <b>normsinv 関数</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>場合確率&lt;= 0 または確率&gt;= 1、 <b>normsinv 関数</b>が #NUM を返します。 エラー値です。</para>
          <para><b>Normsinv 関数</b>の確率の値が指定値このような z がシークする normsdist (z) = 確率です。 <b>Normsinv 関数</b>の有効桁数がの精度に依存するため、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSDist(System.Double)" />。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NPer">
      <MemberSignature Language="C#" Value="public double NPer (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NPer([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NPer(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPer (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16442)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">利率: 投資の利率を指定します。</param>
        <param name="Arg2">定期支払額: 毎回の支払額を指定します。投資期間内に支払額を変更することはできません。通常、定期支払額には元金と利息が含まれますが、その他の手数料や税金は含まれません。</param>
        <param name="Arg3">現在価値: 現在の投資額、または、将来行われる一連の支払いを現時点で一括払いした場合の合計金額を指定します。</param>
        <param name="Arg4">将来価値: 投資の将来価値、つまり最後の支払いを行った後に残る現金の収支を指定します。将来価値を省略すると、0 を指定したと見なされます。たとえば、ローンなどの借入金の将来価値は 0 になります。</param>
        <param name="Arg5">支払期日: 支払いがいつ行われるかを、数値の 0 または 1 で指定します。省略すると、0 を指定したと見なされます。</param>
        <summary>定額の支払いを定期的に行い、利率が一定であると仮定して、投資に必要な期間 (支払回数) を返します。</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 または省略</term>
              <description>各期の期末</description>
            </item>
            <item>
              <term>1</term>
              <description>各期の期首</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Npv">
      <MemberSignature Language="C#" Value="public double Npv (double Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Npv([in]float64 Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Npv (Arg1 As Double, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16395)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">割引率: 投資期間を通じて一定の割引率を指定します。</param>
        <param name="Arg2">値 1、値 2 ...: 支払額 (負の値) と収益額 (正の値) を指定します。引数は 1 ～ 29 個まで指定できます。</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>投資の正味現在価値を、割引率、将来行われる一連の支払い (負の値)、およびその収益 (正の値) を使って算出します。</summary>
        <returns>To be added.</returns>
        <remarks><para>値 1、値 2 ... は定期的に、各期末に発生するものです。</para>
          <para>
            <b>Npv</b>は、キャッシュ フローの順序を解釈するために、value1... value2 の順序を使用します。 支払いと収入値を正しい順序で入力することを確認します。 </para>
          <para>引数が数値、空白セル、論理値、または数値のテキスト表現の場合はそれぞれ計算の対象となりますが、エラー値および数値に変換できないテキストの場合は無視されます。</para>
          <para>引数が配列またはセル範囲である場合、その中に含まれる数値だけが計算の対象となります。空白セル、論理値、文字列、またはエラー値はすべて無視されます。</para>
          <para><b>Npv</b>の投資は、値 1 のキャッシュ フローの日付の前に 1 つの期間を開始し、リストの最後のキャッシュ フローで終了します。 <b>Npv</b>の計算は、将来のキャッシュ フローに基づきます。 最初のピリオドの先頭に最初のキャッシュ フローが発生した場合は、 <b>npv 関数</b>の結果を引数に含まれていない最初の値を追加する必要があります。 詳細については、次の例を参照してください。 </para>
          <para><b>Npv</b>の数式は、n の値の一覧で、キャッシュ フローの数がある場合です。 </para>
          <para>図 1: 数式は、Npv メソッドを</para>
          <para> </para>
          <para> </para>
          <para>
            <b>Npv 関数</b>では、ような<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />関数 (現在価値)。 PV と<b>Npv</b>の間の主な違いは、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />キャッシュ フローの最後に、または期間の開始時に開始します。 変数<b>Npv</b>キャッシュ フロー値とは異なり<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />キャッシュ フローは投資期間を通じて一定である必要があります。 財務関数の詳細についてを参照してください<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />。 </para>
          <para>
            <b>Npv 関数</b>にも関連して、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" />関数 (内部利益率)。 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" /><b>npv 関数</b>が 0 に等しいのレートは、: 計算、...) = 0 です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberValue">
      <MemberSignature Language="C#" Value="public double NumberValue (string Arg1, string Arg2, string Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NumberValue([in]string Arg1, [in]string Arg2, [in]string Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NumberValue(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function NumberValue (Arg1 As String, Arg2 As String, Arg3 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NumberValue(System::String ^ Arg1, System::String ^ Arg2, System::String ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16969)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">変換する、数値を表す文字列を指定します。</param>
        <param name="Arg2">文字列で小数点区切り記号として使用する文字を指定します。</param>
        <param name="Arg3">文字列で桁区切り記号として使用する文字を指定します。</param>
        <summary>ロケールに依存しない方法でテキストを数値に変換します。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Bin">
      <MemberSignature Language="C#" Value="public string Oct2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16774)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 変換する 8 進数を指定します。数値に指定できる文字数は 10 文字までです。数値の最上位のビットは符号を表し、残りの 29 ビットは数値の大きさを表します。負の数は 2 の補数を使って表します。</param>
        <param name="Arg2">場所で使用する文字の数です。 場所が省略されると、 <b>Oct2Bin</b>が必要な文字の最小数を使用します。 場所は、戻り値の先頭に 0 (ゼロ) をスペースに便利です。</param>
        <summary>8 進数を 2 進数に変換します。</summary>
        <returns>To be added.</returns>
        <remarks><para>負の数である場合、 <b>Oct2Bin</b>が場所を無視し、10-文字バイナリ数を返します。 </para>
          <para>数値が負の数である場合、数値に 7777777000 より小さい値を指定することはできません。数値が正の数である場合、数値に 777 より大きい値を指定することはできません。</para>
          <para>番号が有効な 8 進数ではない場合、 <b>Oct2Bin</b>が #NUM を返します。 エラー値です。 </para>
          <para><b>Oct2Bin</b>文字よりも大きくする必要がある場合、#NUM を返します。 エラー値です。 </para>
          <para>桁数に整数以外の値を指定すると、小数点以下は切り捨てられます。</para>
          <para>場所が数値以外の場合は、 <b>Oct2Bin</b>が #VALUE を返します。 エラー値です。 </para>
          <para>桁数が負の場合、 <b>Oct2Bin</b>が #NUM を返します。 エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Dec">
      <MemberSignature Language="C#" Value="public string Oct2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Oct2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16776)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 変換する 8 進数を指定します。数値に指定できる文字数は 10 文字 (30 ビット) までです。数値の最上位のビットは符号を表し、残りの 29 ビットは数値の大きさを表します。負の数は 2 の補数を使って表します。</param>
        <summary>8 進数を 10 進数に変換します。</summary>
        <returns>To be added.</returns>
        <remarks><para>番号が有効な 8 進数でない場合は、 <b>Oct2Dec</b>が #NUM を返します。 エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Hex">
      <MemberSignature Language="C#" Value="public string Oct2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16775)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 変換する 8 進数を指定します。数値に指定できる文字数は 10 文字 (30 ビット) までです。数値の最上位のビットは符号を表し、残りの 29 ビットは数値の大きさを表します。負の数は 2 の補数を使って表します。</param>
        <param name="Arg2">場所で使用する文字の数です。 場所が省略されると、 <b>Oct2Hex</b>が必要な文字の最小数を使用します。 場所は、戻り値の先頭に 0 (ゼロ) をスペースに便利です。</param>
        <summary>8 進数を 16 進数に変換します。</summary>
        <returns>To be added.</returns>
        <remarks><para>負の数である場合、 <b>Oct2Hex</b>は場所を無視し、10 桁の 16 進数を返します。 </para>
          <para>番号が有効な 8 進数ではない場合、 <b>Oct2Hex</b>が #NUM を返します。 エラー値です。 </para>
          <para><b>Oct2Hex</b>文字よりも大きくする必要がある場合、#NUM を返します。 エラー値です。 </para>
          <para>桁数に整数以外の値を指定すると、小数点以下は切り捨てられます。</para>
          <para>場所が数値以外の場合は、 <b>Oct2Hex</b>が #VALUE を返します。 エラー値です。 </para>
          <para>桁数が負の場合、 <b>Oct2Hex</b>が #NUM を返します。 エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Odd">
      <MemberSignature Language="C#" Value="public double Odd (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Odd([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Odd(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Odd (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Odd(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16682)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 切り上げの対象となる数値を指定します。</param>
        <summary>数値を切り上げて、最も近い奇数の値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>数値が数値以外の場合は、<b>奇数</b>#VALUE を返す、! エラー値です。 </para>
          <para>数値の符号に関係なく、切り上げられた値の絶対値は、数値より大きくなります。数値が既に奇数の値になっている場合、切り上げは行われません。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddFPrice">
      <MemberSignature Language="C#" Value="public double OddFPrice (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddFPrice([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddFPrice (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Arg8 As Object, Optional Arg9 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16846)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">発行日: 証券の発行日を指定します。</param>
        <param name="Arg4">初回利払日: 証券の最初の利払日を指定します。</param>
        <param name="Arg5">利率: 証券の利率を指定します。</param>
        <param name="Arg6">利回り: 証券の年間配当を指定します。</param>
        <param name="Arg7">償還価額: 額面 $ 100 に対する証券の償還額を指定します。</param>
        <param name="Arg8">頻度: 年間の利息支払回数を指定します。年 1 回の場合は頻度 = 1、年 2 回の場合は頻度 = 2、四半期ごとの場合は頻度 = 4 を指定します。</param>
        <param name="Arg9">基準: 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>1 期目の日数が半端な証券に対して、額面 $100 あたりの価格を返します。</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4</term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>受渡日、満期日、発行日、初回利払日、基準に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para><b>受渡日、満期日、問題、または初回利払日が有効な日付でない場合、#VALUE を!</b> エラー値です。 </para>
          <para>場合レート&lt;0 または利回り&lt;0、 <b>OddFPrice</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合に&lt;0 または基準&gt;4 では、 <b>OddFPrice</b>が #NUM を返す! エラー値です。 </para>
          <para>次の条件を満たす必要があります。<b>OddFPrice</b>はそれ以外の場合、#NUM を返します。 エラー値: </para>
          <para>成熟度&gt;初回利払日&gt;決済&gt;の問題</para>
          <para> </para>
          <para>
            <b>OddFPrice</b>は次のように計算されます: 短い最初の利息。</para>
          <para>図 1: 短い最初の利息</para>
          <para> </para>
          <para> </para>
          <para>各項目の意味は次のとおりです。</para>
          <para>A = 利息計算期間の初日から受渡日までの日数) までの日数です。</para>
          <para>DSC =、受渡日から次の利払日までの日数です。</para>
          <para>DFC = 最初の利息の先頭から最初の利払日までの日数です。</para>
          <para>E = 利払期間の日数です。</para>
          <para>N = 受渡日と償還日の間で買掛金の割引券の番号です。 (この数値に分数が含まれている場合これは次の整数にします。)</para>
          <para>長い最初の利息日</para>
          <para>図 2: 奇数時間最初の利息日</para>
          <para> </para>
          <para> </para>
          <para>各項目の意味は次のとおりです。</para>
          <para>Ai =、i 番目または最後の開始からの日数、準利札期の数です。</para>
          <para>DCi = 日数を日付の日 (発行日) から最初の擬似利払 (に = 1) または擬似利払期間の日数 (i = 2,...、私 = NC)。</para>
          <para>DSC = 受渡日から次の利払日までの日数です。</para>
          <para>E = 利払期間の日数です。</para>
          <para>N = 最初の実際の利払日と償還日の買掛金の割引券の番号です。 (この数値に分数が含まれている場合これは次の整数にします。)</para>
          <para>NC = 半端な期に収まる擬似利払期間の数。 (この数値に分数が含まれている場合これは次の整数にします。)</para>
          <para>NLi = 日数がフルの i 番目または最後の準利札期の標準の長さ。</para>
          <para>Nq = 受渡日と初回利払日の間の完全な擬似利払期間の数。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddFYield">
      <MemberSignature Language="C#" Value="public double OddFYield (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddFYield([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFYield(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddFYield (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Arg8 As Object, Optional Arg9 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16847)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">発行日: 証券の発行日を指定します。</param>
        <param name="Arg4">初回利払日: 証券の最初の利払日を指定します。</param>
        <param name="Arg5">利率: 証券の利率を指定します。</param>
        <param name="Arg6">現在価値: 証券の価格を指定します。</param>
        <param name="Arg7">償還価額: 額面 $ 100 に対する証券の償還額を指定します。</param>
        <param name="Arg8">頻度: 年間の利息支払回数を指定します。年 1 回の場合は頻度 = 1、年 2 回の場合は頻度 = 2、四半期ごとの場合は頻度 = 4 を指定します。</param>
        <param name="Arg9">基準: 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>1 期目の日数が半端な証券の利回りを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: DATE 関数を使用するか、他の数式または関数の結果として、日付を入力する必要があります。 たとえば、2008 年 5 月 23 日の DATE(2008,5,23) を使用します。 日付をテキストとして入力した場合、問題が発生することができます。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4</term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>受渡日、満期日、発行日、初回利払日、基準に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para><b>受渡日、満期日、問題、または初回利払日が有効な日付でない場合、#VALUE を!</b> エラー値です。 </para>
          <para>場合レート&lt;0 または #NUM を返すならば ≤ 0 で<b>ある</b>かどうかです。 エラー値です。 </para>
          <para>場合に&lt;0 または基準&gt;4 で<b>ある</b>が #NUM を返す! エラー値です。 </para>
          <para>次の条件を満たす必要があります。<b>それ以外の場合、#NUM を!</b> エラー値: </para>
          <para>成熟度&gt;初回利払日&gt;決済&gt;の問題</para>
          <para>Excel では、反復計算の手法を使って、<b>ある</b>を計算します。 この関数は、関数を使用する数式に基づくニュートン法を使用して<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />。 指定された利回りの推定価格が価格の近くになるまで、利回りは 100 回反復が変更されます。 参照してください<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />に<b>ある</b>を使用する数式。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddLPrice">
      <MemberSignature Language="C#" Value="public double OddLPrice (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddLPrice([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddLPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddLPrice (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Optional Arg8 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16844)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">最終利払日: 証券の最後の利払日を指定します。</param>
        <param name="Arg4">利率: 証券の利率を指定します。</param>
        <param name="Arg5">利回り: 証券の年間配当を指定します。</param>
        <param name="Arg6">償還価額: 額面 $ 100 に対する証券の償還額を指定します。</param>
        <param name="Arg7">頻度: 年間の利息支払回数を指定します。年 1 回の場合は頻度 = 1、年 2 回の場合は頻度 = 2、四半期ごとの場合は頻度 = 4 を指定します。</param>
        <param name="Arg8">基準: 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>最終利払期間の日数が半端な証券に対して、額面 $100 あたりの価格を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: DATE 関数を使用するか、他の数式または関数の結果として、日付を入力する必要があります。 たとえば、2008 年 5 月 23 日の DATE(2008,5,23) を使用します。 日付をテキストとして入力した場合、問題が発生することができます。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4</term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>受渡日、満期日、最終利払日、基準に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para><b>受渡日、満期日、最終利払が有効な日付でない場合、#VALUE を!</b> エラー値です。 </para>
          <para>場合レート&lt;0 または利回り&lt;0 <b>OddLPrice</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合に&lt;0 または基準&gt;4 <b>OddLPrice</b>が #NUM を返す! エラー値です。 </para>
          <para>次の条件を満たす必要があります。<b>OddLPrice</b>はそれ以外の場合、#NUM を返します。 エラー値: </para>
          <para>成熟度&gt;決済&gt;最終利払日</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddLYield">
      <MemberSignature Language="C#" Value="public double OddLYield (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddLYield([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddLYield(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddLYield (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Optional Arg8 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16845)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">最終利払日: 証券の最後の利払日を指定します。</param>
        <param name="Arg4">利率: 証券の利率を指定します。</param>
        <param name="Arg5">現在価値: 証券の価格を指定します。</param>
        <param name="Arg6">償還価額: 額面 $ 100 に対する証券の償還額を指定します。</param>
        <param name="Arg7">頻度: 年間の利息支払回数を指定します。年 1 回の場合は頻度 = 1、年 2 回の場合は頻度 = 2、四半期ごとの場合は頻度 = 4 を指定します。</param>
        <param name="Arg8">基準: 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>最終期の日数が半端な証券の利回りを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: DATE 関数を使用するか、他の数式または関数の結果として、日付を入力する必要があります。 たとえば、2008 年 5 月 23 日の DATE(2008,5,23) を使用します。 日付をテキストとして入力した場合、問題が発生することができます。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4</term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>受渡日、満期日、最終利払日、基準に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para><b>受渡日、満期日、最終利払が有効な日付でない場合、#VALUE を!</b> エラー値です。 </para>
          <para>場合レート&lt;0 または #NUM を返すならば ≤ 0 で<b>ある</b>かどうかです。 エラー値です。 </para>
          <para>場合に&lt;0 または基準&gt;4 で<b>ある</b>が #NUM を返す! エラー値です。 </para>
          <para>次の条件を満たす必要があります。<b>それ以外の場合、#NUM を!</b> エラー値: </para>
          <para>成熟度&gt;決済&gt;最終利払日 </para>
          <para>
            <b>ある</b>は、次のように計算されます。 </para>
          <para>あるメソッドの図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para>各項目の意味は次のとおりです。</para>
          <para>Ai = 奇数の期間から数えて償還前に、の最後の利払日、i 回目の日数や、最後の準利札期の数です。</para>
          <para>DCi = 実際の利払期間の長さで区切られたように、i 番目または最後の擬似利払期間の日数の数です。</para>
          <para>NC = 半端な期に収まる擬似利払期間の数この数値に分数が含まれている場合に、次の整数に発生します。</para>
          <para>NLi = 日数が i 回目または最後の準利札期の利払期間です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public bool Or (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Or([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Or(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Or (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16421)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Logical1、... - 2 1 から 30 個までの条件をテストするには、 <b>true</b>または<b>false</b>のいずれかができます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>を返します<b>true の</b>場合はいずれかの引数は<b>true</b>です。すべての引数が<b>false</b>の場合は<b>false</b>を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数に論理値<b>true</b>または<b>false</b>などを論理値を含む配列または参照にします。 </para>
          <para>引数として指定した配列や参照に、文字列または空白セルが含まれる場合、これらの値は無視されます。</para>
          <para>指定した範囲に論理値が含まれていない場合、<b>または</b>が #VALUE を返します。 エラー値です。 </para>
          <para><b>または</b>配列数式を使用すると、配列の値が発生したかどうかを参照してください。 配列数式を入力するには、ctrl キーと SHIFT キーを押しながら ENTER を押します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parent { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定されたオブジェクトの親オブジェクトを返します。値の取得のみ可能です。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PDuration">
      <MemberSignature Language="C#" Value="public double PDuration (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PDuration([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PDuration(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function PDuration (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double PDuration(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16954)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">期間ごとの利率。</param>
        <param name="Arg2">投資の現在価値。</param>
        <param name="Arg3">希望する投資の将来価値。</param>
        <summary>投資が指定した金額に達するまでに必要な期間を返します。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pearson">
      <MemberSignature Language="C#" Value="public double Pearson (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pearson([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pearson(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pearson (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Pearson(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16696)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列 1: 複数の独立変数に対応するデータを指定します。</param>
        <param name="Arg2">配列 2: 複数の従属変数に対応するデータを指定します。</param>
        <summary>ピアソンの積率相関係数 r の値を返します。r は -1.0 から 1.0 の範囲の数値で、2 組のデータ間での線形相関の程度を示します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para><b>Array1 と array2 が空のデータ ポイント数が異なる、または #N/A エラー値が返されます。</b> </para>
          <para>ピアソンの積率相関係数 r を表す数式は次のとおりです。 </para>
          <para>図 1: Pearson 製品時点相関係数</para>
          <para> </para>
          <para> </para>
          <para>ここで、x は標本平均 AVERAGE(配列 1)、y は標本平均 AVERAGE(配列 2) です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile">
      <MemberSignature Language="C#" Value="public double Percentile (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16712)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列: 相対的な位置を決定するため、数値データを含む配列またはセル範囲を指定します。</param>
        <param name="Arg2">率: 0 ～ 1 の範囲で、目的の百分位の値を指定します。</param>
        <summary>配列のデータの中で、百分率で率に位置する値を返します。PERCENTILE 関数は入学試験などの合否ラインなどを決めるときに利用します。たとえば、PERSENTILE 関数を使って、成績が上位 10% の志願者を合格とすることができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Inc(System.Object,System.Double)" />と<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Exc(System.Object,System.Double)" />メソッドです。 </para>
          <para>配列が空の場合は、<b>百分位</b>が #NUM を返します。 エラー値です。 </para>
          <para>K が数値以外の場合は、<b>百分位数</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>K の場合&lt;0 と k &gt; 1、<b>百分位</b>が #NUM を返します。 エラー値です。 </para>
          <para>K が 1 の倍数でない場合または (n-1)、k 番目の百分位数の値を決定するのには<b>百分位</b>を補間します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile_Exc">
      <MemberSignature Language="C#" Value="public double Percentile_Exc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile_Exc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Exc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile_Exc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile_Exc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16885)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列: 相対的な位置を決定するため、配列またはセル範囲を指定します。</param>
        <param name="Arg2">率: 0 ～ 1 (0 と 1 を除く) の範囲で、目的の百分位の値を指定します。</param>
        <summary>配列のデータの中で、百分率で率に位置する値を返します。率は、0 ～ 1 (0 と 1 を除く) の範囲の値です。</summary>
        <returns>To be added.</returns>
        <remarks><para>配列が空の場合は、 <b>Percentile_Exc</b>が #NUM を返します。 エラー値 </para>
          <para>K が数値以外の場合は、 <b>Percentile_Exc</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>K ≤ 0 または k 受領 1、 <b>Percentile_Exc</b>が #NUM を返す場合。 エラー値です。 </para>
          <para>K が 1 の倍数でない場合または (n-1)、k 番目の百分位数の値を決定する<b>Percentile_Exc</b>を補間します。 </para>
          <para>
            <b>Percentile_Exc</b>は、指定の百分位数の値が配列内の 2 つの値の間にあるときに補間されます。 百分位数を指定すると、k の補間できないこと Excel が #NUM を返します。 エラーを返します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile_Inc">
      <MemberSignature Language="C#" Value="public double Percentile_Inc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile_Inc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Inc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile_Inc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile_Inc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16886)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列: 相対的な位置を決定するため、配列またはセル範囲を指定します。</param>
        <param name="Arg2">率: 0 ～ 1 (0 と 1 を含む) の範囲で、目的の百分位の値を指定します。</param>
        <summary>配列のデータの中で、百分率で率に位置する値を返します。この関数は入学試験などの合否ラインなどを決めるときに利用します。たとえば、この関数を使って、成績が上位 10% の志願者を合格とすることができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>配列が空の場合は、 <b>Percentile_Inc</b>が #NUM を返します。 エラー値です。 </para>
          <para>K が数値以外の場合は、 <b>Percentile_Inc</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>K の場合&lt;0 と k &gt; 1、 <b>Percentile_Inc</b>が #NUM を返します。 エラー値です。 </para>
          <para>K が 1 の倍数でない場合または (n-1)、k 番目の百分位数の値を決定する<b>Percentile_Inc</b>を補間します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank">
      <MemberSignature Language="C#" Value="public double PercentRank (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16713)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列: 相対的な位置を決定するため、数値データを含む配列またはセル範囲を指定します。</param>
        <param name="Arg2">x: ランクを調べる値を指定します。</param>
        <param name="Arg3">基準値が返される百分率の有効桁数の番号を識別する長整数型 (オプション) の値です。 省略すると、<b>小数点</b>3 桁の数字 (0.xxx) を使用します。</param>
        <summary>データ セットの割合として、データ セットの値のランクを返します。 この関数は、データ セット内の値の相対的な位置を評価するために使用できます。 たとえば、テストのスコアのすべての間での適性テスト スコアの順位を評価するために<b>小数点</b>を使用できます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Inc(System.Object,System.Double,System.Object)" />と<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Exc(System.Object,System.Double,System.Object)" />の方法です。</para>
          <para>配列が空の場合は、<b>小数点</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合意味&lt;1<b>小数点</b>が #NUM を返します。 エラー値です。 </para>
          <para>X には、配列内の値のいずれかと一致しません、する場合は、正しい順位を計算するのには<b>小数点</b>が補間します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank_Exc">
      <MemberSignature Language="C#" Value="public double PercentRank_Exc (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank_Exc([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Exc(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank_Exc (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16887)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列: 相対的な位置を決定するため、数値データを含む配列またはセル範囲を指定します。</param>
        <param name="Arg2">x: ランクを調べる値を指定します。</param>
        <param name="Arg3">基準値が返される百分率の有効桁数の番号を識別する値。 省略すると、 <b>PercentRank_Exc</b>は 3 桁の数字 (0.xxx) を使用します。</param>
        <summary>データ セット内の値のランクを、データ セットに対するパーセント (0 ～ 1、0 と 1 は除く) の値で返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>配列が空の場合は、 <b>PercentRank_Exc</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合意味&lt;1、 <b>PercentRank_Exc</b>が #NUM を返します。 エラー値です。 </para>
          <para>X には、配列内の値のいずれかと一致しません、する場合は、正しい順位を計算するのには<b>PercentRank_Exc</b>が補間します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank_Inc">
      <MemberSignature Language="C#" Value="public double PercentRank_Inc (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank_Inc([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Inc(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank_Inc (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16888)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列: 相対的な位置を決定するため、数値データを含む配列またはセル範囲を指定します。</param>
        <param name="Arg2">x: ランクを調べる値を指定します。</param>
        <param name="Arg3">基準値が返される百分率の有効桁数の番号を識別する長整数型 (オプション) の値です。 省略すると、 <b>PercentRank_Inc</b>は 3 桁の数字 (0.xxx) を使用します。</param>
        <summary>パーセンテージ (含まれる) データ ・ セットのデータ セットの値のランクを返します。 この関数は、データ セット内の値の相対的な位置を評価するために使用できます。 たとえば、テストのスコアのすべての間での適性テスト スコアの順位を評価するために<b>PercentRank_Inc</b>を使用できます。</summary>
        <returns>To be added.</returns>
        <remarks><para>配列が空の場合は、 <b>PercentRank_Inc</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合意味&lt;1、 <b>PercentRank_Inc</b>が #NUM を返します。 エラー値です。 </para>
          <para>X には、配列内の値のいずれかと一致しません、する場合は、正しい順位を計算するのには<b>PercentRank_Inc</b>が補間します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Permut">
      <MemberSignature Language="C#" Value="public double Permut (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Permut([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Permut(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Permut (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Permut(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16683)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">標本数: 対象の総数を整数で指定します。</param>
        <param name="Arg2">抜き取り数: 順列計算のために選択する対象の個数を整数で指定します。</param>
        <summary>標本数個から抜き取り数個を選択する場合の順列を返します。順列とは、順序に着目して選択した対象や事象の組み合わせ数を計算したもので、順序に関係なく計算される組み合わせとは異なります。PERMUT 関数は宝くじなどの当選確率を計算するために利用します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>番号または抜き取りが数値以外の場合は、 <b>Permut</b>が #VALUE を返します。 エラー値です。 </para>
          <para>場合数 ≤ 0 または抜き取り&lt;0、 <b>Permut</b>が #NUM を返す! エラー値です。 </para>
          <para>数値の場合&lt;抜き取り、 <b>Permut</b>が #NUM を返します。 エラー値です。 </para>
          <para>順列は、次の演算式で表されます。 </para>
          <para>順列の数の数式を図 1:</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Permutationa">
      <MemberSignature Language="C#" Value="public double Permutationa (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Permutationa([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Permutationa(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Permutationa (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Permutationa(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16951)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">すべてのオブジェクトの数。</param>
        <param name="Arg2">各順列のオブジェクトの数。</param>
        <summary>すべてのオブジェクトから指定された数のオブジェクト (繰り返しを含む) を選択する場合の順列の数を返します。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Phi">
      <MemberSignature Language="C#" Value="public double Phi (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Phi([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Phi(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Phi (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Phi(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16962)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">標準正規分布の密度を求める数値。</param>
        <summary>標準正規分布の密度関数の値を返します。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Phonetic">
      <MemberSignature Language="C#" Value="public string Phonetic (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Phonetic([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Phonetic(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function Phonetic (Arg1 As Range) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Phonetic(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16744)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">範囲: ふりがなの文字列を含む 1 つまたは複数のセル参照を指定します。</param>
        <summary>ふりがなの文字列を抽出します。</summary>
        <returns>To be added.</returns>
        <remarks><para>セル範囲を参照している場合は、セル範囲の左上隅に指定されているふりがなの文字列が返されます。 </para>
          <para>隣接しないセル範囲を参照している場合は、#N/A エラー値が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Pi">
      <MemberSignature Language="C#" Value="public double Pi ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pi() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pi" />
      <MemberSignature Language="VB.NET" Value="Public Function Pi () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Pi();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16403)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>円周率πの近似値である数値 3.14159265358979 を返します。この数値の精度は 15 桁です。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pmt">
      <MemberSignature Language="C#" Value="public double Pmt (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pmt(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16443)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">利率: ローンの利率を指定します。</param>
        <param name="Arg2">期間: ローン期間全体での支払回数の合計を指定します。</param>
        <param name="Arg3">現在価値: ローンの現在価値、つまり、将来行われる一連の支払いを現時点で一括払いした場合の合計金額、または元金を指定します。</param>
        <param name="Arg4">将来価値: 将来価値、つまり最後の支払いを行った後に残る現金の収支を指定します。将来価値を省略すると、0 (ゼロ) を指定したと見なされます。たとえば、借入額の将来価値は 0 になります。</param>
        <param name="Arg5">支払期日: 支払いが行われる時期を、数値の 0 (ゼロ) または 1 で指定します。支払期日を省略すると、0 を指定したと見なされます。</param>
        <summary>一定利率の支払いが定期的に行われる場合の、ローンの定期支払額を算出します。</summary>
        <returns>To be added.</returns>
        <remarks><para><b>Pmt</b>の引数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />関数です。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>各期の期末</description>
            </item>
            <item>
              <term>1</term>
              <description>各期の期首</description>
            </item>
          </list>
          <para><b>Pmt</b>によって返された支払には、元金と利息が含まれていますが、準備金の支払の手数料や税金なしローンで。 </para>
          <para>利率と期間を指定するときは、時間的な単位を一致させる必要があります。たとえば、年利 12% の 4 年ローンを月払いで返済する場合、利率には 12%/12 = 1 (%) を、また期間には 4*12 = 48 (月) を指定します。また、これと同じローンを年払いで返済する場合は、利率に 12 (%)、期間に 4 (年) を指定します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Poisson">
      <MemberSignature Language="C#" Value="public double Poisson (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Poisson([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Poisson (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Poisson(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16684)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">イベント数: 生じる事象の数を指定します。</param>
        <param name="Arg2">平均: 一定の時間内に起きる事象の平均値を指定します。</param>
        <param name="Arg3">関数形式: 確率分布を計算する関数形式を、論理値で指定します。関数形式に TRUE を指定した場合、生起するランダムな事象の数がゼロからイベント数の範囲であるような累積ポアソン確率が計算されます。FALSE の場合は、生起する事象の数が正確にイベント数となるようなポアソン確率が計算されます。</param>
        <summary>ポアソン確率の値を返します。通常、ポアソン分布は一定の時間内に起きる事象の数を予測するために利用されます。たとえば、ポアソン分布を使って、高速道路の料金所を 1 分間に通過する自動車の台数を予測することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson_Dist(System.Double,System.Double,System.Boolean)" />メソッドです。</para>
          <para>イベント数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>場合 x の平均に数値以外が、 <b>Poisson</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>場合 x &lt; 0、<b>ポワソン</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合は平均値 ≤ 0 の場合、 <b>Poisson</b>は、#NUM を返します。 エラー値です。 </para>
          <para>
            <b>ポワソン</b>は、次のように計算されます。 </para>
          <para>累積的な = <b>false を指定</b>します。</para>
          <para>図 1: Calcuation の累積的な場合は false</para>
          <para> </para>
          <para> </para>
          <para>累積的な = <b>true を指定</b>します。</para>
          <para>図 2: Calcuation の累積的な場合は true</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Poisson_Dist">
      <MemberSignature Language="C#" Value="public double Poisson_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Poisson_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Poisson_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Poisson_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16889)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">イベント数: 生じる事象の数を指定します。</param>
        <param name="Arg2">平均: 一定の時間内に起きる事象の平均値を指定します。</param>
        <param name="Arg3">関数形式: 確率分布の形式を決定する論理値が返されます。 場合<b>は累積的な</b> <b>Poisson_Dist</b>のあるランダムな事象の数が 0 (ゼロ) から x 回の間で累積ポワソン確率を返します。かどうかは<b>false</b>を返します、ポアソン確率発生するイベントの数が正確になることです。</param>
        <summary>ポアソン確率の値を返します。通常、ポアソン分布は一定の時間内に起きる事象の数を予測するために利用されます。たとえば、ポアソン分布を使って、高速道路の料金所を 1 分間に通過する自動車の台数を予測することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>イベント数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>場合 x 平均に数値以外は、 <b>Poisson_Dist</b>が、#VALUE を返すのか! エラー値です。 </para>
          <para>場合 x &lt; 0 <b>Poisson_Dist</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合は平均値 ≤ 0、 <b>Poisson_Dist</b>は、#NUM を返します。 エラー値です。 </para>
          <para>
            <b>Poisson_Dist</b>として計算されます。 </para>
          <para>累積的な = <b>false を指定</b>します。</para>
          <para>図 1: Calcuation の累積的な場合は false</para>
          <para> </para>
          <para> </para>
          <para>累積的な = <b>true を指定</b>します。</para>
          <para>図 2: Calcuation の累積的な場合は true</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public double Power (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Power([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Power(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Power (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Power(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16721)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: べき乗の底を指定します。数値には任意の実数を指定することができます。</param>
        <param name="Arg2">指数: 数値を底とするべき乗の指数を指定します。</param>
        <summary>数値のべき乗を返します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ppmt">
      <MemberSignature Language="C#" Value="public double Ppmt (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ppmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ppmt(System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ppmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16552)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">利率: 投資の利率を指定します。</param>
        <param name="Arg2">期: 期を 1 ～期間の範囲で指定します。</param>
        <param name="Arg3">期間: 投資期間全体での支払い回数の合計を指定します。</param>
        <param name="Arg4">現在価値: 投資の現在価値、つまり将来行われる一連の支払いを現時点で一括払いした場合の合計金額を指定します。</param>
        <param name="Arg5">将来価値: 将来価値、つまり最後の支払いを行った後に残る現金の収支を指定します。将来価値を省略すると、0 (ゼロ) を指定したと見なされます。たとえば、借入額の将来価値は 0 になります。</param>
        <param name="Arg6">支払期日: 支払いがいつ行われるかを、数値の 0 または 1 で指定します。省略すると、0 を指定したと見なされます。</param>
        <summary>定額の支払いを定期的に行い、利率が一定であると仮定して、投資の指定した期に支払われる元金を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para><b>Ppmt</b>の引数の詳細についてを参照してください<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>各期の期末</description>
            </item>
            <item>
              <term>1</term>
              <description>各期の期首</description>
            </item>
          </list>
          <para>利率と期間を指定するときは、時間的な単位を一致させる必要があります。たとえば、年利 12% の 4 年ローンを月払いで返済する場合、利率には 12%/12 = 1 (%) を、また期間には 4*12 = 48 (月) を指定します。また、これと同じローンを年払いで返済する場合は、利率に 12 (%)、期間に 4 (年) を指定します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Price">
      <MemberSignature Language="C#" Value="public double Price (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Price([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Price(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Price (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16825)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">利率: 証券の年利を指定します。</param>
        <param name="Arg4">利回り: 証券の年間配当を指定します。</param>
        <param name="Arg5">償還価額: 額面 $ 100 に対する証券の償還額を指定します。</param>
        <param name="Arg6">頻度: 年間の利息支払回数を指定します。年 1 回の場合は頻度 = 1、年 2 回の場合は頻度 = 2、四半期ごとの場合は頻度 = 4 を指定します。</param>
        <param name="Arg7">基準: 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>定期的に利息が支払われる証券に対して、額面 $100 あたりの価格を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: DATE 関数を使用するか、他の数式または関数の結果として、日付を入力する必要があります。 たとえば、2008 年 5 月 23 日の DATE(2008,5,23) を使用します。 日付をテキストとして入力した場合、問題が発生することができます。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4</term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>受渡日、満期日、頻度、基準に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>受領または成熟度が有効な日付でない場合、<b>価格</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>場合利回り&lt;0 または率&lt;0、<b>価格</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合は償還額 ≤ 0、<b>価格</b>が #NUM を返します。 エラー値です。 </para>
          <para>頻度が 1、2、または 4 以外の数値の場合は、<b>価格</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合に&lt;0 または基準&gt;4 では、<b>価格</b>が #NUM を返す! エラー値です。 </para>
          <para>場合は受領成熟度<b>価格</b>が #NUM を返します。 エラー値です。 <b>価格</b>として計算されます。 </para>
          <para>価格方法について図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para>各項目の意味は次のとおりです。</para>
          <para>DSC = 受渡日から次の利払日までの日数です。</para>
          <para>E = 受渡日を含む利払期間の日数です。</para>
          <para>N = 受渡日と償還日の間で買掛金の割引券の番号です。</para>
          <para>A = 利払期間の初日から受渡日までの日数です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PriceDisc">
      <MemberSignature Language="C#" Value="public double PriceDisc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PriceDisc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PriceDisc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PriceDisc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16820)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">割引率: 証券の割引率を指定します。</param>
        <param name="Arg4">償還価額: 額面 $ 100 に対する証券の償還額を指定します。</param>
        <param name="Arg5">基準: 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>割引証券の額面 $100 あたりの価格を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: DATE 関数を使用するか、他の数式または関数の結果として、日付を入力する必要があります。 たとえば、2008 年 5 月 23 日の DATE(2008,5,23) を使用します。 日付をテキストとして入力した場合、問題が発生することができます。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4</term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>受渡日、満期日、基準に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para><b>受領または成熟度が有効な日付でない場合、#VALUE を!</b> エラー値です。 </para>
          <para>場合 ≤ 0 または償還 ≤ 0 で<b>ある</b>が #NUM を返すかどうかの割引です。 エラー値です。 </para>
          <para>場合に&lt;0 または基準&gt;4 で<b>ある場合</b>が #NUM を返す! エラー値です。 </para>
          <para>場合は受領成熟度で<b>ある場合</b>は、#NUM を返します。 エラー値です。 </para>
          <para>
            <b>率</b>として計算されます。 </para>
          <para>あるメソッドの図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para>各項目の意味は次のとおりです。</para>
          <para>B = 年単位に応じて、1 年の日数です。</para>
          <para>DSM = 受渡日から満期日までの日数です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PriceMat">
      <MemberSignature Language="C#" Value="public double PriceMat (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PriceMat([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PriceMat(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PriceMat (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16815)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">発行日: 証券の発行日を指定します。日付にはシリアル値が使用されます。</param>
        <param name="Arg4">利率: 発行日の証券の利率を指定します。</param>
        <param name="Arg5">利回り: 証券の年間配当を指定します。</param>
        <param name="Arg6">基準: 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>満期日に利息が支払われる証券に対して、額面 $100 あたりの価格を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: DATE 関数を使用するか、他の数式または関数の結果として、日付を入力する必要があります。 たとえば、2008 年 5 月 23 日の DATE(2008,5,23) を使用します。 日付をテキストとして入力した場合、問題が発生することができます。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4</term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>受渡日、満期日、発行日、基準に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>受渡日、満期日、または問題が有効な日付でない場合、<b>受渡</b>が #VALUE を返します。 エラー値です。 </para>
          <para>場合レート&lt;0 または利回り&lt;0、<b>受渡</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合に&lt;0 または基準&gt;4、<b>受渡</b>が #NUM を返す! エラー値です。 </para>
          <para>場合は受領成熟度、<b>受渡</b>が #NUM を返します。 エラー値です。 <b>受渡</b>は、次のように計算されます。 </para>
          <para>受渡方法を図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para>各項目の意味は次のとおりです。</para>
          <para>B = 年単位に応じて、1 年の日数です。</para>
          <para>DSM = 受渡日から満期日までの日数です。</para>
          <para>DIM = 問題から満期日までの日数です。</para>
          <para>A = 問題から受渡日までの日数です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Prob">
      <MemberSignature Language="C#" Value="public double Prob (object Arg1, object Arg2, double Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Prob([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Prob(System.Object,System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Prob (Arg1 As Object, Arg2 As Object, Arg3 As Double, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16701)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">x 範囲: 確率範囲と対応関係にある数値 x 含む配列またはセル範囲を指定します。</param>
        <param name="Arg2">確率範囲: x 範囲に含まれるそれぞれの数値に対応する確率を指定します。</param>
        <param name="Arg3">下限: 対象となる数値の下限を指定します。</param>
        <param name="Arg4">上限: 省略可能な引数で、対象となる数値の上限を指定します。</param>
        <summary>x 範囲に含まれる値が下限と上限との間に収まる確率を返します。上限を省略すると、x 範囲に含まれる値が下限と等しくなる確率が計算されます。</summary>
        <returns>To be added.</returns>
        <remarks><para>確率 ≤ 0 の値のいずれかの確率の値のいずれかの場合、または&gt;1、<b>確率</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合は確率範囲 ¹ 1、<b>確率</b>の値の合計が #NUM を返します。 エラー値です。 </para>
          <para><b>上限を省略すると、下限に等しくなる確率を返します。</b> </para>
          <para><b>X 範囲と確率範囲のデータ ポイント数が異なると、エラー値 #n/a が返されます。</b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Product">
      <MemberSignature Language="C#" Value="public double Product (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Product([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Product(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Product (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16567)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1、数値 2 ...: 積を計算する数値を指定します。引数は 1 ～ 30 個まで指定できます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数リストの積を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数に指定した数値、論理値、数値を表す文字列は、計算に使用されますが、エラー値、数値に変換できない文字列を引数に指定すると、エラーになります。 </para>
          <para>引数が配列またはセル範囲である場合、その中に含まれる数値だけが計算の対象となります。配列あるいはセル範囲に含まれる空白セル、論理値、文字列、またはエラー値はすべて無視されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Proper">
      <MemberSignature Language="C#" Value="public string Proper (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Proper([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Proper(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Proper (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Proper(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16498)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">文字列: 文字列、戻り値が文字列となる数式、または文字列を含むセルの参照を指定します。文字列を指定する場合は、半角の二重引用符 (") で囲む必要があります。文字列に英字が含まれていない場合は、文字列がそのまま返されます。</param>
        <summary>文字列中の英単語の先頭文字を大文字に、2 文字目以降の英字を小文字に変換します。文字列中の英字以外の文字は変換されません。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pv">
      <MemberSignature Language="C#" Value="public double Pv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16440)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">利率: 投資の利率を指定します。たとえば、年利 10% の自動車ローンを利用して月払いで返済を行う場合、月単位の金利は 10%/12 = 0.83% となります。この場合、数式には 10%/12、0.83%、または 0.0083 の形式で指定します。</param>
        <param name="Arg2">期間: 投資期間全体での支払回数の合計を指定します。たとえば、4 年ローンを利用して月払いで返済を行う場合、このローンの支払回数は 4*12 = 48 となります。この場合、数式には 48 の形式で指定します。</param>
        <param name="Arg3">定期支払額: 毎回の支払額を指定します。投資期間内に支払額を変更することはできません。通常、定期支払額には元金と利息が含まれますが、その他の手数料や税金は含まれません。たとえば、100 万円を年利 12% の 4 年ローンで借り入れた場合、毎月の返済額は 26,334 円になります。定期支払額は、-26334 のように負の値として指定します。定期支払額を省略した場合は、将来価値を必ず指定してください。</param>
        <param name="Arg4">将来価値: 投資の将来価値、つまり最後の支払いを行った後に残る現金の収支を指定します。将来価値を省略すると、0 を指定したと見なされます。たとえば、ローンなどの借入金の将来価値は 0 になります。たとえば、18 年間で 500 万円をためることを目標にした場合、この投資の将来価値は 5,000,000 になります。投資期間の金利を予測することにより、毎月の貯蓄額を決めることができます。将来価値を省略した場合は、定期支払額を必ず指定してください。</param>
        <param name="Arg5">支払期日: 支払いがいつ行われるかを、数値の 0 または 1 で指定します。省略すると、0 を指定したと見なされます。</param>
        <summary>投資の現在価値を返します。現在価値とは、将来行われる一連の支払いを、現時点で一括払いした場合の合計金額をいいます。たとえば、借金をした場合、借入金額の合計が、貸方に対する現在価値となります。</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 または省略</term>
              <description>各期の期末</description>
            </item>
            <item>
              <term>1</term>
              <description>各期の期首</description>
            </item>
          </list>
          <para>利率と期間を指定するときは、時間的な単位を一致させる必要があります。たとえば、年利 12% の 4 年ローンを月払いで返済する場合、利率には 12%/12 = 1 (%) を、また期間には 4*12 = 48 (月) を指定します。また、これと同じローンを年払いで返済する場合は、利率に 12 (%)、期間に 4 (年) を指定します。 </para>
          <para>財務関数は、以下が適用されます。 </para>
          <list type="table">
            <item>
              <term>CUMIPMT</term>
              <description>PPMT</description>
            </item>
            <item>
              <term>CUMPRINC</term>
              <description>PV</description>
            </item>
            <item>
              <term>FV</term>
              <description>RATE</description>
            </item>
            <item>
              <term>FVSCHEDULE</term>
              <description>XIRR</description>
            </item>
            <item>
              <term>IPMT</term>
              <description>XNPV</description>
            </item>
            <item>
              <term>PMT</term>
              <description />
            </item>
          </list>
          <para>一定額の支払いを一定期間の継続的な一連の定額です。 自動車ローンまたは住宅ローンは、投資に必要です。 詳細については、各関数の説明を参照してください。 </para>
          <para>投資関数では、すべての引数に関して、定額預金の支払いのような出金は負の数で表し、配当金のような入金は正の数で表します。たとえば、銀行口座の預金 10 万円を引数として使用する場合、預金者側は -100000、銀行側では 100000 と指定します。 </para>
          <para>財務関数の引数は、相互に関連しています。たとえば、利率が 0 でない場合は、次の数式が成立します。 </para>
          <para>図 1: 数式のレートがない場合 0</para>
          <para> </para>
          <para> </para>
          <para>0 の場合レートし。</para>
          <para>(定期支払額 * 期間) + 現在価値 + 将来価値 = 0</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile">
      <MemberSignature Language="C#" Value="public double Quartile (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16711)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列: 対象となる数値データを含む配列またはセル範囲を指定します。</param>
        <param name="Arg2">戻り値: 戻り値として返される四分位数の内容を、0 ～ 4 の数値で指定します。</param>
        <summary>データ セットの四分ボックスをオンにします。 四分位数よく使用されます、営業および調査データの母集団を複数のグループに分割します。 たとえば、母集団の中の収入の上位 25% を検索するのに<b>25%</b>を使用できます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Inc(System.Object,System.Double)" />と<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Exc(System.Object,System.Double)" />の方法です。</para>
          <list type="table">
            <item>
              <term>0</term>
              <description>最小値</description>
            </item>
            <item>
              <term>1</term>
              <description>第 1 四分位数 (25%)</description>
            </item>
            <item>
              <term>2</term>
              <description>第 2 四分位数 = 中位数 (50%)</description>
            </item>
            <item>
              <term>3</term>
              <description>第 3 四分位数 (75%)</description>
            </item>
            <item>
              <term>4</term>
              <description>最大値</description>
            </item>
          </list>
          <para>配列が空の場合は、 <b>25%</b>が #NUM を返します。 エラー値です。 </para>
          <para>戻り値に小数点以下の値を指定しても切り捨てられます。</para>
          <para>場合クォート&lt;0 またはクォート&gt;4、 <b>25%</b>が #NUM を返します。 エラー値です。 </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />、および<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />クオートが 0 (ゼロ)、2、4、それぞれ<b>25%</b>と同じ値を返します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile_Exc">
      <MemberSignature Language="C#" Value="public double Quartile_Exc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile_Exc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Exc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile_Exc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile_Exc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16890)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列: 対象となる数値データを含む配列またはセル範囲を指定します。</param>
        <param name="Arg2">戻り値: 戻り値として返される四分位数の内容を、0 ～ 4 の数値で指定します。</param>
        <summary>0 ～ 1 (0 と 1 を除く) の百分位の値に基づいて、配列に含まれるデータから四分位数を抽出します。</summary>
        <returns>To be added.</returns>
        <remarks><para>配列が空の場合は、 <b>Quartile_Exc</b>が #NUM を返します。 エラー値です。 </para>
          <para>戻り値に小数点以下の値を指定しても切り捨てられます。</para>
          <para>場合戻り ≤ 0 または受領 4、 <b>Quartile_Exc</b>のクォートが #NUM を返します!。 エラー値です。 </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />、および<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />クオートが 0 (ゼロ)、2、4、それぞれ<b>Quartile_Exc</b>と同じ値を返します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile_Inc">
      <MemberSignature Language="C#" Value="public double Quartile_Inc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile_Inc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Inc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile_Inc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile_Inc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16891)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列: 対象となる数値データを含む配列またはセル範囲を指定します。</param>
        <param name="Arg2">戻り値: 戻り値として返される四分位数の内容を、0 ～ 4 の数値で指定します。</param>
        <summary>0 ～ 1 (0 と 1 を含む) の百分位の値に基づいて、配列に含まれるデータから四分位数を抽出します。四分位数は、市場調査などのデータで、母集団を複数のグループに分割するために利用されます。たとえば、Quartile_Inc メソッドを使って、母集団の中から所得金額が全体の上位 25% を占めるグループを選び出すことができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>配列が空の場合は、 <b>Quartile_Inc</b>が #NUM を返します。 エラー値です。 </para>
          <para>戻り値に小数点以下の値を指定しても切り捨てられます。</para>
          <para>場合クォート&lt;0 またはクォート&gt;4、 <b>Quartile_Inc</b>が #NUM を返します。 エラー値です。 </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />、および<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />クオートが 0 (ゼロ)、2、4、それぞれ<b>Quartile_Inc</b>と同じ値を返します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quotient">
      <MemberSignature Language="C#" Value="public double Quotient (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quotient([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quotient(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quotient (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quotient(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16801)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">分子: 被除数 (割られる数) を指定します。</param>
        <param name="Arg2">分母: 除数 (割る数) を指定します。</param>
        <summary>除算の商の整数部を返します。商の余り (小数部) を切り捨てる場合に、この関数を使います。</summary>
        <returns>To be added.</returns>
        <remarks><para>いずれかの引数が数値以外の場合は、<b>商</b>は、#VALUE を返します。 エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Radians">
      <MemberSignature Language="C#" Value="public double Radians (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Radians([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Radians(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Radians (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Radians(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16726)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">角度: ラジアンに変換する角度を指定します。</param>
        <summary>度をラジアンに変換します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RandBetween">
      <MemberSignature Language="C#" Value="public double RandBetween (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RandBetween([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RandBetween(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RandBetween (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RandBetween(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16848)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">最小値: 乱数の最小値を整数で指定します。</param>
        <param name="Arg2">最大値: 乱数の最大値を整数で指定します。</param>
        <summary>指定された範囲内の整数の乱数を返します。ワークシートが再計算されるたびに新しい乱数が返されます。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank">
      <MemberSignature Language="C#" Value="public double Rank (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16600)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 範囲内での順位 (位置) を調べる数値を指定します。</param>
        <param name="Arg2">範囲: 数値を含むセル範囲の参照または名前、または数値配列を指定します。範囲内に含まれている数値だけが計算の対象となり、そこに含まれている文字列、空白セル、論理値は無視されます。また、範囲内にエラー値が含まれていると、そのエラー値が返されます。</param>
        <param name="Arg3">順序: 数値の順位を決めるため、範囲内の数値を並べ替える方法を指定します。</param>
        <summary>順序に従って範囲内の数値を並べ替えたとき、数値が何番目に位置するかを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Eq(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />と<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Avg(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />の方法です。</para>
          <para>順序に 0 を指定するか、順序を省略すると、範囲内の数値が ... 3、2、1 のように降順に並べ替えられます。</para>
          <para>順序に 0 以外の数値を指定すると、範囲内の数値が 1、2、3, ... のように昇順で並べ替えられます。</para>
          <para>
            <b>ランク</b>をは、同じランクに重複する番号を使用できます。 ただし、重複する番号が存在することは、それ以降の数値のランクを影響します。 たとえば、整数のリストで昇順に並べ替えられます場合は、10 回が表示されますが、その 11 (順位が 6 の数値はありません) 7 のランクは、第 5 のランクがあります。</para>
          <para>目的によっては、ので、同順位を考慮したランクの定義を使用することも 1 つ。 前の例では、いずれかが必要とする変更後の順位を 5.5 10 です。 これは、<b>ランク</b>によって返される値を次の補正係数を追加することによって実行できます。 この補正因子は降順でランクが計算される場合の両方 (注文 = 0 または省略した場合) の順序を昇順または (順序 = 0 以外の値)。</para>
          <para>リンク付けされている ranks=[COUNT(ref) + 1 の-ランク (数値、参照、0) – ランク (数値、参照、1) の補正係数]/2。</para>
          <para>次の例では、RANK(A2,A1:A5,1) が 3 に等しい。 補正因子は (5 + 1 – 2 – 3)/2 = 0.5 となるので、同順位を考慮して訂正した順位は、3 + 0.5 = 3.5。 Ref の数が 1 回だけ発生した場合<b>ランク</b>を対の調整する必要がないので補正因子は 0 を指定します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank_Avg">
      <MemberSignature Language="C#" Value="public double Rank_Avg (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank_Avg([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Avg(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank_Avg (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16892)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 範囲内での順位 (位置) を調べる数値を指定します。</param>
        <param name="Arg2">範囲: 数値を含むセル範囲の参照か名前、または数値配列を指定します。範囲内に含まれている数値だけが計算の対象となり、そこに含まれている文字列、空白セル、論理値は無視されます。また、範囲内にエラー値が含まれていると、そのエラー値が返されます。</param>
        <param name="Arg3">順序: 数値の順位を決めるため、範囲内の数値を並べ替える方法を指定します。順序に 0 を指定するか、順序を省略すると、範囲内の数値が ... 3、2、1 のように降順に並べ替えられます。順序に 0 以外の数値を指定すると、範囲内の数値が 1、2、3, ... のように昇順で並べ替えられます。</param>
        <summary>順序に従って範囲内の数値を並べ替えたとき、特定の数値が何番目に位置するかを返します。複数の値が同じ順位の場合、平均順位が返されます。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank_Eq">
      <MemberSignature Language="C#" Value="public double Rank_Eq (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank_Eq([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Eq(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank_Eq (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16893)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 範囲内での順位 (位置) を調べる数値を指定します。</param>
        <param name="Arg2">範囲: 数値を含むセル範囲の参照か名前、または数値配列を指定します。範囲内に含まれている数値だけが計算の対象となり、そこに含まれている文字列、空白セル、論理値は無視されます。また、範囲内にエラー値が含まれていると、そのエラー値が返されます。</param>
        <param name="Arg3">順序: 数値の順位を決めるため、範囲内の数値を並べ替える方法を指定します。</param>
        <summary>順序に従って範囲内の数値を並べ替えたとき、数値が何番目に位置するかを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>順序に 0 を指定するか、順序を省略すると、範囲内の数値が ... 3、2、1 のように降順に並べ替えられます。</para>
          <para>順序に 0 以外の数値を指定すると、範囲内の数値が 1、2、3, ... のように昇順で並べ替えられます。</para>
          <para>
            <b>Rank_Eq</b>は、同じランクに重複する番号を使用できます。 ただし、重複する番号が存在することは、それ以降の数値のランクを影響します。 たとえば、整数のリストで昇順に並べ替えられます場合は、10 回が表示されますが、その 11 (順位が 6 の数値はありません) 7 のランクは、第 5 のランクがあります。</para>
          <para>目的によって関係を考慮したランクの定義を使用する場合があります。 前の例では、10 の順位を 5.5 に変更されたとします。 これを行うには、 <b>Rank_Eq</b>によって返される値を次の補正係数を追加します。 この補正因子は降順でランクが計算される場合の両方 (注文 = 0 または省略した場合) の順序を昇順または (順序 = 0 以外の値)。</para>
          <para>リンク付けされている ranks=[COUNT(ref) + 1-RANK_EQ (番号は、ref、0) – RANK_EQ の補正係数 (番号、参照、次の例の 1)]/2.In、RANK_EQ(A2,A1:A5,1) が 3 に等しい。 補正因子は (5 + 1 – 2 – 3)/2 = 0.5 となるので、同順位を考慮して訂正した順位は、3 + 0.5 = 3.5。 Ref の数が 1 回だけ発生した場合<b>Rank_Eq</b>は、引き分けを調整する必要がないので補正因子は 0 を指定します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public double Rate (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rate([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rate(System.Double,System.Double,System.Double,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rate (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16444)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">期間: 投資期間全体での支払い回数の合計を指定します。</param>
        <param name="Arg2">定期支払額: 毎回の支払額を指定します。投資期間内に支払額を変更することはできません。通常、定期支払額には元金と利息が含まれますが、その他の手数料や税金は含まれません。定期支払額を省略した場合は、必ず将来価値を指定してください。</param>
        <param name="Arg3">現在価値: 投資の現在価値、つまり将来行われる一連の支払いを現時点で一括払いした場合の合計金額を指定します。</param>
        <param name="Arg4">将来価値: 投資の将来価値、つまり最後の支払いを行った後に残る現金の収支を指定します。将来価値を省略すると、0 を指定したと見なされます。たとえば、ローンなどの借入金の将来価値は 0 になります。</param>
        <param name="Arg5">支払期日: 支払いがいつ行われるかを、数値の 0 または 1 で指定します。省略すると、0 を指定したと見なされます。</param>
        <param name="Arg6">推定値: 利率がおよそどれくらいになるかを推定した値を指定します。</param>
        <summary>投資の利率を返します。Rate メソッドの計算には、反復計算の手法が使用されるため、適切な解が見つからないか、複数の解が同時に見つかることになります。反復計算を 20 回実行した時点で、計算結果の収束値が 0.0000001 以下にならない場合は、エラー値 #NUM! が返されます。</summary>
        <returns>To be added.</returns>
        <remarks><para>Nper の引数、pmt、pv、fv、タイプ、参照の詳細については<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />です。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>各期の期末</description>
            </item>
            <item>
              <term>1</term>
              <description>各期の期首</description>
            </item>
          </list>
          <para>推定値を省略すると、10% が計算に使用されます。</para>
          <para><b>レート</b>が収束しない場合は、推定値に異なる値をしてみてください。 <b>通常収束推定値が 0 と 1 の間です。</b></para>
          <para>推定値と期間を指定するときは、時間的な単位を一致させる必要があります。たとえば、年利 12% の 4 年ローンを月払いで返済する場合、推定値には 12%/12 = 1 (%) を、また期間には 4*12 = 48 (月) を指定します。また、これと同じローンを年払いで返済する場合は、推定値に 12 (%)、期間に 4 (年) を指定します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Received">
      <MemberSignature Language="C#" Value="public double Received (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Received([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Received(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Received (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16818)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">投資額: 証券への投資額を指定します。</param>
        <param name="Arg4">割引率: 証券の割引率を指定します。</param>
        <param name="Arg5">基準: 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>全額投資された証券に対して、満期日に支払われる金額を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: DATE 関数を使用するか、他の数式または関数の結果として、日付を入力する必要があります。 たとえば、2008 年 5 月 23 日の DATE(2008,5,23) を使用します。 日付をテキストとして入力した場合、問題が発生することができます。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4</term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>受渡日、満期日、基準に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para><b>受領または成熟度が有効な日付でない場合、#VALUE を!</b> エラー値です。 </para>
          <para>場合投資 ≤ 0 または割引 ≤ 0、<b>受信</b>が #NUM を返します!。 エラー値です。 </para>
          <para>場合に&lt;0 または基準&gt;4 では、<b>受信</b>が #NUM を返す! エラー値です。 </para>
          <para>かどうか受領成熟度に、受信が #NUM を返します。 エラー値です。 <b>受信日時</b>は、次のように計算されます。 </para>
          <para>受信メソッドについて図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para>各項目の意味は次のとおりです。</para>
          <para>B = 年の基礎によって、1 年の日数です。</para>
          <para>DIM = 問題から満期日までの日数です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string Arg1, double Arg2, double Arg3, string Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Replace([in]string Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]string Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Arg1 As String, Arg2 As Double, Arg3 As Double, Arg4 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ Arg1, double Arg2, double Arg3, System::String ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16503)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">置き換えを行う文字列を指定します。</param>
        <param name="Arg2">内の文字の位置を<paramref name="Arg1" />を交換する<paramref name="Arg4" />。</param>
        <param name="Arg3">文字数<paramref name="Arg1" />を<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" />に置き換える方法<paramref name="Arg4" />。</param>
        <param name="Arg4">テキスト内の文字を置き換える<paramref name="Arg1" />。</param>
        <summary>指定した文字の数に従って、テキスト文字列の一部を別のテキスト文字列に置き換えます。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceB">
      <MemberSignature Language="C#" Value="public string ReplaceB (string Arg1, double Arg2, double Arg3, string Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReplaceB([in]string Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]string Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReplaceB (Arg1 As String, Arg2 As Double, Arg3 As Double, Arg4 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReplaceB(System::String ^ Arg1, double Arg2, double Arg3, System::String ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16591)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">文字列: 中の文字を置き換える対象テキストを指定します。</param>
        <param name="Arg2">開始位置: 置換文字列と置き換える先頭文字の位置 (文字番号) を数値で指定します。文字列の先頭文字の位置が 1 になります。</param>
        <param name="Arg3">文字数: 置換文字列と置き換える文字列の文字数を指定します。</param>
        <param name="Arg4">置換文字列: 文字列の一部と置き換える文字列を指定します。</param>
        <summary>ReplaceB メソッドは、文字列中の指定されたバイト数の文字を別の文字に置き換えます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>:<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" />はシングル バイト文字を使用する言語での使用を意図したものセット (SBCS) で、 <b>ReplaceB</b>が 2 バイト文字セット (DBCS) を使用する言語で使用するために意図したものです。 お使いのコンピューター上の既定の言語設定は、戻り値を次のように影響します。</para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" />常に 1 バイトまたは 2 バイト、1 は、既定の言語の設定に関係なくかどうかは、それぞれの文字をカウントします。 </para>
          <para>
            <b>ReplaceB</b>関数では、DBCS をサポートする言語の編集を有効にして、既定の言語として設定するときに、各 2 バイト文字が 2 として数えられます。 <b>それ以外の場合、数え各文字 1 とします。</b> </para>
          <para>DBCS をサポートする言語には、日本語、簡体字中国語、繁体字中国語、および韓国語があります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rept">
      <MemberSignature Language="C#" Value="public string Rept (string Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Rept([in]string Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rept(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rept (Arg1 As String, Arg2 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Rept(System::String ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16414)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">文字列: 繰り返す文字列を指定します。</param>
        <param name="Arg2">繰り返し回数: 文字列を繰り返す回数を、正の数値で指定します。</param>
        <summary>文字列を指定された回数だけ繰り返して表示します。このメソッドを使用して、セル幅全体に文字列を表示することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para><b>繰り返し回数が 0 (ゼロ) のかどうかは、rept</b> ""(空の文字列) です。 </para>
          <para>繰り返し回数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para><b>Rept</b>関数の結果は、32,767 文字より長くすることはできませんまたは #VALUE が返さ<b>れます</b>。 </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Roman">
      <MemberSignature Language="C#" Value="public string Roman (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Roman([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Roman(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Roman (Arg1 As Double, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16738)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 変換するアラビア数字を指定します。</param>
        <param name="Arg2">書式: ローマ数字の書式を数値で指定します。0 を指定すると、古典的な書式でローマ数字が表示されます。書式の値が大きくなるほど、ローマ数字は簡便な形式で表示されます。</param>
        <summary>テキストとしてアラビア数字をローマ数字に変換します。</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 または省略</term>
              <description>正式</description>
            </item>
            <item>
              <term>1</term>
              <description>簡単です。</description>
            </item>
            <item>
              <term>2</term>
              <description>簡単です。</description>
            </item>
            <item>
              <term>3</term>
              <description>簡単です。</description>
            </item>
            <item>
              <term>4</term>
              <description>略式</description>
            </item>
            <item>
              <term>
                <b>true</b>
              </term>
              <description>クラシック</description>
            </item>
            <item>
              <term>
                <b>false</b>
              </term>
              <description>略式</description>
            </item>
          </list>
          <para>数値に負の値を指定すると、エラー値 #VALUE! が返されます。</para>
          <para>数値に 3999 より大きい値を指定すると、エラー値 #VALUE! が返されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public double Round (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Round([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Round (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Round(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16411)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 四捨五入の対象となる数値を指定します。</param>
        <param name="Arg2">桁数: 数値を四捨五入した結果の桁数を指定します。</param>
        <summary>数値を四捨五入して指定された桁数にします。</summary>
        <returns>To be added.</returns>
        <remarks><para>桁数に正の数を指定すると、数値は小数点の右側 (小数点以下) で四捨五入され、小数点以下の桁数が桁数に等しくなります。 </para>
          <para>桁数に 0 を指定すると、数値は最も近い整数として四捨五入されます。 </para>
          <para>桁数に負の数を指定すると、数値は小数点の左側 (整数部分) の指定した桁 (1 の位を 0 とする) に四捨五入されます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundBahtDown">
      <MemberSignature Language="C#" Value="public double RoundBahtDown (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundBahtDown([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundBahtDown(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundBahtDown (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundBahtDown(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16760)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>内部使用のため予約済みです。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundBahtUp">
      <MemberSignature Language="C#" Value="public double RoundBahtUp (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundBahtUp([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundBahtUp(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundBahtUp (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundBahtUp(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16761)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>内部使用のため予約済みです。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundDown">
      <MemberSignature Language="C#" Value="public double RoundDown (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundDown([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundDown(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundDown (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundDown(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16597)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 切り捨ての対象となる実数値を指定します。</param>
        <param name="Arg2">桁数: 数値を切り上げた結果の桁数を指定します。</param>
        <summary>数値を指定された桁数で切り捨てます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>RoundDown</b>の動作と同じように<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" />、点を除いて、常に数値を切り捨てます。 </para>
          <para>桁数に正の数を指定すると、数値は小数点の右 (小数点以下) の指定した桁で切り捨てられます。</para>
          <para>桁数に 0 を指定すると、数値は最も近い整数に切り捨てられます。</para>
          <para>桁数に負の数を指定すると、数値は小数点の左 (整数部分) の指定した桁 (1 の位を 0 とする) に切り捨てられます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundUp">
      <MemberSignature Language="C#" Value="public double RoundUp (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundUp([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundUp(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundUp (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundUp(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16596)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 切り上げの対象となる実数値を指定します。</param>
        <param name="Arg2">桁数: 数値を切り上げた結果の桁数を指定します。</param>
        <summary>数値を指定された桁数に切り上げます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>RoundUp</b>の動作と同じように<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" />常に数値を四捨五入することを除いて、です。 </para>
          <para>桁数に正の数を指定すると、数値は小数点の右 (小数点以下) の指定した桁に切り上げられます。</para>
          <para>桁数に 0 を指定すると、数値は最も近い整数に切り上げられます。</para>
          <para>桁数に負の数を指定すると、数値は小数点の左 (整数部分) の指定した桁 (1 の位を 0 とする) に切り上げられます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rri">
      <MemberSignature Language="C#" Value="public double Rri (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rri([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rri(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rri (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Rri(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16963)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">投資の期間。</param>
        <param name="Arg2">投資の現在価値。</param>
        <param name="Arg3">投資の将来価値。</param>
        <summary>投資の成長に対する等価利率を返します。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RSq">
      <MemberSignature Language="C#" Value="public double RSq (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RSq([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RSq(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSq (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RSq(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16697)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">既知の y: 直線回帰のデータを含む配列またはセル範囲を指定します。</param>
        <param name="Arg2">既知の x: 直線回帰のデータを含む配列またはセル範囲を指定します。</param>
        <summary>既知の y と既知の x では、データ ポイントから Pearson 製品時点相関係数の 2 乗を返します。 詳細については、「<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pearson(System.Object,System.Object)" />」をご覧ください。 R 2 乗値は、x の分散に起因する y の分散の比率として解釈できます。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para><b>RSq</b>は、既知の y と既知のデータ ポイントの個数が異なる、または場合、#N/A エラー値を返します。 </para>
          <para>既知の y と既知の x にデータが 1 つしか含ま<b>れない</b>は #DIV または 0 を返します。 エラー値です。 </para>
          <para>ピアソンの積率相関係数 r を表す方程式は次のとおりです。 </para>
          <para>図 1: Pearson 製品時点相関係数</para>
          <para> </para>
          <para> </para>
          <para>x と y は、このサンプルは、AVERAGE(known_x's) と AVERAGE(known_y's) ことを意味します。</para>
          <para>
            <b>RSq</b>この相関係数の 2 乗した r2 を返します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="RTD">
      <MemberSignature Language="C#" Value="public object RTD (object progID, object server, object topic1, object topic2, object topic3, object topic4, object topic5, object topic6, object topic7, object topic8, object topic9, object topic10, object topic11, object topic12, object topic13, object topic14, object topic15, object topic16, object topic17, object topic18, object topic19, object topic20, object topic21, object topic22, object topic23, object topic24, object topic25, object topic26, object topic27, object topic28);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object RTD([in]object progID, [in]object server, [in]object topic1, [in]object topic2, [in]object topic3, [in]object topic4, [in]object topic5, [in]object topic6, [in]object topic7, [in]object topic8, [in]object topic9, [in]object topic10, [in]object topic11, [in]object topic12, [in]object topic13, [in]object topic14, [in]object topic15, [in]object topic16, [in]object topic17, [in]object topic18, [in]object topic19, [in]object topic20, [in]object topic21, [in]object topic22, [in]object topic23, [in]object topic24, [in]object topic25, [in]object topic26, [in]object topic27, [in]object topic28) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RTD(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTD (progID As Object, server As Object, topic1 As Object, Optional topic2 As Object, Optional topic3 As Object, Optional topic4 As Object, Optional topic5 As Object, Optional topic6 As Object, Optional topic7 As Object, Optional topic8 As Object, Optional topic9 As Object, Optional topic10 As Object, Optional topic11 As Object, Optional topic12 As Object, Optional topic13 As Object, Optional topic14 As Object, Optional topic15 As Object, Optional topic16 As Object, Optional topic17 As Object, Optional topic18 As Object, Optional topic19 As Object, Optional topic20 As Object, Optional topic21 As Object, Optional topic22 As Object, Optional topic23 As Object, Optional topic24 As Object, Optional topic25 As Object, Optional topic26 As Object, Optional topic27 As Object, Optional topic28 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16763)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.Object" />
        <Parameter Name="server" Type="System.Object" />
        <Parameter Name="topic1" Type="System.Object" />
        <Parameter Name="topic2" Type="System.Object" />
        <Parameter Name="topic3" Type="System.Object" />
        <Parameter Name="topic4" Type="System.Object" />
        <Parameter Name="topic5" Type="System.Object" />
        <Parameter Name="topic6" Type="System.Object" />
        <Parameter Name="topic7" Type="System.Object" />
        <Parameter Name="topic8" Type="System.Object" />
        <Parameter Name="topic9" Type="System.Object" />
        <Parameter Name="topic10" Type="System.Object" />
        <Parameter Name="topic11" Type="System.Object" />
        <Parameter Name="topic12" Type="System.Object" />
        <Parameter Name="topic13" Type="System.Object" />
        <Parameter Name="topic14" Type="System.Object" />
        <Parameter Name="topic15" Type="System.Object" />
        <Parameter Name="topic16" Type="System.Object" />
        <Parameter Name="topic17" Type="System.Object" />
        <Parameter Name="topic18" Type="System.Object" />
        <Parameter Name="topic19" Type="System.Object" />
        <Parameter Name="topic20" Type="System.Object" />
        <Parameter Name="topic21" Type="System.Object" />
        <Parameter Name="topic22" Type="System.Object" />
        <Parameter Name="topic23" Type="System.Object" />
        <Parameter Name="topic24" Type="System.Object" />
        <Parameter Name="topic25" Type="System.Object" />
        <Parameter Name="topic26" Type="System.Object" />
        <Parameter Name="topic27" Type="System.Object" />
        <Parameter Name="topic28" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="progID">リアルタイム サーバーのプログラム ID を表す文字列を指定します。</param>
        <param name="server">サーバー名、 <b>Null</b>文字列または<b>vbNullString</b>定数です。</param>
        <param name="topic1"><paramref name="topic1" />–<paramref name="topic28" />トピックを表す<b>文字列</b>。</param>
        <param name="topic2">To be added.</param>
        <param name="topic3">To be added.</param>
        <param name="topic4">To be added.</param>
        <param name="topic5">To be added.</param>
        <param name="topic6">To be added.</param>
        <param name="topic7">To be added.</param>
        <param name="topic8">To be added.</param>
        <param name="topic9">To be added.</param>
        <param name="topic10">To be added.</param>
        <param name="topic11">To be added.</param>
        <param name="topic12">To be added.</param>
        <param name="topic13">To be added.</param>
        <param name="topic14">To be added.</param>
        <param name="topic15">To be added.</param>
        <param name="topic16">To be added.</param>
        <param name="topic17">To be added.</param>
        <param name="topic18">To be added.</param>
        <param name="topic19">To be added.</param>
        <param name="topic20">To be added.</param>
        <param name="topic21">To be added.</param>
        <param name="topic22">To be added.</param>
        <param name="topic23">To be added.</param>
        <param name="topic24">To be added.</param>
        <param name="topic25">To be added.</param>
        <param name="topic26">To be added.</param>
        <param name="topic27">To be added.</param>
        <param name="topic28">To be added.</param>
        <summary>ソースに接続してリアルタイム データを取得します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Search">
      <MemberSignature Language="C#" Value="public double Search (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Search([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Search(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Search (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16466)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">検索文字列: 検索する文字列を指定します。</param>
        <param name="Arg2">対象: 検索文字列を含む文字列を指定します。</param>
        <param name="Arg3">開始位置: 検索を開始する位置を指定します。</param>
        <summary><b>検索</b>し、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> 、2 番目のテキスト文字列内の 1 つのテキスト文字列を検索し、2 番目のテキスト文字列の最初の文字から最初のテキスト文字列の開始位置の数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>:<b>検索</b>は、シングル バイト文字セット (SBCS) を使用する言語で使用するため、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />セット (DBCS) を 2 バイト文字を使用する言語での使用を意図したものです。 お使いのコンピューター上の既定の言語設定次のように、戻り値に影響を与える:<b>検索</b>は、1 バイトまたは 2 バイト、1 は、既定の言語の設定に関係なくかどうか常に、各文字をカウントします。 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />DBCS をサポートする言語の編集を有効にして、既定の言語として設定すると、2 つとして各 2 バイト文字をカウントします。 それ以外の場合、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />各文字を 1 として数えられます。</para>
          <para>DBCS をサポートする言語には、日本語、簡体字中国語、繁体字中国語、および韓国語があります。</para>
          <para><b>検索</b>を使用して<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />MID および midb 関数を使用できるように、別のテキスト文字列内の文字または文字列の場所を決定するまたは<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" />と<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" />テキストを変更する機能です。 </para>
          <para>
            <b>検索</b>と<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />は、大文字小文字を区別しません。 使用する大文字と小文字を区別して検索を行う場合は、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />と<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" />。 </para>
          <para>検索文字列では、半角の疑問符 (?) または半角のアスタリスク (*) をワイルドカード文字として使用することができます。ワイルドカード文字の疑問符は任意の 1 文字を表し、アスタリスクは任意の文字列を表します。ワイルドカード文字ではなく、通常の文字として疑問符やアスタリスクを検索する場合は、その文字の前に、"~*" のように半角のティルダ (~) を付けます。</para>
          <para>検索文字列が見つからないと、エラー値 #VALUE! が返されます。</para>
          <para>開始位置を省略すると、1 を指定したと見なされます。</para>
          <para>開始位置に 0 以下の整数を指定した場合、または開始位置が対象の文字数よりも大きい場合は、エラー値 #VALUE! が返されます。</para>
          <para>開始位置を使用すると、指定した文字数を省略できます。 <b>検索</b>を使用して、例として、たとえば、テキスト文字列"AYF0093 を使用している.YoungMensApparel"です。 テキスト文字列の説明部分の最初の"Y"の数を検索するのには開始位置に設定 8 テキストのシリアル番号部分が検索されないようにします。 <b>検索</b>が文字 8 で始まって、次の文字で find_text を検出および 9 を返します。 <b>検索</b>常に、文字数を取得している within_text の最初から開始位置が 1 より大きい場合、スキップする文字をカウントします。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchB">
      <MemberSignature Language="C#" Value="public double SearchB (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SearchB([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SearchB (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16590)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">検索文字列: 検索する文字列を指定します。</param>
        <param name="Arg2">対象: 検索文字列を含む文字列を指定します。</param>
        <param name="Arg3">開始位置: 検索を開始する位置を指定します。</param>
        <summary>Search メソッドおよび SearchB メソッドは、指定された文字列を他の文字列の中で検索し、その文字列が最初に現れる位置を左端から数え、その番号を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>:<b>検索</b>は、シングル バイト文字セット (SBCS) を使用する言語で使用するため、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />セット (DBCS) を 2 バイト文字を使用する言語での使用を意図したものです。 お使いのコンピューター上の既定の言語設定次のように、戻り値に影響を与える:<b>検索</b>は、1 バイトまたは 2 バイト、1 は、既定の言語の設定に関係なくかどうか常に、各文字をカウントします。 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />DBCS をサポートする言語の編集を有効にして、既定の言語として設定すると、2 つとして各 2 バイト文字をカウントします。 それ以外の場合、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />各文字を 1 として数えられます。</para>
          <para>DBCS をサポートする言語には、日本語、簡体字中国語、繁体字中国語、および韓国語があります。</para>
          <para><b>検索</b>を使用して<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />MID および midb 関数を使用できるように、別のテキスト文字列内の文字または文字列の場所を決定するまたは<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" />と<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" />テキストを変更する機能です。 </para>
          <para>
            <b>検索</b>と<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />は、大文字小文字を区別しません。 使用する大文字と小文字を区別して検索を行う場合は、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />と<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" />。 </para>
          <para>検索文字列では、半角の疑問符 (?) または半角のアスタリスク (*) をワイルドカード文字として使用することができます。ワイルドカード文字の疑問符は任意の 1 文字を表し、アスタリスクは任意の文字列を表します。ワイルドカード文字ではなく、通常の文字として疑問符やアスタリスクを検索する場合は、その文字の前に、"~*" のように半角のティルダ (~) を付けます。</para>
          <para>検索文字列が見つからないと、エラー値 #VALUE! が返されます。</para>
          <para>開始位置を省略すると、1 を指定したと見なされます。</para>
          <para>開始位置に 0 以下の整数を指定した場合、または開始位置が対象の文字数よりも大きい場合は、エラー値 #VALUE! が返されます。</para>
          <para>開始位置を使用すると、指定した文字数を省略できます。 <b>検索</b>を使用して、例として、たとえば、テキスト文字列"AYF0093 を使用している.YoungMensApparel"です。 テキスト文字列の説明部分の最初の"Y"の数を検索するのには開始位置に設定 8 テキストのシリアル番号部分が検索されないようにします。 <b>検索</b>が文字 8 で始まって、次の文字で find_text を検出および 9 を返します。 <b>検索</b>常に、文字数を取得している within_text の最初から開始位置が 1 より大きい場合、スキップする文字をカウントします。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Sec">
      <MemberSignature Language="C#" Value="public double Sec (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sec([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sec(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sec (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sec(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16938)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">セカントを求める角度をラジアンで指定します。</param>
        <summary>角度のセカントを返します。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sech">
      <MemberSignature Language="C#" Value="public double Sech (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sech([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sech(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sech (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sech(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16939)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">双曲線正割を求める角度を指定します。</param>
        <summary>角度の双曲線正割 (ハイパーボリック セカント) を返します。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeriesSum">
      <MemberSignature Language="C#" Value="public double SeriesSum (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SeriesSum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SeriesSum(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SeriesSum (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SeriesSum(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16798)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: べき級数に代入する値を指定します。</param>
        <param name="Arg2">n: x のべき乗の初期値を指定します。</param>
        <param name="Arg3">m: 級数の各項に対する n の増分を指定します。</param>
        <param name="Arg4">係数: x の (n+m) 乗の乗数を指定します。係数に含まれる値の個数でべき級数の項数が決定します。たとえば係数に 3 つの値が含まれている場合、3 項のべき級数が求められます。</param>
        <summary>数式に基づく級数の和を返します: SERIES(x,n,m,a) = a1xn+a2x(n+m)+a3x(n+2m)+...+aix(n+(i-1)m)</summary>
        <returns>To be added.</returns>
        <remarks><para>いずれかの引数が数値以外の場合は、 <b>SeriesSum</b>が #VALUE を返します。 エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public double Sinh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sinh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sinh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sinh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16613)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 双曲線正弦を求める実数を指定します。</param>
        <summary>数値の双曲線正弦 (ハイパーボリック サイン) を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>双曲線正弦 (ハイパーボリック サイン) は、次の数式で表されます。</para>
          <para>双曲線正弦の図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Skew">
      <MemberSignature Language="C#" Value="public double Skew (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Skew([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Skew(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Skew (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16707)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1, 数値 2, … : 計算の対象となる最大 30 個までの数値を指定できます。また、半角のコンマ (,) で区切られた数値の代わりに、配列またはセル範囲を指定することもできます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>分布の歪度を返します。歪度とは、分布の平均値周辺での両側の非対称度を表す値です。正の歪度は対称となる分布が正の方向へ伸びる非対称な側を持つことを示し、負の歪度は対称となる分布が負の方向へ伸びる非対称な側を持つことを示します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>データ ポイントが 3 つ未満、またはサンプルの標準偏差が 0、# の DIV または 0 を返します<b>傾斜</b>! エラー値です。 </para>
          <para>分布の歪度は次の式で定義されます。 </para>
          <para>歪み度の数式を図 1:</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Skew_p">
      <MemberSignature Language="C#" Value="public double Skew_p (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Skew_p([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Skew_p(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Skew_p (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16960)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg2">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg3">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg4">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg5">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg6">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg7">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg8">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg9">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg10">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg11">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg12">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg13">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg14">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg15">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg16">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg17">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg18">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg19">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg20">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg21">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg22">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg23">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg24">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg25">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg26">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg27">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg28">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg29">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <param name="Arg30">母集団の歪度を求める 1 個から 254 個の数値、または数値を含む名前、配列、セル参照を指定します。</param>
        <summary>母集団に基づく分布の歪度を取得します。歪度とは、分布の平均値周辺での両側の非対称度を表す値です。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sln">
      <MemberSignature Language="C#" Value="public double Sln (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sln([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sln(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sln (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sln(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16526)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">取得価額: 資産を購入した時点での価格を指定します。</param>
        <param name="Arg2">残存価額: 耐用年数が終了した時点での資産の価格を指定します。</param>
        <param name="Arg3">耐用年数: 資産を使用できる年数、つまり償却の対象となる資産の寿命年数を指定します。</param>
        <summary>定額法 (Straight-line Method) を使用して、資産の 1 期あたりの減価償却費を返します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Slope">
      <MemberSignature Language="C#" Value="public double Slope (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Slope([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slope (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Slope(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16699)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">既知の y: 従属変数の値を含む数値配列またはセル範囲を指定します。</param>
        <param name="Arg2">既知の x: 独立変数の値を含む数値配列またはセル範囲を指定します。</param>
        <summary>既知の y と既知の x のデータから回帰直線の傾きを返します。直線の傾きとは、直線上の 2 点の垂直方向の距離を水平方向の距離で除算した値で、回帰直線の変化率に対応します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para><b>既知の y と既知の x が空のデータ ポイント数が異なる、または #N/A エラー値が返されます。</b> </para>
          <para>回帰直線の傾きは、次の式で表されます。 </para>
          <para>回帰直線の傾きの図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para><b>スロープ</b>で使用されている基になるアルゴリズムと<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" />関数で使用されている基になるアルゴリズムとは異なる、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />関数です。 データが不定で共線性と、これらのアルゴリズムの違いは異なる結果につながります。 たとえば、既知の y 引数のデータ要素が 0、既知の x 引数のデータ要素が 1 の場合。 </para>
          <list type="bullet">
            <item>
              <description>
                <b>スロープ</b>と<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" />#DIV または 0 を返します。 エラーを返します。 <b>スロープ</b>と<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" />のアルゴリズムは、1 つの答えを探すように設計されていて、ここですることができます複数の回答です。 </description>
            </item>
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />0 の値を返します。 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />アルゴリズムは、共線性のデータに対して適切な結果を返すように設計されていて、ここで少なくとも 1 つの解が求められます。</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Small">
      <MemberSignature Language="C#" Value="public double Small (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Small([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Small(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Small (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Small(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16710)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">範囲: 抽出の対象となるデータが入力されているセル範囲または配列を指定します。</param>
        <param name="Arg2">順位: 抽出する値の小さい方から数えた順位を数値で指定します。</param>
        <summary>1 組のデータの中で順位番目に小さなデータを返します。この関数を利用すると、相対的な順位に基づいて、データの中から特定の値を選択することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>配列が空の場合は、<b>小さな</b>#NUM を返します。 エラー値です。 </para>
          <para>≤ 0 または k がデータの数を超えるかどうかは次のようにポイントしている場合<b>小さな</b>#NUM を返します。 エラー値です。 </para>
          <para>n を範囲に含まれているデータの個数とするとき、SMALL(範囲,1) は対象となるデータの最小値を返します。また、SMALL(範囲,n) は対象となるデータの最大値を返します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SqrtPi">
      <MemberSignature Language="C#" Value="public double SqrtPi (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SqrtPi([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SqrtPi(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SqrtPi (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SqrtPi(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16800)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: π倍する数値を指定します。</param>
        <summary>(数値 * π) の平方根を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>数値の場合&lt;0、 <b>SqrtPi</b>が #NUM を返します。 エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Standardize">
      <MemberSignature Language="C#" Value="public double Standardize (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Standardize([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Standardize(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Standardize (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Standardize(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16681)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 標準化変量を計算する数値を指定します。</param>
        <param name="Arg2">平均: 対象となる分布の算術平均 (相加平均) を指定します。</param>
        <param name="Arg3">標準偏差: 対象となる分布の標準偏差を指定します。</param>
        <summary>平均と標準偏差で決定される分布を対象に、標準化変量を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>場合は標準偏差 ≤ 0、<b>標準化</b>が #NUM を返します。 エラー値です。 </para>
          <para>標準化変量は、次の式で表されます。 </para>
          <para>正規化された値の数式を図 1:</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev">
      <MemberSignature Language="C#" Value="public double StDev (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16396)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1, 数値 2, … : 母集団の標本に対応する数値を指定します。引数は 1 個から 30 個まで指定できます。引数をコンマ (,) で区切って指定する代わりに、配列または配列への参照を使って指定することもできます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数を標本と見なし、標本に基づいて母集団の標準偏差の推定値を返します。標準偏差とは、統計的な対象となる値がその平均からどれだけ広い範囲に分布しているかを計量したものです。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />メソッドです。</para>
          <para>
            <b>標準偏差</b>は、引数を母集団の標本であると見なします。 データが母集団全体を表す場合は、 <b>stdev 関数</b>を使って標準偏差を計算します。 </para>
          <para>標準偏差は、非バイアス法または n-1 法を使って計算されます。</para>
          <para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数が配列またはセル範囲である場合、その中に含まれる数値だけが計算の対象となります。空白セル、論理値、文字列、またはエラー値はすべて無視されます。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>
            <b>標準偏差</b>は、次の数式を使用します。 </para>
          <para>StDev メソッドは、図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para>x は、標本平均が AVERAGE(number1,number2,...) と n は、サンプル サイズです。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev_P">
      <MemberSignature Language="C#" Value="public double StDev_P (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev_P([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev_P (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16895)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1, 数値 2, … : 母集団に対応する数値を指定します。引数は 1 個から 30 個まで指定できます。引数をコンマ (,) で区切って指定する代わりに、配列または配列への参照を使って指定することもできます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数を母集団全体であると見なして、母集団の標準偏差を返します。標準偏差とは、統計的な対象となる値が、その平均値からどれだけ広い範囲に分布しているかを計量したものです。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>StDev_P</b>は、引数を母集団全体であると見なします。 データが母集団の標本を表す場合は、 <b>StDev_P</b>を使用して標準偏差を計算します。 </para>
          <para>大規模なサンプル サイズは、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <b>StDev_P</b>がほぼ等しい値を返すとします。 </para>
          <para>標準偏差は、バイアス法または n 法を使って計算します。</para>
          <para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数が配列またはセル範囲である場合、その中に含まれる数値だけが計算の対象となります。空白セル、論理値、文字列、またはエラー値はすべて無視されます。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>
            <b>StDev_P</b>は、次の数式を使用します。 </para>
          <para>StDev_P メソッドの図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para>x は、標本平均が AVERAGE(number1,number2,...) と n は、サンプル サイズです。 </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev_S">
      <MemberSignature Language="C#" Value="public double StDev_S (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev_S([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev_S (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16894)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1, 数値 2, … : 母集団の標本に対応する数値を指定します。引数は 1 個から 30 個まで指定できます。引数をコンマ (,) で区切って指定する代わりに、配列または配列への参照を使って指定することもできます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数を標本と見なし、標本に基づいて母集団の標準偏差の推定値を返します。標準偏差とは、統計的な対象となる値がその平均からどれだけ広い範囲に分布しているかを計量したものです。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>StDev_S</b>は、引数を母集団の標本であると見なします。 標準偏差を使用して、計算し、データが母集団全体を表す場合は、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />。 </para>
          <para>標準偏差は、非バイアス法または n-1 法を使って計算されます。</para>
          <para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数が配列またはセル範囲である場合、その中に含まれる数値だけが計算の対象となります。空白セル、論理値、文字列、またはエラー値はすべて無視されます。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>
            <b>StDev_S</b>は、次の数式を使用します。 </para>
          <para>StDev_S メソッドの図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para>x は、標本平均が AVERAGE(number1,number2,...) と n は、サンプル サイズです。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDevP">
      <MemberSignature Language="C#" Value="public double StDevP (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDevP([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDevP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDevP (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16577)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1, 数値 2, … : 母集団の標本に対応する数値を指定します。引数は 1 個から 30 個まで指定できます。引数をコンマ (,) で区切って指定する代わりに、配列または配列への参照を使って指定することもできます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数を母集団全体であると見なして、母集団の標準偏差を返します。標準偏差とは、統計的な対象となる値が、その平均値からどれだけ広い範囲に分布しているかを計量したものです。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />メソッドです。</para>
          <para>
            <b>StDevP</b>は、引数を母集団全体であると見なします。 標準偏差を使用して、計算する数値が母集団の標本である場合は、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />。 </para>
          <para>大規模なサンプル サイズは、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <b>StDevP</b>がほぼ等しい値を返すとします。 </para>
          <para>標準偏差は、バイアス法または n 法を使って計算します。 引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。 </para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数が配列またはセル範囲である場合、その中に含まれる数値だけが計算の対象となります。空白セル、論理値、文字列、またはエラー値はすべて無視されます。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。 <b>StDevP</b>は、次の数式を使用します。 </para>
          <para>StDevP メソッドは、図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StEyx">
      <MemberSignature Language="C#" Value="public double StEyx (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StEyx([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StEyx(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StEyx (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double StEyx(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16698)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">既知の y: 従属変数の値を含む数値配列またはセル範囲を指定します。</param>
        <param name="Arg2">既知の x: 独立変数の値を含む数値配列またはセル範囲を指定します。</param>
        <summary>回帰直線の標準誤差を返します。標準誤差とは、個別の x の値に対する y の予測値の誤差の程度を計測するための尺度です。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>既知の y と既知の x に<b>含ま</b>れているデータ要素の個数が異なるときは、エラー値 #n/a が返されます。 </para>
          <para>既知の y と既知のデータ ポイントが 3 つ未満、またはである場合、<b>データ</b>は #DIV または 0 を返します。 エラー値です。 </para>
          <para>y の予測値の標準誤差は次のように定義されます。 </para>
          <para>Y の予測値の標準誤差の図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para>位置 x と y は、サンプルを示し、AVERAGE(known_x's) AVERAGE(known_y's)、n はサンプル サイズです。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Substitute">
      <MemberSignature Language="C#" Value="public string Substitute (string Arg1, string Arg2, string Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Substitute([in]string Arg1, [in]string Arg2, [in]string Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Substitute(System.String,System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Substitute (Arg1 As String, Arg2 As String, Arg3 As String, Optional Arg4 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16504)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.String" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">文字列: 置き換える文字を含む文字列を指定します。目的の文字列が入力されたセル参照を指定することもできます。</param>
        <param name="Arg2">検索文字列: 検索する文字列を指定します。</param>
        <param name="Arg3">置換文字列: 検索文字列を検索して置き換える文字列を指定します。</param>
        <param name="Arg4">置換対象: 文字列に含まれるどの検索文字列を置換文字列に置き換えるかを指定します。置換対象を指定した場合、文字列中の置換対象番目の検索文字列だけが置き換えられます。省略した場合は、文字列中のすべての検索文字列が置き換えの対象となります。</param>
        <summary>文字列中の指定された文字をほかの文字に置き換えます。Substitute メソッドは、文字列中の特定の文字を置き換えるときに使用します。文字列中の特定の位置にある文字をほかの文字に置き換えるときは、Replace メソッドを使用します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtotal">
      <MemberSignature Language="C#" Value="public double Subtotal (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Subtotal([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Subtotal(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtotal (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16728)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">このメソッドで使用する集計関数を番号で指定します。</param>
        <param name="Arg2">最初の<see cref="T:Microsoft.Office.Interop.Excel.Range" />、小計を計算する対象のオブジェクト。</param>
        <param name="Arg3"><paramref name="Arg3" />–<paramref name="Arg30" /> 2 回目以降<see cref="T:Microsoft.Office.Interop.Excel.Range" />小計を計算する対象のオブジェクト。</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>集計を作成します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public double Sum (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sum(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sum (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16388)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1, 数値 2, … : 合計を計算する数値を指定します。引数は 1 ～ 30 個まで指定できます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>セル範囲に含まれる数値をすべて合計します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数として指定した数値、論理値、数値を表す文字列が計算の対象となります。 </para>
          <para>引数が配列または参照の場合は、配列または参照内の数字のみがカウントされます。 空白セル、論理値、または配列または参照内のテキストは無視されます。 </para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumIf">
      <MemberSignature Language="C#" Value="public double SumIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumIf(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumIf (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16729)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">範囲: 評価の対象となるセル範囲を指定します。</param>
        <param name="Arg2">条件を数値、式、または対象となるセルを定義するテキストの形式で抽出条件。 32、条件を表すことがたとえば、32、"&gt;32」、または「りんご」です。</param>
        <param name="Arg3">合計範囲: 範囲内の対応するセルが検索条件を満たす場合に加算される実際のセルを指定します。合計範囲を省略すると、検索条件に一致した場合に、範囲内のセルが検索条件によって評価されて、そのセルの値そのものが加算されます。</param>
        <summary>指定された検索条件に一致するセルの値を合計します。</summary>
        <returns>To be added.</returns>
        <remarks><para>合計範囲に含まれるセルの個数と形状は、必ずしも対応するセルと一致している必要はありません。加算の対象となる実際のセルは、合計範囲の左上のセルを基準にして決定されます。次にその例を示します。</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para>検索条件では、半角の疑問符 (?) または半角のアスタリスク (*) をワイルドカード文字として使用することができます。ワイルドカード文字の疑問符は任意の 1 文字を表し、アスタリスクは任意の文字列を表します。ワイルドカード文字ではなく、通常の文字として疑問符やアスタリスクを検索する場合は、その文字の前に、"~*" のように半角のティルダ (~) を付けます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumIfs">
      <MemberSignature Language="C#" Value="public double SumIfs (Microsoft.Office.Interop.Excel.Range Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumIfs(Microsoft.Office.Interop.Excel.Range,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumIfs (Arg1 As Range, Arg2 As Range, Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16866)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">合計対象範囲: 合計を求める対象範囲を指定します。</param>
        <param name="Arg2">条件範囲 1, 条件範囲 2, … : 対応する条件による評価の対象となる範囲を指定します。</param>
        <param name="Arg3">抽出条件 1 は、検索条件 2、. -1 つまたは複数の基準数値、式、セル参照、またはテキストの形式でセルが追加されますを定義します。 などの基準として表せる 32、32、"&gt;32」、「りんご」、または B4。</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <summary>セル範囲内で、複数の検索条件を満たすセルの値を合計します。</summary>
        <returns>To be added.</returns>
        <remarks><para>合計対象範囲に含まれるセルの中で、そのセルに対応する条件をすべて満たすものだけが計算の対象となります。</para>
          <para><b>True</b>を含む合計対象範囲内のセルを 1 として評価します。<b>false</b>が含まれている合計のセルは、0 (ゼロ) として評価されます。 </para>
          <para>検索条件では、半角の疑問符 (?) または半角のアスタリスク (*) をワイルドカード文字として使用することができます。ワイルドカード文字の疑問符は任意の 1 文字を表し、アスタリスクは任意の文字列を表します。ワイルドカード文字ではなく、通常の文字として疑問符やアスタリスクを検索する場合は、その文字の前に、"~*" のように半角のティルダ (~) を付けます。</para>
          <para>各条件範囲に含まれるセルの個数と形状は、合計対象範囲と必ずしも一致している必要はありません。実際に加算の対象となるセルは、条件範囲の左上のセルを基準にして決定されます。次にその例を示します。</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumProduct">
      <MemberSignature Language="C#" Value="public double SumProduct (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumProduct([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumProduct(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumProduct (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16612)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列 1, 配列 2, 配列 3, … : 計算の対象となる要素を含む配列を指定します。引数は 2 個から 30 個まで指定できます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数として指定した配列の対応する要素間の積をまず計算し、さらにその和を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>配列引数には、同じディメンションが必要です。 しない場合は、 <b>SumProduct</b>が #VALUE を返します。 エラー値です。 </para>
          <para>
            <b>SumProduct</b>は、ゼロの場合と同様、数値ではない配列のエントリを処理します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumSq">
      <MemberSignature Language="C#" Value="public double SumSq (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumSq([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumSq(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumSq (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16705)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1, 数値 2, … : 平方和を計算するための数値を指定します。引数は 1 個から 30 個まで指定できます。また、半角のコンマ (,) で区切られた数値の代わりに、配列またはセル範囲を指定することもできます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数の 2 乗の和 (平方和) を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。 </para>
          <para>引数として指定した数値、論理値、数値を表す文字列が計算の対象となります。 </para>
          <para>引数が配列またはセル範囲である場合、その中に含まれる数値だけが計算の対象となります。空白セル、論理値、文字列、またはエラー値はすべて無視されます。 </para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。 </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumX2MY2">
      <MemberSignature Language="C#" Value="public double SumX2MY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumX2MY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumX2MY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumX2MY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumX2MY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16688)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列 1: 対象となる一方の数値配列またはセル範囲を指定します。</param>
        <param name="Arg2">配列 2: 対象となるもう一方の数値配列またはセル範囲を指定します。</param>
        <summary>2 つの配列で対応する配列要素の平方差を合計します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、あるいは数値を含む範囲を参照する名前またはセル参照を指定します。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>配列 1 と配列<b>SumX2MY2returns</b>の値の個数が異なる #N/A エラー値があります。 場合、 </para>
          <para>平方差の合計は次の式で計算できます。 </para>
          <para>平方差の合計の数式を図 1:</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumX2PY2">
      <MemberSignature Language="C#" Value="public double SumX2PY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumX2PY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumX2PY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumX2PY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumX2PY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16689)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列 1: 対象となる一方の数値配列またはセル範囲を指定します。</param>
        <param name="Arg2">配列 2: 対象となるもう一方の数値配列またはセル範囲を指定します。</param>
        <summary>2 つの配列で対応する配列要素の平方和を合計します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、あるいは数値を含む範囲を参照する名前またはセル参照を指定します。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para>配列 1 と配列の値の個数が異なる場合、 <b>SumX2PY2</b>はエラー値 #n/a を返します。 </para>
          <para>平方和の合計は次の式で計算できます。 </para>
          <para>平方和の合計の数式を図 1:</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumXMY2">
      <MemberSignature Language="C#" Value="public double SumXMY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumXMY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumXMY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumXMY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumXMY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16687)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列 1: 対象となる一方の数値配列またはセル範囲を指定します。</param>
        <param name="Arg2">配列 2: 対象となるもう一方の数値配列またはセル範囲を指定します。</param>
        <summary>2 つの配列で対応する配列要素の差を 2 乗し、さらにその合計を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>引数には、数値、数値配列、あるいは数値を含む範囲を参照する名前またはセル参照を指定します。</para>
          <para>引数として指定した配列またはセル範囲に文字列、論理値、空白セルが含まれている場合、これらは無視されます。ただし、数値として 0 (ゼロ) を含むセルは計算の対象となります。</para>
          <para><b>配列 1 と配列の値の個数が異なる場合、#N/A エラー値が sumxmy2 します。</b> </para>
          <para>2 乗した差の合計は次の式で計算できます。 </para>
          <para>平方差の合計の数式を図 1:</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Syd">
      <MemberSignature Language="C#" Value="public double Syd (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Syd([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Syd(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Syd (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Syd(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16527)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">取得価額: 資産を購入した時点での価格を指定します。</param>
        <param name="Arg2">残存価額: 耐用年数が終了した時点での資産の価格を指定します。</param>
        <param name="Arg3">耐用年数: 資産を使用できる年数、つまり償却の対象となる資産の寿命年数を指定します。</param>
        <param name="Arg4">期間: 減価償却費を求める期を指定します。期間は耐用年数と同じ単位で指定する必要があります。</param>
        <summary>級数法 (Sum-of-Year's Digits Method) を使用して、特定の期における減価償却費を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Syd</b>は、次のように計算されます。</para>
          <para>Syd メソッドの図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist">
      <MemberSignature Language="C#" Value="public double T_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16896)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: t 分布を計算する数値を指定します。</param>
        <param name="Arg2">自由度: 分布の自由度を整数で指定します。</param>
        <param name="Arg3">関数形式の関数の形式を決定する論理値です。 場合<b>は累積的な</b> <b>T_Dist</b>は累積分布関数の値を返します。かどうかは<b>false</b>を返します確率密度関数です。</param>
        <summary>スチューデントの t 分布を返します。数値 (x) は t の計算値で、この t に対してパーセンテージが計算されます。</summary>
        <returns>To be added.</returns>
        <remarks><para>いずれかの引数が数値以外の場合は、 <b>T_Dist</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>場合 deg_freedom &lt; 1、 <b>T_Dist</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合 x &lt; 0 の場合、 <b>T_Dist</b>が #NUM を返します。 エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist_2T">
      <MemberSignature Language="C#" Value="public double T_Dist_2T (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist_2T([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_2T(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist_2T (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist_2T(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16897)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: t 分布を計算する数値を指定します。</param>
        <param name="Arg2">自由度: 分布の自由度を整数で指定します。</param>
        <summary>スチューデントの両側 t 分布を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>いずれかの引数が数値以外の場合は、 <b>T_Dist_2T</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>場合 deg_freedom &lt; 1、 <b>T_Dist_2T</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合 x &lt; 0 の場合、 <b>T_Dist_2T</b>が #NUM を返します。 エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist_RT">
      <MemberSignature Language="C#" Value="public double T_Dist_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16898)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: t 分布を計算する数値を指定します。</param>
        <param name="Arg2">自由度: 分布の自由度を整数で指定します。</param>
        <summary>右側のスチューデントの t 分布を返します。数値 (x) は t の計算値で、この t に対してパーセンテージが計算されます。t 分布は、比較的少数の標本から成るデータを対象に仮説検定を行うときに使われます。この関数は、t 分布表の代わりに使用することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>いずれかの引数が数値以外の場合は、 <b>T_Dist_RT</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>場合自由度&lt;1、 <b>T_Dist_RT</b>が #NUM を返します。 エラー値です。 </para>
          <para>自由度、尾部に小数点以下の値を指定しても切り捨てられます。</para>
          <para>尾部が 1 または 2 以外の値の場合は、 <b>T_Dist_RT</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合 x &lt; 0 の場合、 <b>T_Dist_RT</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合尾部 = 1, <b>T_Dist_RT</b>は、T_DIST_RT として計算されます = P (X&gt;x)、X は t 分布の乱数。 場合尾部 = 2、 <b>T_Dist_RT</b>は、T_DIST_RT として計算されます = P (|X |&gt; x) = P (X &gt; x または X &lt; - x)。 </para>
          <para>X&lt;は許可されていません、 <b>T_Dist_RT</b>を使用すると x &lt; 0、注、T_DIST_RT(-x,df) = 1: T_DIST_RT(x,df) = P (X &gt; - x) と T_DIST_2T(-x,df) = T_DIST_2T(x df) = P (|X |&gt; x)。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Inv">
      <MemberSignature Language="C#" Value="public double T_Inv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Inv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Inv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Inv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16899)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">確率: スチューデントの t 分布に従う確率を指定します。</param>
        <param name="Arg2">自由度: 分布の自由度を指定します。</param>
        <summary>スチューデントの t 分布の左側逆関数を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>いずれかの引数が数値以外の場合は、 <b>T_Inv</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>場合確率&lt;0 または確率&gt;1、 <b>T_Inv</b>が #NUM を返します。 エラー値です。 </para>
          <para>自由度に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>場合 deg_freedom &lt; 1、 <b>T_Inv</b>が #NUM を返します。 エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Inv_2T">
      <MemberSignature Language="C#" Value="public double T_Inv_2T (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Inv_2T([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv_2T(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Inv_2T (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Inv_2T(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16900)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">確率: スチューデントの両側 t 分布に従う確率を指定します。</param>
        <param name="Arg2">自由度: 分布の自由度を指定します。</param>
        <summary>スチューデントの t 分布の t 値を、確率の関数と自由度で返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>いずれかの引数が数値以外の場合は、 <b>T_Inv_2T</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>場合確率&lt;0 または確率&gt;1、 <b>T_Inv_2T</b>が #NUM を返します。 エラー値です。 自由度に小数点以下の値を指定しても切り捨てられます。 </para>
          <para>場合自由度&lt;1、 <b>T_Inv_2T</b>が #NUM を返します。 エラー値です。 </para>
          <para>
            <b>T_Inv_2T</b>は、その値 t を返しますように P (|X |&gt; t) = X が P と t 分布に依存している確率変数の確率 (|X |&gt; t) = P (X&lt;には、-t または X &gt; t)。 </para>
          <para>片側 t 値は、2*の確率で確率を置き換えることによって返されます。確率が 0.05、自由度が 10 の T_INV_2T(0.05,10)、2.28139 が返されますが、両側の値が計算されます。同じ確率と自由度に対する片側値を計算することができます T_INV_2T(2*0.05,10)、1.812462 が返されます。 </para>
          <para>
            <b>注</b>: いくつかのテーブルで確率が (1-p) とで説明されています。</para>
          <para><b>T_Inv_2T</b>にそのような値 x がシークの確率の値を指定したことの T_DIST_RT (x, 自由度, 2) = 確率です。 <b>T_Inv_2T</b>の精度がの精度に依存するため、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" />。 <b>T_Inv_2T</b>では、反復計算の手法を使用します。 結果は 100 回反復後収束しないが、関数はエラー値 #n/a を返します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Test">
      <MemberSignature Language="C#" Value="public double T_Test (object Arg1, object Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Test([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Test(System.Object,System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Test (Arg1 As Object, Arg2 As Object, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Test(System::Object ^ Arg1, System::Object ^ Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16925)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列 1: 一方の組のデータを含む配列またはセル範囲を指定します。</param>
        <param name="Arg2">配列 2: もう一方の組のデータを含む配列またはセル範囲を指定します。</param>
        <param name="Arg3">尾部には、分布の尾部数を指定します。 場合尾部 = 1 の場合、 <b>T_Test</b>は片側分布を使用します。 場合尾部 = 2、 <b>T_Test</b>は両側分布を使用します。</param>
        <param name="Arg4">検定の種類: 実行する t 検定の種類を数値で指定します。</param>
        <summary>スチューデントの t 分布に従う確率を返します。T_TEST メソッドを利用すると、2 つの標本が平均値の等しい母集団から取り出されたものであるかどうかを確率的に予測することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>配列 1 と配列 2 のデータの個数と型の数が異なる場合は、#N/A エラー値 (ペア)、 <b>T_Test</b>の 1 を返しますを = します。 </para>
          <para>尾部と検定の種類に小数点以下の値を指定しても切り捨てられます。</para>
          <para>尾部または検定の種類が数値以外の場合、 <b>T_Test</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>尾部が 1 または 2 以外の値の場合は、 <b>T_Test</b>が #NUM を返します。 エラー値です。 </para>
          <para>
            <b>T_Test</b>では、配列 1 と配列 2 のデータを使って、正の t 統計を計算します。 場合尾部 = 1, <b>T_Test</b>は、t 統計の値が配列 1 と配列 2 は、同じ意味を持つ母集団からサンプルすることを前提として高い値の確率を返します。 <b>T_Test</b>によって返される値と、尾部 = 2 二重尾部は、= 1 と「同じ作成の意味」こと前提として、より高い t 値確率に対応します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public double Tanh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Tanh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Tanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Tanh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Tanh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16615)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値: 実数を指定します。</param>
        <summary>数値の双曲線正接 (ハイパーボリック タンジェント) を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>双曲線正接は、次の数式で表されます。</para>
          <para>双曲線タンジェントの図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillEq">
      <MemberSignature Language="C#" Value="public double TBillEq (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillEq([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillEq(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillEq (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16822)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 財務省証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 財務省証券の満期日、つまり財務省証券の支払期日を指定します。</param>
        <param name="Arg3">DATE 関数を使用するか、他の数式または関数の結果として、ImportantDates を入力する必要があります。 たとえば、2008 年 5 月 23 日の DATE(2008,5,23) を使用します。 日付をテキストとして入力した場合、問題が発生することができます。割引率: 財務省証券の割引率です。</param>
        <summary>米国財務省短期証券 (TB) の債券換算利回りを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日、満期日に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para><b>受領または成熟度が有効な日付でない場合、#VALUE を!</b> エラー値です。 </para>
          <para>場合は割引<b>率</b>である 0 の ≤ が #NUM を返します。 エラー値です。 </para>
          <para>場合決済&gt;満期日、 <b>#NUM を 1 年を超える場合、</b>または! エラー値です。 </para>
          <para>
            <b>率</b>は率として計算されます = (365 x 割合)/(360-(単価 x DSM))、DSM の受領と成熟度が 360 日の 1 年あたりの基準に従って計算との間の日数は、場所です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillPrice">
      <MemberSignature Language="C#" Value="public double TBillPrice (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillPrice([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillPrice(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillPrice (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16823)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 財務省証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 財務省証券の満期日、つまり財務省証券の支払期日を指定します。</param>
        <param name="Arg3">割引率: 財務省証券の割引率を指定します。</param>
        <summary>米国財務省短期証券 (TB) の額面 $100 あたりの価格を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: DATE 関数を使用するか、他の数式または関数の結果として、日付を入力する必要があります。 たとえば、2008 年 5 月 23 日の DATE(2008,5,23) を使用します。 日付をテキストとして入力した場合、問題が発生することができます。</para>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日、満期日に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para><b>受領または成熟度が有効な日付でない場合、#VALUE を!</b> エラー値です。 </para>
          <para>場合は割引<b>率</b>である 0 の ≤ が #NUM を返します。 エラー値です。 </para>
          <para>場合決済&gt;満期日、 <b>#NUM を 1 年を超える場合、</b>または! エラー値です。 </para>
          <para>
            <b>率</b>として計算されます。 </para>
          <para>率メソッドの図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para>各項目の意味は次のとおりです。</para>
          <para>DSM = 受渡日から満期日、受領日の後の 2 つ以上のカレンダー年である、満期日を除くまでの日数です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillYield">
      <MemberSignature Language="C#" Value="public double TBillYield (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillYield([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillYield(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillYield (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16824)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 財務省証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 財務省証券の満期日、つまり財務省証券の支払期日を指定します。</param>
        <param name="Arg3">現在価値: 額面 $ 100 に対する財務省証券の価格を指定します。</param>
        <summary>米国財務省短期証券 (TB) の利回りを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: DATE 関数を使用するか、他の数式または関数の結果として、日付を入力する必要があります。 たとえば、2008 年 5 月 23 日の DATE(2008,5,23) を使用します。 日付をテキストとして入力した場合、問題が発生することができます。</para>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日、満期日に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para><b>受領または成熟度が有効な日付でない場合、#VALUE を!</b> エラー値です。 </para>
          <para>#NUM を返すならば ≤ 0 で<b>満</b>! 場合、 エラー値です。 </para>
          <para>場合受領成熟度、成熟度が 1 年以上の場合は、<b>満</b>が #NUM を返すか! エラー値です。 </para>
          <para>
            <b>日</b>として計算されます。 </para>
          <para>満メソッドの図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para>各項目の意味は次のとおりです。</para>
          <para>DSM = 受渡日から満期日、受領日の後の 2 つ以上のカレンダー年である、満期日を除くまでの日数です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TDist">
      <MemberSignature Language="C#" Value="public double TDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16685)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: t 分布を計算する数値を指定します。</param>
        <param name="Arg2">自由度: 分布の自由度を整数で指定します。</param>
        <param name="Arg3">尾部: 片側分布を計算するか両側分布を計算するか、数値で指定します。尾部に 1 を指定すると片側分布の値が計算され、2 を指定すると両側分布の値が計算されます。</param>
        <summary>スチューデントの t 分布のパーセンテージ (確率) を返します。数値 (x) は t の計算値で、この t に対してパーセンテージが計算されます。t 分布は、比較的少数の標本から成るデータを対象に仮説検定を行うときに使われます。この関数は、t 分布表の代わりに使用することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" />、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist(System.Double,System.Double,System.Boolean)" />、および<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_2T(System.Double,System.Double)" />の方法です。</para>
          <para>いずれかの引数が数値以外の場合、 <b>TDist</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>場合自由度&lt;1 の場合、 <b>TDist</b>が #NUM を返します。 エラー値です。 </para>
          <para>自由度、尾部に小数点以下の値を指定しても切り捨てられます。</para>
          <para>尾部に 1 または 2 以外の値がある場合、 <b>TDist</b>は、#NUM を返します。 エラー値です。 </para>
          <para>場合 x &lt; 0 の場合、 <b>TDist</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合尾部 = 1 の場合、 <b>TDist</b>の計算に = P (X&gt;x)、X は t 分布の乱数。 場合尾部 = 2 の場合、 <b>TDist</b>の計算に = P (|X |&gt; x) = P (X &gt; x または X &lt; - x)。 </para>
          <para>X から&lt;は許可されていません、 <b>TDist</b>を使用すると x &lt; 0、注その TDIST(-x,df,1) = 1: TDIST(x,df,1) = P (X &gt; - x) と TDIST(-x,df,2) = TDIST (x は df、2) = P (|X |&gt; x)。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text (object Arg1, string Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Text([in]object Arg1, [in]string Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Text(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Text (Arg1 As Object, Arg2 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Text(System::Object ^ Arg1, System::String ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16432)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値、戻り値が数値となる数式、または数値を含むセルの参照を指定します。</param>
        <param name="Arg2">[セルの書式設定] ダイアログ ボックスの表示形式] タブの [分類] ボックスにテキスト形式での表示形式です。</param>
        <summary>数値を書式設定した文字列に変換します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiDayOfWeek">
      <MemberSignature Language="C#" Value="public string ThaiDayOfWeek (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiDayOfWeek([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiDayOfWeek(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiDayOfWeek (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiDayOfWeek(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16753)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>内部使用のため予約済みです。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiDigit">
      <MemberSignature Language="C#" Value="public string ThaiDigit (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiDigit([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiDigit(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiDigit (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiDigit(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16754)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>内部使用のため予約済みです。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiMonthOfYear">
      <MemberSignature Language="C#" Value="public string ThaiMonthOfYear (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiMonthOfYear([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiMonthOfYear(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiMonthOfYear (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiMonthOfYear(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16755)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>内部使用のため予約済みです。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiNumSound">
      <MemberSignature Language="C#" Value="public string ThaiNumSound (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiNumSound([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiNumSound(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiNumSound (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiNumSound(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16756)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>内部使用のため予約済みです。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiNumString">
      <MemberSignature Language="C#" Value="public string ThaiNumString (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiNumString([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiNumString(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiNumString (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiNumString(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16757)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>内部使用のため予約済みです。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiStringLength">
      <MemberSignature Language="C#" Value="public double ThaiStringLength (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ThaiStringLength([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiStringLength(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiStringLength (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ThaiStringLength(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16758)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>内部使用のため予約済みです。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiYear">
      <MemberSignature Language="C#" Value="public double ThaiYear (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ThaiYear([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiYear(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiYear (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ThaiYear(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16762)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>内部使用のため予約済みです。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TInv">
      <MemberSignature Language="C#" Value="public double TInv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TInv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TInv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TInv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TInv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16716)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">確率: スチューデントの両側 t 分布に従う確率を指定します。</param>
        <param name="Arg2">自由度: 分布の自由度を指定します。</param>
        <summary>スチューデントの t 分布の t 値を、確率の関数と自由度で返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TInv(System.Double,System.Double)" />と<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv_2T(System.Double,System.Double)" />の方法です。</para>
          <para>いずれかの引数が数値以外の場合、 <b>TInv</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>場合確率&lt;0 または確率&gt;1 の場合、 <b>TInv</b>は、#NUM を返します。 エラー値です。 </para>
          <para>自由度に小数点以下の値を指定しても切り捨てられます。</para>
          <para>場合自由度&lt;1 の場合、 <b>TInv</b>は、#NUM を返します。 エラー値です。 </para>
          <para>
            <b>TInv</b>は、その値 t を返しますように P (|X |&gt; t) = X が P と t 分布に依存している確率変数の確率 (|X |&gt; t) = P (X&lt;には、-t または X &gt; t)。 </para>
          <para>片側 t 値は、2*の確率で確率を置き換えることによって返されます。確率が 0.05、自由度が 10 の TINV(0.05,10)、2.28139 が返されますが、両側の値が計算されます。同じ確率と自由度に対する片側値を計算することができます TINV(2*0.05,10)、1.812462 が返されます。 </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Transpose">
      <MemberSignature Language="C#" Value="public object Transpose (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Transpose([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Transpose(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transpose (Arg1 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Transpose(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16467)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列: 行列変換を行うワークシートの配列またはセル範囲を指定します。配列の行列変換を行うと、元の配列の第 1 行が新しい配列の第 1 列になり、元の配列の第 2 行が新しい配列の第 2 列 (以下同様) になります。</param>
        <summary>配列の縦方向と横方向のセル範囲の変換を行います。Transpose メソッドは、配列の列数および行数とそれぞれ同数の行数および列数のセル範囲に、配列数式として入力する必要があります。Transpose メソッドを利用すると、ワークシート上にある配列の縦と横を逆転させることができます。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trend">
      <MemberSignature Language="C#" Value="public object Trend (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Trend([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trend(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trend (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16434)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">既知の y: 既にわかっている y の値の系列で、y = mx + b という関係になります。</param>
        <param name="Arg2">既知の x: 既にわかっている x の値の系列で、y = mx + b という関係になります。</param>
        <param name="Arg3">新しい x: Trend メソッドを利用して、対応する y の値を計算する新しい x の値を指定します。</param>
        <param name="Arg4">定数: 定数 b を 0 にするかどうかを論理値で指定します。</param>
        <summary>回帰直線による予測値を返します。R-2 乗値のメソッドを使って、直線を既知の y と既知の x の配列に当てはめます。その直線上で、指定した新しい x の配列に対応する y の値が返されます。</summary>
        <returns>To be added.</returns>
        <remarks><para>既知の y の配列が 1 つの列に入力されている場合、既知の x の各列はそれぞれ異なる変数であると見なされます。</para>
          <para>既知の y の配列が 1 つの行に入力されている場合、既知の x の各行はそれぞれ異なる変数であると見なされます。</para>
          <para>既知の x の配列には、1 つまたは複数の変数の系列を指定することができます。変数の系列が 1 つである場合、既知の y と既知の x は、両者の次元が同じであれば、どのような形の範囲であってもかまいません。変数の系列が複数である場合、既知の y は 1 行または 1 列のセル範囲でなければなりません。</para>
          <para>既知の x を省略すると、既知の y と同じサイズの {1,2,3,...} という配列を指定したと見なされます。</para>
          <para>新しい x には、既知の x と同様にそれぞれ独立した変数が入力されている 1 つの列 (または 1 つの行) を指定する必要があります。既知の y が 1 つの列に入力されている場合、既知の x と新しい x は同じ列数でなければなりません。また、既知の y が 1 つの行に入力されている場合は、既知の x と新しい x の行数が同じでなければなりません。</para>
          <para>新しい x を省略すると、既知の x と同じ値を指定したと見なされます。</para>
          <para>既知の x と新しい x の両方を省略すると、既知の y と同じサイズの {1,2,3,...} という配列を指定したと見なされます。</para>
          <para>場合定数を<b>true</b>または省略すると、b の値も計算されます。 </para>
          <para>場合定数が<b>false の場合</b>b を 0 (ゼロ) に設定されて、m の値が調整されるように y = mx です。 </para>
          <para>Microsoft Excel がデータを 1 行に適合する方法についてを参照してください<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />。 </para>
          <para>異なる指数でべき乗される同一の変数に対して回帰している多項式曲線の<b>傾向</b>を使用できます。 たとえば、列 A に y の値が含まれているし、列 B に x の値が含まれています。 入力 x ^2 に列 C、x ^3 列 D というように、および列 A に対して D を介して落ちる列 B に </para>
          <para>計算結果が配列となる数式は、配列数式として入力する必要があります。</para>
          <para>既知の x のような引数に配列定数を指定するときは、半角のコンマ (,) を使って同じ行の値を区切り、半角のセミコロン (;) を使って各行を区切ります。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public string Trim (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Trim([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Trim(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16502)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">文字列: 余分なスペースを削除する文字列を指定します。</param>
        <summary>文字列に複数のスペースが連続して含まれている場合、単語間のスペースを 1 つずつ残して、不要なスペースをすべて削除します。Trim メソッドは、他のアプリケーションから読み込んだテキストに不要なスペースが含まれているときなどに使用します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: テキストから 7 ビットの ASCII 空白文字 (値 32) をトリムするのには、 <b>Trim</b>関数が設計されています。 Unicode 文字セットでは、160 の 10 進数の値を持つ、改行をしないスペース文字と呼ばれる別の空白文字があります。 この文字は Web ページで、HTML エンティティとして<b>&amp;nbsp;</b>。 自体は、 <b>Trim</b>関数では、この非区切りスペースは削除されません。</para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimMean">
      <MemberSignature Language="C#" Value="public double TrimMean (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TrimMean([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TrimMean(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimMean (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TrimMean(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16715)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列: 対象となるデータを含む配列またはセル範囲を指定します。</param>
        <param name="Arg2">割合: 平均値の計算から排除するデータの割合を小数で指定します。たとえば、全体で 20 個のデータを含む対象に対して割合に 0.2 を指定した場合、20×0.2 = 4 となり上限から 2 個、下限から 2 個の合計 4 個のデータが排除されることになります。</param>
        <summary>データ全体の上限と下限から一定の割合のデータを切り落とし、残りの項の平均値を返します。この関数は、極端な観察データを分析対象から排除する場合に利用します。</summary>
        <returns>To be added.</returns>
        <remarks><para>パーセント&lt;0] または [パーセント&gt;1, <b>TrimMean</b>が #NUM を返します。 エラー値です。 </para>
          <para>
            <b>TrimMean</b>は、2 の倍数に除外されたデータ ポイントの番号を丸めます。 0.1、3 つのポイントが 30 のデータ ポイントの 10% に相当します。 対称の<b>TrimMean</b>は、上部と下部のデータ セットから単一の値を除外します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TTest">
      <MemberSignature Language="C#" Value="public double TTest (object Arg1, object Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TTest([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TTest(System.Object,System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TTest (Arg1 As Object, Arg2 As Object, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TTest(System::Object ^ Arg1, System::Object ^ Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16700)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列 1: 一方の組のデータを含む配列またはセル範囲を指定します。</param>
        <param name="Arg2">配列 2: もう一方の組のデータを含む配列またはセル範囲を指定します。</param>
        <param name="Arg3">尾部: 片側分布を使用するか、または両側分布を使用するかを数値で指定します。尾部に 1 を指定すると片側分布が使用され、2 を指定すると両側分布が使用されます。</param>
        <param name="Arg4">検定の種類: 実行する t 検定の種類を数値で指定します。</param>
        <summary>スチューデントの t 分布に従う確率を返します。TTest メソッドを利用すると、2 つの標本が平均値の等しい母集団から取り出されたものであるかどうかを確率的に予測することができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Test(System.Object,System.Object,System.Double,System.Double)" />メソッドです。</para>
          <list type="table">
            <item>
              <term>1</term>
              <description>対をなすデータの t 検定</description>
            </item>
            <item>
              <term>2</term>
              <description>等分散の 2 標本を対象とする t 検定</description>
            </item>
            <item>
              <term>3</term>
              <description>非等分散の 2 標本を対象とする t 検定</description>
            </item>
          </list>
          <para>配列 1 と配列 2 のデータの個数と型の数が異なる場合は、1 (ペア) の<b>指定</b>を返します。 エラー値 #n/a を = します。 </para>
          <para>尾部と検定の種類に小数点以下の値を指定しても切り捨てられます。</para>
          <para>尾部または検定の種類が数値以外の場合は、 <b>TTest</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>尾部が 1 または 2 以外の値の場合は、 <b>TTest</b>が #NUM を返します。 エラー値です。 </para>
          <para>
            <b>配列 1 と配列 2 のデータを使用して負の t 統計を計算します。</b> 場合尾部 = 1、 <b>TTest</b>は、t 統計の値が配列 1 と配列 2 は、同じ意味を持つ母集団からサンプルすることを前提として高い値の確率を返します。 <b>TTest</b>によって返される値と、尾部 = 2 二重尾部は、= 1 と「同じ作成の意味」こと前提として、より高い t 値確率に対応します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Unichar">
      <MemberSignature Language="C#" Value="public string Unichar (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Unichar([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Unichar(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unichar (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Unichar(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16964)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">文字を表す Unicode 数値。</param>
        <summary>特定の数値によって参照されている Unicode 文字を取得します。</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unicode">
      <MemberSignature Language="C#" Value="public double Unicode (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Unicode([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Unicode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unicode (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Unicode(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16965)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Unicode 値を求める文字の種類。</param>
        <summary>テキストの先頭文字に対応した数値 (コード ポイント) を返します。</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="USDollar">
      <MemberSignature Language="C#" Value="public string USDollar (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string USDollar([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.USDollar(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function USDollar (Arg1 As Double, Arg2 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ USDollar(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16588)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値を含むセルの参照または戻り値が数値となる数式を指定します。</param>
        <param name="Arg2">小数点の右側にある数字の数です。 Arg2 が負の場合は、小数点の左側に数値が丸められます。 桁数を省略すると、2 を指定したと見なされます。</param>
        <summary>数値を文字列形式に変換し、通貨記号を適用します。このメソッドの名前および適用される記号は、使用する言語の設定によって異なります。</summary>
        <returns>To be added.</returns>
        <remarks><para><b>USDollar</b>メソッドは、数値を指定した位置に角丸 decimal で通貨形式を使用してテキストに変換します。 使用する形式が必要な場合は、$#, # 0.00_);($#,##0.00) を使用しています。</para>
          <para>セルの書式設定コマンドを使用して数値を含むセルを書式設定し、番号をフォーマットすると直接の主な違い、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" />メソッドは、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" /> 、計算結果をテキストに変換します。 セルの書式設定コマンドを使用して書式設定された数値は、まだいくつかです。 フォーマットされている番号を使用する続行することができます<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" />数式では、Excel が計算するとき、数値をテキスト値として入力した数値を変換するためです。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Var">
      <MemberSignature Language="C#" Value="public double Var (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16430)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1, 数値 2, … : 母集団の標本に対応する数値を指定します。引数は 1 ～ 30 個まで指定できます。数値にはセル参照に対する参照を指定してもかまいません。数値として文字列、論理値、空白セルの参照を指定すると、エラーになります。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数を正規母集団の標本と見なし、標本に基づいて母集団の分散の推定値 (不偏分散) を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Var</b>は、引数を母集団の標本であると見なします。 データが母集団全体を表す場合を使用して分散を計算し、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VarP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />。 </para>
          <para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数が配列またはセル範囲である場合、その中に含まれる数値だけが計算の対象となります。空白セル、論理値、文字列、またはエラー値はすべて無視されます。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>
            <b>Var</b>は、次の数式を使用します。 </para>
          <para>Var メソッドは、図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para>x は、標本平均が AVERAGE(number1,number2,...) と n は、サンプル サイズです。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Var_P">
      <MemberSignature Language="C#" Value="public double Var_P (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var_P([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var_P (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16902)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1, 数値 2, … : 母集団全体に対応する数値を指定します。引数は 1 ～ 30 個まで指定できます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数を母集団全体と見なし、母集団の分散 (標本分散) を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Var_P</b>は、引数を母集団全体であると見なします。 使用して分散をし、計算する数値が母集団の標本である場合は、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />。 </para>
          <para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数が配列またはセル範囲である場合、その中に含まれる数値だけが計算の対象となります。空白セル、論理値、文字列、またはエラー値はすべて無視されます。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para><b>Var_P</b>の数式は次のとおりです。 </para>
          <para>Var_P メソッドの図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para>x は、標本平均が AVERAGE(number1,number2,...) と n は、サンプル サイズです。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Var_S">
      <MemberSignature Language="C#" Value="public double Var_S (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var_S([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var_S (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16901)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1, 数値 2, … : 母集団の標本に対応する数値を指定します。引数は 1 ～ 30 個まで指定できます。数値にはセル参照に対する参照を指定してもかまいません。数値として文字列、論理値、空白セルの参照を指定すると、エラーになります。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数を正規母集団の標本と見なし、標本に基づいて母集団の分散の推定値 (不偏分散) を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Var_S</b>は、引数を母集団の標本であると見なします。 データが母集団全体を表す場合を使用して分散を計算し、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />。 </para>
          <para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数が配列またはセル範囲である場合、その中に含まれる数値だけが計算の対象となります。空白セル、論理値、文字列、またはエラー値はすべて無視されます。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para>
            <b>Var_S</b>は、次の数式を使用します。 </para>
          <para>Var_S メソッドの図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para>x は、標本平均が AVERAGE(number1,number2,...) と n は、サンプル サイズです。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="VarP">
      <MemberSignature Language="C#" Value="public double VarP (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 VarP([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VarP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarP (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16578)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">数値 1, 数値 2, … : 母集団全体に対応する数値を指定します。引数は 1 ～ 30 個まで指定できます。</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>引数を母集団全体と見なし、母集団の分散 (標本分散) を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />メソッドです。</para>
          <para>
            <b>Varp 関数</b>は、引数を母集団全体であると見なします。 使用して分散をし、計算する数値が母集団の標本である場合は、 <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />。 </para>
          <para>引数には、数値、数値配列、または数値を含む範囲を参照する名前かセル参照を指定します。</para>
          <para>引数として指定した論理値、および、数値を表す文字列が計算の対象となります。</para>
          <para>引数が配列またはセル範囲である場合、その中に含まれる数値だけが計算の対象となります。空白セル、論理値、文字列、またはエラー値はすべて無視されます。</para>
          <para>エラー値または数値に変換できない文字列を引数に指定すると、エラーになります。</para>
          <para><b>Varp 関数</b>の数式は次のとおりです。 </para>
          <para>VarP メソッドは、図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para>x は、標本平均が AVERAGE(number1,number2,...) と n は、サンプル サイズです。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Vdb">
      <MemberSignature Language="C#" Value="public double Vdb (double Arg1, double Arg2, double Arg3, double Arg4, double Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Vdb([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]float64 Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Vdb(System.Double,System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Vdb (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Arg5 As Double, Optional Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16606)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Double" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">取得価額: 資産を購入した時点での価格を指定します。</param>
        <param name="Arg2">残存価額: 耐用年数が終了した時点での資産の価格を指定します。0 (ゼロ) を指定することもできます。</param>
        <param name="Arg3">耐用年数: 資産を使用できる年数、つまり償却の対象となる資産の寿命年数を指定します。</param>
        <param name="Arg4">開始期: 減価償却費の計算の対象となる最初の期を指定します。開始期は耐用年数と同じ単位で指定してください。</param>
        <param name="Arg5">終了期: 減価償却費の計算の対象となる最後の期を指定します。終了期は耐用年数と同じ単位で指定してください。</param>
        <param name="Arg6">率: 償却します。 Factor を省略すると、2 (倍率逓減残高の方法) と見なされます。 倍額定率法を使用しない場合は、率を指定してください。 倍額定率法についてを参照してください<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ddb(System.Double,System.Double,System.Double,System.Double,System.Object)" />。</param>
        <param name="Arg7">切り替えなし: 減価償却費が定率法による計算の結果より大きくなったときに、自動的に定額法に切り替えるかどうかを、論理値で指定します。</param>
        <summary>倍額定率法または指定された方法を使用して、特定の期における資産の減価償却費を返します。VDB は、Variable Declining Balance の略語です。</summary>
        <returns>To be added.</returns>
        <remarks><para>切り替えが<b>true</b>の場合は、Microsoft Excel に切り替わらない定額減価償却費減価償却費が定率法による計算の結果よりも大きい場合でも。 </para>
          <para>切り替えなしでは、 <b>false</b>を指定したり、省略すると、Excel に切り替わります定額減価償却費が定率法による計算の結果よりも大きい。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="VLookup">
      <MemberSignature Language="C#" Value="public object VLookup (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object VLookup([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VLookup (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16486)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">検索値: 範囲の左端の列で検索する値を指定します。検索値には、値またはセル参照を指定します。検索値が範囲の左端の列の最小値より小さい場合、エラー値 #N/A が返されます。</param>
        <param name="Arg2">範囲: 2 列以上のデータ列です。セル範囲の参照、またはセル範囲名を指定します。範囲の左端の列の値が、検索値で検索される値です。これらの値は、文字列、数値、論理値のいずれかであることが必要です。英字の大文字と小文字は区別されません。</param>
        <param name="Arg3">列番号: 範囲内で目的のデータが入力されている列を、左端からの列数で指定します。列番号に 1 を指定すると、範囲の左端の列の値が返され、列番号に 2 を指定すると、範囲の左から 2 列目の値が返されます。</param>
        <param name="Arg4">検索の型にするかどうかを指定する論理値、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" />が完全に一致または一致を検索するメソッド。</param>
        <summary>指定された範囲の 1 列目で特定の値を検索し、その範囲内の別の列の同じ行にある値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>V は<b>VLookup</b>では、垂直方向を表しています。 ではなく<b>VLookup</b>メソッドを使用して、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" />メソッドは、比較する値を検索するデータの左側の列にある場合。</para>
          <para>列番号が 1 未満の場合は、 <b>VLookup</b>メソッドはエラーを生成します。 </para>
          <para>列番号が範囲の列数よりも大きい場合は、 <b>VLookup</b>メソッドはエラーを生成します。</para>
          <para>検索の型は、 <b>true</b>または省略すると、またはその近似値の一致が返されます。 厳密な一致が見つからない場合は、検索値未満である次の最大値が返されます。 </para>
          <para>並べ替え操作の順序を昇順で、範囲の最初の列内の値を置く必要があります。それ以外の場合、 <b>VLookup</b>メソッドでは、正しい値が得られない場合がします。</para>
          <para>検索の型が<b>false</b>の場合は、 <b>VLookup</b>メソッドだけが検索完全に一致します。 この例では、左端の列の値をソートする必要はありません。 検査値に一致する範囲の最初の列で 2 つ以上の値がある場合は、最初に見つかった値が使用されます。 厳密な一致が見つからない場合、エラーが生成されます。</para>
          <para>左端の列にあるテキストを検索する場合は、範囲の最初の列内のデータの先頭のスペース、末尾のスペース、一貫性のない直線の使用でないことを確認 (' または") と波 (' または") 引用符、または印刷されない文字。 これらの場合では、 <b>VLookup</b>メソッドは、誤った値や予期しない値を与える可能性があります。 クリーニングまたは値をトリミングする方法の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Clean(System.String)" />と<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trim(System.String)" />の方法です。 数値や日付の値を検索する場合は、左端の列のデータがテキスト値として保存されていないことを確認します。 この例では、 <b>VLookup</b>メソッドは、誤った値や予期しない値を与える可能性があります。 </para>
          <para>検索の型が<b>false の場合</b>検索値が文字列、ワイルドカード、疑問符 () (?) とアスタリスク (*)、半角を使用することができます。 一致する任意の 1 文字を疑問符 (?)アスタリスクは任意の文字の並びと一致します。 疑問符やアスタリスクを検索する場合は、文字の前にティルダ (~) を入力します。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WebService">
      <MemberSignature Language="C#" Value="public object WebService (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object WebService([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WebService(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WebService (Arg1 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ WebService(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16980)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">HTTP GET 要求の宛先の Web サービスの URL。</param>
        <summary>HTTP GET 要求を使用して Web サービスを非同期で呼び出し、応答を返す基本の関数。</summary>
        <returns><b>VARIANT</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Weekday">
      <MemberSignature Language="C#" Value="public double Weekday (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weekday([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weekday(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weekday (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16454)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">シリアル値: 検索する日付のシリアル値を指定します。日付は、DATE 関数を使って入力するか、他の数式または他の関数の結果を指定します。たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。日付を文字列として入力した場合、エラーが発生することがあります。</param>
        <param name="Arg2">種類: 戻り値の種類を数値で指定します。</param>
        <summary>日付を表すシリアル値から、その日付に対応する曜日を返します。既定では、戻り値は 1 (日曜) から 7 (土曜) までの範囲の整数となります。</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>1 または省略</term>
              <description>1 (日曜) ～ 7 (土曜) の範囲の整数。以前のバージョンの Excel と結果は同じ。</description>
            </item>
            <item>
              <term>2</term>
              <description>1 (月曜) ～ 7 (日曜) の範囲の整数</description>
            </item>
            <item>
              <term>3</term>
              <description>0 (月曜) ～ 6 (日曜) の範囲の整数</description>
            </item>
            <item>
              <term>11</term>
              <description>1 (月曜) ～ 7 (日曜) の範囲の整数</description>
            </item>
            <item>
              <term>12</term>
              <description>1 (火曜) ～ 7 (月曜) の範囲の整数</description>
            </item>
            <item>
              <term>13</term>
              <description>1 (水曜) ～ 7 (火曜) の範囲の整数</description>
            </item>
            <item>
              <term>14</term>
              <description>1 (木曜) ～ 7 (水曜) の範囲の整数</description>
            </item>
            <item>
              <term>15</term>
              <description>1 (金曜) ～ 7 (木曜) の範囲の整数</description>
            </item>
            <item>
              <term>16</term>
              <description>1 (土曜) ～ 7 (金曜) の範囲の整数</description>
            </item>
            <item>
              <term>17</term>
              <description>1 (日曜) ～ 7 (土曜) の範囲の整数</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WeekNum">
      <MemberSignature Language="C#" Value="public double WeekNum (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WeekNum([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WeekNum(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WeekNum (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16849)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">シリアル値: 日付を指定します。日付は、DATE 関数を使って入力するか、他の数式または他の関数の結果を指定します。たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。日付を文字列として入力した場合、エラーが発生することがあります。</param>
        <param name="Arg2">週の基準: 週の始まりを何曜日とするかを数値で指定します。既定値は 1 です。</param>
        <summary>日付がその年の第何週目に当たるかを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: <b>WeekNum</b>関数は、年の最初の週に 1 月 1 日を含む週を考慮します。 ただし、として定義する最初の週では、曜日の大部分 (4 つ以上) が新しい年のヨーロッパの標準があります。 つまり、数年であるは 3 日以内の 1 月の最初の週、 <b>WeekNum</b>関数には間違ってヨーロッパ方式の週番号が返されます。</para>
          <list type="table">
            <item>
              <term>1</term>
              <description>週の始まりを日曜日とします。曜日には順に 1 ? 7 の番号が対応します。</description>
            </item>
            <item>
              <term>2</term>
              <description>週の始まりを月曜日とします。曜日には順に 1 ? 7 の番号が対応します。</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Weibull">
      <MemberSignature Language="C#" Value="public double Weibull (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weibull([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weibull (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Weibull(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16686)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 関数に代入する値を指定します。</param>
        <param name="Arg2">α: 分布のパラメーターを指定します。</param>
        <param name="Arg3">β: 分布のパラメーターを指定します。</param>
        <param name="Arg4">関数形式: 計算に使用する関数の形式を、論理値で指定します。関数形式に TRUE を指定すると累積分布関数の値が計算され、FALSE を指定すると確率密度関数の値が計算されます。</param>
        <summary>ワイブル分布の値を返します。この分布は、機械が故障するまでの平均時間のような信頼性の分析に使用されます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull_Dist(System.Double,System.Double,System.Double,System.Boolean)" />メソッドです。</para>
          <para>X、アルファ、ベータ版では、数値、<b>ワイブル</b>#VALUE を返します!。 エラー値です。 場合 x &lt; 0、<b>ワイブル</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合アルファ ≤ 0 または β ≤ 0、<b>ワイブル</b>が #NUM を返します!。 エラー値です。 </para>
          <para>ワイブル累積分布関数は、次の式で定義されます。 </para>
          <para>ワイブル累積分布の数式を図 1:</para>
          <para> </para>
          <para> </para>
          <para>ワイブル確率密度関数は、次の式で定義されます。</para>
          <para>ワイブル確率密度の図 2: 数式</para>
          <para> </para>
          <para> </para>
          <para>Α = 1、<b>ワイブル</b>指数分布を返します。</para>
          <para>図 3: 数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Weibull_Dist">
      <MemberSignature Language="C#" Value="public double Weibull_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weibull_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weibull_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Weibull_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16903)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: 関数に代入する値を指定します。</param>
        <param name="Arg2">α: 分布のパラメーターを指定します。</param>
        <param name="Arg3">β: 分布のパラメーターを指定します。</param>
        <param name="Arg4">関数形式: 計算に使用する関数の形式を、論理値で指定します。関数形式に TRUE を指定すると累積分布関数の値が計算され、FALSE を指定すると確率密度関数の値が計算されます。</param>
        <summary>ワイブル分布の値を返します。この分布は、機械が故障するまでの平均時間のような信頼性の分析に使用されます。</summary>
        <returns>To be added.</returns>
        <remarks><para>X、アルファ、ベータ版は、数値ではない、 <b>Weibull_Dist</b>が、#VALUE を返すのか! エラー値です。 </para>
          <para>場合 x &lt; 0 <b>Weibull_Dist</b>が #NUM を返します。 エラー値です。 </para>
          <para>場合アルファ ≤ 0 または β ≤ 0、 <b>Weibull_Dist</b>が #NUM を返します!。 エラー値です。 </para>
          <para>ワイブル累積分布関数は、次の式で定義されます。 </para>
          <para>ワイブル累積分布の数式を図 1:</para>
          <para> </para>
          <para> </para>
          <para>ワイブル確率密度関数は、次の式で定義されます。</para>
          <para>ワイブル確率密度の図 2: 数式</para>
          <para> </para>
          <para> </para>
          <para>Α = 1、 <b>Weibull_Dist</b>は、指数分布を返します。</para>
          <para>図 3: 数式</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkDay">
      <MemberSignature Language="C#" Value="public double WorkDay (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WorkDay([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WorkDay(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WorkDay (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16855)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">開始日: 起算日を表す日付を指定します。</param>
        <param name="Arg2">日数: 開始日から起算して、週末や祭日を除く週日の日数を指定します。日数に正の数を指定すると、起算日より後の日付となり、負の数を指定すると、起算日より前の日付となります。</param>
        <param name="Arg3">祭日: 国民の祝日や夏期休暇など、稼動日数の計算から除外する日付のリストを指定します。この引数は省略することができます。日付のリストには、日付を表すシリアル値が入力されているセル範囲、または配列定数を指定できます。</param>
        <summary>開始日から起算して、指定された稼動日数だけ前または後の日付に対応する値を返します。稼動日とは、土曜、日曜、および指定された祭日を除く日のことです。このメソッドを使用すると、納品書の支払日、発送日、作業日数などを計算するときに、週末や祭日を除くことができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: DATE 関数を使用するか、他の数式または関数の結果として、日付を入力する必要があります。 たとえば、2008 年 5 月 23 日の DATE(2008,5,23) を使用します。 日付をテキストとして入力した場合、問題が発生することができます。</para>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>いずれかの引数が無効な日付でない場合は、<b>就業時間内</b>は、#VALUE を返します。 エラー値です。 </para>
          <para>開始日と日数が無効な日付である場合、<b>就業時間内</b>は、#NUM を返します。 エラー値です。 </para>
          <para>日数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkDay_Intl">
      <MemberSignature Language="C#" Value="public double WorkDay_Intl (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WorkDay_Intl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WorkDay_Intl(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WorkDay_Intl (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16905)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">開始日: 起算日を指定します。小数点以下は切り捨てられます。</param>
        <param name="Arg2">日数: 開始日から起算した稼働日の日数を指定します。正の数を指定すると、起算日より後の日付を返し、負の数を指定すると、起算日より前の日付を返します。0 (ゼロ) を指定すると、起算日が返されます。整数以外の値を指定すると、小数点以下が切り捨てられます。</param>
        <param name="Arg3">週末に-は、週末の日付を稼働日とは見なされません、週の曜日を示します。 週末は、週末の番号または週末のタイミングを指定する文字列です。</param>
        <param name="Arg4">祭日: 稼動日数の計算から除外する日付のセットです。このパラメーターは、日付が入力されているセル範囲、または日付を表すシリアル値の配列定数です。祭日の日付またはシリアル値は任意の順序で指定できます。</param>
        <summary>指定された稼働日の日数だけ前または後の日付に対応するシリアル値を返します。ユーザー設定の週末パラメーターを指定できます。週末パラメーターは、週末の曜日と日数を示します。週末および祝日として指定されている日は、稼働日と見なされません。</summary>
        <returns>To be added.</returns>
        <remarks><para>開始日が現在の日付の基準値の範囲外にある場合は、 <b>WorkDay_Intl</b>が #NUM を返します。 エラー値です。 </para>
          <para>休日の日付が現在の日付の基準値の範囲外にある場合は、 <b>WorkDay_Intl</b>が #NUM を返します。 エラー値です。 </para>
          <para>開始日と 1 日のオフセット値が無効な日付である場合、 <b>WorkDay_Intl</b>は、#NUM を返します。 エラー値です。 </para>
          <para>週末文字列の長さが無効なまたは無効な文字が含まれていますは、 <b>WorkDay_Intl</b>は、#VALUE を返します。 エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Xirr">
      <MemberSignature Language="C#" Value="public double Xirr (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Xirr([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xirr(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xirr (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16813)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">範囲: 収支明細表の日付に対応する一連のキャッシュ フローを指定します。最初の支払いは投資の最初に発生する原価や支払いに対応し、省略することができます。最初のキャッシュ フローが原価や支払いの場合、負の値を指定する必要があります。それ以降の支払いは、1 年の日数を 365 日として割り引かれます。値には、正の値と負の値が少なくとも 1 つずつ含まれている必要があります。</param>
        <param name="Arg2">日付: キャッシュ フローの支払いに対応する支払日を指定します。最初の支払日は、収支明細表の先頭に対応します。残りの支払日には、すべてこの日付より後に発生する日付を指定する必要があります。ただし、残りの支払日の指定順序に制限はありません。日付は、DATE 関数を使って入力するか、他の数式または他の関数の結果を指定します。たとえば、2008 年 5 月 23 日を入力する場合は、DATE (2008,5,23) を使用します。日付を文字列として入力した場合、エラーが発生することがあります。</param>
        <param name="Arg3">推測 - と思われる数値は、 <b>Xirr</b>関数の計算結果に近いです。</param>
        <summary>定期的でないキャッシュ フローに対する内部利益率を返します。一連の定期的なキャッシュ フローに対する内部利益率を計算する場合は、IRR 関数を使います。</summary>
        <returns>To be added.</returns>
        <remarks><para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>日付に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>
            <b>Xirr は、少なくとも 1 つの正のキャッシュ フローと負のキャッシュ フローを 1 つです。</b>それ以外の場合、 <b>xirr 関数</b>は、#NUM を返します。 エラー値です。 </para>
          <para>日付が有効な日付でない場合、#VALUE を<b>Xirr</b>が返します。 エラー値です。 </para>
          <para>開始日より前の日付である場合、#NUM を<b>Xirr</b>が返します。 エラー値です。 </para>
          <para>値と日付値の個数が異なる場合、#NUM を<b>Xirr</b>が返します。 エラー値です。 </para>
          <para>ほとんどの場合、 <b>xirr 関数</b>の計算の推定値を指定する必要はありません。 省略した場合、推定値は 0.1 (10%) と見なされます。 </para>
          <para>
            <b>Xirr 関数</b>と密接な関係<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xnpv(System.Object,System.Object)" />、正味の現在値の関数です。 <b>Xirr 関数</b>で計算された利益率は、xnpv 利率 = 0 です。 </para>
          <para><b>Xirr メソッド</b>の計算に反復計算の手法が使用されます。 変化率 (推定値で始まる) を使用して、 <b>Xirr</b>が循環の計算結果が 0.000001% になるまでです。 <b>Xirr メソッド</b>は、後動作の結果を見つけられない場合は 100 とすると、#NUM! エラー値が返されます。 までの速度が変更されます。 </para>
          <para>図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para>各項目の意味は次のとおりです。</para>
          <para>di = i 回目または最後の支払日。</para>
          <para>d1 = 最初の支払日。</para>
          <para>Pi = i 回目または最後の支払。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Xnpv">
      <MemberSignature Language="C#" Value="public double Xnpv (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Xnpv([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xnpv(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xnpv (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Xnpv(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16814)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">収支明細表の日付に対応する一連のキャッシュ フローを指定します。最初の支払いは投資の最初に発生する原価や支払いに対応し、省略することができます。</param>
        <param name="Arg2">日付 キャッシュ フローに対応する一連の支払日を指定します。最初の支払日は、収支明細表の先頭に対応します。残りの支払日には、この日付より後の日付を指定する必要があります。ただし、指定順序は自由です。</param>
        <summary>必ずしも定期的でないキャッシュ フローのスケジュールの正味現在価値を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: <b>Xnpv</b>メソッドが (= XNPV (速度、値、日付))、対応する XNPV 関数に必要な引数のレートに対応するパラメーターを提供していません。 使用して、XNPV 関数を呼び出す、 <b>Xpnv</b>メソッドを使用する代わりに、VBA コードでは、この制限を回避するのには、<see cref="M:Microsoft.Office.Interop.Excel._Application.Evaluate(System.Object)" />メソッドです。</para>
          <para>定期的な一連のキャッシュ フローに対する正味現在価値を計算するために使用して、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />メソッドです。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Xor">
      <MemberSignature Language="C#" Value="public bool Xor (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Xor([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xor (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16953)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 から 254 までの条件をテストする場合は、 <b>TRUE</b>または<b>FALSE</b>のいずれかにすることができ、論理値、配列、または参照することができます。</param>
        <param name="Arg2">1 から 254 までの条件をテストする場合は、 <b>TRUE</b>または<b>FALSE</b>のいずれかにすることができ、論理値、配列、または参照することができます。</param>
        <param name="Arg3">1 から 254 までの条件をテストする場合は、 <b>TRUE</b>または<b>FALSE</b>のいずれかにすることができ、論理値、配列、または参照することができます。</param>
        <param name="Arg4">1 から 254 までの条件をテストする場合は、 <b>TRUE</b>または<b>FALSE</b>のいずれかにすることができ、論理値、配列、または参照することができます。</param>
        <param name="Arg5">1 から 254 までの条件をテストする場合は、 <b>TRUE</b>または<b>FALSE</b>のいずれかにすることができ、論理値、配列、または参照することができます。</param>
        <param name="Arg6">1 から 254 までの条件をテストする場合は、 <b>TRUE</b>または<b>FALSE</b>のいずれかにすることができ、論理値、配列、または参照することができます。</param>
        <param name="Arg7">1 から 254 までの条件をテストする場合は、 <b>TRUE</b>または<b>FALSE</b>のいずれかにすることができ、論理値、配列、または参照することができます。</param>
        <param name="Arg8">1 から 254 までの条件をテストする場合は、 <b>TRUE</b>または<b>FALSE</b>のいずれかにすることができ、論理値、配列、または参照することができます。</param>
        <param name="Arg9">1 から 254 までの条件をテストする場合は、 <b>TRUE</b>または<b>FALSE</b>のいずれかにすることができ、論理値、配列、または参照することができます。</param>
        <param name="Arg10">1 から 254 までの条件をテストする場合は、 <b>TRUE</b>または<b>FALSE</b>のいずれかにすることができ、論理値、配列、または参照することができます。</param>
        <param name="Arg11">1 から 254 までの条件をテストする場合は、 <b>TRUE</b>または<b>FALSE</b>のいずれかにすることができ、論理値、配列、または参照することができます。</param>
        <param name="Arg12">1 から 254 までの条件をテストする場合は、 <b>TRUE</b>または<b>FALSE</b>のいずれかにすることができ、論理値、配列、または参照することができます。</param>
        <param name="Arg13">1 から 254 までの条件をテストする場合は、 <b>TRUE</b>または<b>FALSE</b>のいずれかにすることができ、論理値、配列、または参照することができます。</param>
        <param name="Arg14">1 から 254 までの条件をテストする場合は、 <b>TRUE</b>または<b>FALSE</b>のいずれかにすることができ、論理値、配列、または参照することができます。</param>
        <param name="Arg15">1 から 254 までの条件をテストする場合は、 <b>TRUE</b>または<b>FALSE</b>のいずれかにすることができ、論理値、配列、または参照することができます。</param>
        <param name="Arg16">1 から 254 までの条件をテストする場合は、 <b>TRUE</b>または<b>FALSE</b>のいずれかにすることができ、論理値、配列、または参照することができます。</param>
        <param name="Arg17">1 から 254 までの条件をテストする場合は、 <b>TRUE</b>または<b>FALSE</b>のいずれかにすることができ、論理値、配列、または参照することができます。</param>
        <param name="Arg18">1 から 254 までの条件をテストする場合は、 <b>TRUE</b>または<b>FALSE</b>のいずれかにすることができ、論理値、配列、または参照することができます。</param>
        <param name="Arg19">1 から 254 までの条件をテストする場合は、 <b>TRUE</b>または<b>FALSE</b>のいずれかにすることができ、論理値、配列、または参照することができます。</param>
        <param name="Arg20">1 から 254 までの条件をテストする場合は、 <b>TRUE</b>または<b>FALSE</b>のいずれかにすることができ、論理値、配列、または参照することができます。</param>
        <param name="Arg21">1 から 254 までの条件をテストする場合は、 <b>TRUE</b>または<b>FALSE</b>のいずれかにすることができ、論理値、配列、または参照することができます。</param>
        <param name="Arg22">1 から 254 までの条件をテストする場合は、 <b>TRUE</b>または<b>FALSE</b>のいずれかにすることができ、論理値、配列、または参照することができます。</param>
        <param name="Arg23">1 から 254 までの条件をテストする場合は、 <b>TRUE</b>または<b>FALSE</b>のいずれかにすることができ、論理値、配列、または参照することができます。</param>
        <param name="Arg24">1 から 254 までの条件をテストする場合は、 <b>TRUE</b>または<b>FALSE</b>のいずれかにすることができ、論理値、配列、または参照することができます。</param>
        <param name="Arg25">1 から 254 までの条件をテストする場合は、 <b>TRUE</b>または<b>FALSE</b>のいずれかにすることができ、論理値、配列、または参照することができます。</param>
        <param name="Arg26">1 から 254 までの条件をテストする場合は、 <b>TRUE</b>または<b>FALSE</b>のいずれかにすることができ、論理値、配列、または参照することができます。</param>
        <param name="Arg27">1 から 254 までの条件をテストする場合は、 <b>TRUE</b>または<b>FALSE</b>のいずれかにすることができ、論理値、配列、または参照することができます。</param>
        <param name="Arg28">1 から 254 までの条件をテストする場合は、 <b>TRUE</b>または<b>FALSE</b>のいずれかにすることができ、論理値、配列、または参照することができます。</param>
        <param name="Arg29">1 から 254 までの条件をテストする場合は、 <b>TRUE</b>または<b>FALSE</b>のいずれかにすることができ、論理値、配列、または参照することができます。</param>
        <param name="Arg30">1 から 254 までの条件をテストする場合は、 <b>TRUE</b>または<b>FALSE</b>のいずれかにすることができ、論理値、配列、または参照することができます。</param>
        <summary>すべての引数の論理排他 OR を返します。</summary>
        <returns><b>BOOL</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="YearFrac">
      <MemberSignature Language="C#" Value="public double YearFrac (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YearFrac([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YearFrac(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YearFrac (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16835)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">開始日: 起算日を表す日付を指定します。</param>
        <param name="Arg2">終了日: 対象期間の最終日を表す日付を指定します。</param>
        <param name="Arg3">基準: 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>2 つの日付 (開始日と終了日) の間の期間が、1 年間に対して占める割合を返します。このワークシート関数を使用すると、特定の期間に割り当てられる年利や年債の割合を求めることができます。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: DATE 関数を使用するか、他の数式または関数の結果として、日付を入力する必要があります。 たとえば、2008 年 5 月 23 日の DATE(2008,5,23) を使用します。 日付をテキストとして入力した場合、問題が発生することができます。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4</term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>引数に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para><b>開始日、終了日に有効な日付を #value!</b> エラー値です。 </para>
          <para>場合に&lt;0 または基準&gt;4、 <b>YearFrac</b>が #NUM を返す! エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="YieldDisc">
      <MemberSignature Language="C#" Value="public double YieldDisc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YieldDisc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YieldDisc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YieldDisc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16821)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">現在価値: 額面 $ 100 に対する証券の価値を指定します。</param>
        <param name="Arg4">償還価額: 額面 $ 100 に対する証券の償還額を指定します。</param>
        <param name="Arg5">基準: 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>割引債の年利回りを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: DATE 関数を使用するか、他の数式または関数の結果として、日付を入力する必要があります。 たとえば、2008 年 5 月 23 日の DATE(2008,5,23) を使用します。 日付をテキストとして入力した場合、問題が発生することができます。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4</term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>受渡日、満期日、基準に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para><b>受領または成熟度が有効な日付でない場合、#VALUE を!</b> エラー値です。 </para>
          <para>場合 ≤ 0 または償還 ≤ 0 で<b>ある場合</b>#NUM を返します。 エラー値です。 </para>
          <para>場合に&lt;0 または基準&gt;4 で<b>ある場合</b>が #NUM を返す! エラー値です。 </para>
          <para>場合は受領成熟度で<b>ある場合</b>は、#NUM を返します。 エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="YieldMat">
      <MemberSignature Language="C#" Value="public double YieldMat (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YieldMat([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YieldMat(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YieldMat (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16816)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">受渡日: 証券の受渡日を指定します。受渡日とは、発行日以降に証券が買い手に引き渡される日付です。</param>
        <param name="Arg2">満期日: 証券の満期日を指定します。満期日とは、証券の支払期日です。</param>
        <param name="Arg3">発行日: 証券の発行日を指定します。日付にはシリアル値が使用されます。</param>
        <param name="Arg4">利率: 発行日の証券の利率を指定します。</param>
        <param name="Arg5">現在価値: 額面 $ 100 に対する証券の価値を指定します。</param>
        <param name="Arg6">基準: 計算に使用する基準日数を示す数値を指定します。</param>
        <summary>満期日に利息が支払われる証券の利回りを返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: DATE 関数を使用するか、他の数式または関数の結果として、日付を入力する必要があります。 たとえば、2008 年 5 月 23 日の DATE(2008,5,23) を使用します。 日付をテキストとして入力した場合、問題が発生することができます。</para>
          <list type="table">
            <item>
              <term>0 または省略</term>
              <description>30 日/360 日 (NASD 方式)</description>
            </item>
            <item>
              <term>1</term>
              <description>実際の日数/実際の日数</description>
            </item>
            <item>
              <term>2</term>
              <description>実際の日数/360 日</description>
            </item>
            <item>
              <term>3</term>
              <description>実際の日数/365 日</description>
            </item>
            <item>
              <term>4</term>
              <description>30 日/360 日 (ヨーロッパ方式)</description>
            </item>
          </list>
          <para>Excel では、日付を連続したシリアル値として処理することで、日付の計算が行われています。既定では、1900 年 1 月 1 日がシリアル値 1 として保存されます。2008 年 1 月 1 日は 1900 年 1 月 1 日から 39,448 日後に当たるので、シリアル値は 39,448 になります。Macintosh 版 Excel では、標準として異なる日付システムが使用されています。</para>
          <para>受渡日とは、債券などの証券の売買代金を決済した日付です。満期日とは、証券の支払期日です。たとえば、2008 年 1 月 1 日に発行された 30 年債券を、発行日の 6 か月後に購入したとします。この債券は、発行日が 2008 年 1 月 1 日、受渡日が 2008 年 7 月 1 日になり、満期日は、発行日の 2008 年 1 月 1 日から 30 年後の 2038 年 1 月 1 日になります。</para>
          <para>受渡日、満期日、発行日、基準に整数以外の値を指定すると、小数点以下が切り捨てられます。</para>
          <para>受渡日、満期日、または問題が有効な日付でない場合、<b>受渡</b>が #VALUE を返します。 エラー値です。 </para>
          <para>場合レート&lt;0 または #NUM を返すならば ≤ 0 で<b>ある</b>かどうかです。 エラー値です。 </para>
          <para>場合に&lt;0 または基準&gt;4、<b>受渡</b>が #NUM を返す! エラー値です。 </para>
          <para>場合は受領成熟度、<b>受渡</b>が #NUM を返します。 エラー値です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Z_Test">
      <MemberSignature Language="C#" Value="public double Z_Test (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Z_Test([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Z_Test(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Z_Test (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16926)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列: 母集団平均の検定対象となるデータを含む数値配列またはセル範囲を指定します。</param>
        <param name="Arg2">検定する値を指定します。</param>
        <param name="Arg3">σ: 母集団全体に基づく標準偏差を指定します。省略すると、標本に基づく標準偏差が使用されます。</param>
        <summary>z 検定の片側確率の値を返します。Z_TEST メソッドは、仮説の母集団平均μ0 について、配列で指定されたデータの観測値平均 (観測された標本平均) よりも標本平均が大きくなる確率を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>配列が空の場合は、 <b>Z_Test</b>はエラー値 #n/a を返します。 </para>
          <para>Σ が指定されている場合、 
            <b>Z_Test</b>は次のように計算されます。 </para>
          <para>Σ が指定されている場合は Z_Test の図 1: 数式</para>
          <para> </para>
          <para> </para>
          <para>σが省略されている場合は、次のような計算が行われます。</para>
          <para>Σ が省略された場合は Z_Test の図 2: 数式</para>
          <para> </para>
          <para> </para>
          <para>ここで、x は標本平均 AVERAGE(配列)、s は標本に基づく標準偏差 STDEV_S(配列)、n は標本内の観測値の個数 COUNT(配列) です。</para>
          <para>
            <b>Z_Test</b>では、標本の平均ある観測値 average (配列) より大きい場合、基になる母集団の平均が μ 0 を確率を表します。 正規分布の対称性から場合 average (配列) &lt; μ 0、 <b>Z_Test</b>戻り値 0.5 より大きい値です。</para>
          <para>標本の平均になるよりは、average (配列)、(両方向) に μ 0 から離れたとき、基になる母集団の平均 μ 0 では、両側の確率を計算するのには、次の数式を使用できます。</para>
          <para>= 2 * MIN(Z_TEST(array,μ0,sigma)、1 - Z_TEST(array,μ0,sigma)) です。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ZTest">
      <MemberSignature Language="C#" Value="public double ZTest (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ZTest([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ZTest(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ZTest (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16708)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">配列: 母集団平均の検定対象となるデータを含む数値配列またはセル範囲を指定します。</param>
        <param name="Arg2">検定する値を指定します。</param>
        <param name="Arg3">σ: 母集団全体に基づく標準偏差を指定します。省略すると、標本に基づく標準偏差が使用されます。</param>
        <summary>z 検定の片側確率の値を返します。ZTest メソッドは、仮説の母集団平均μ0 について、配列で指定されたデータの観測値平均 (観測された標本平均) よりも標本平均が大きくなる確率を返します。</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>重要</b>: この関数は 1 つを交換済みか、正確さの向上を提供することがあり、名前がそれ以上の複数の新しい関数は、使用状況を反映します。 この関数は、Excel の以前のバージョンとの互換性のために利用できます。 ただし、下位互換性を維持する必要がない場合する必要があります、新しい関数を使用して、正確にその機能を説明するためです。 新しい関数の詳細についてを参照してください、<see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Z_Test(System.Object,System.Double,System.Object)" />メソッドです。</para>
          <para>配列が空の場合、 <b>ztest 関数</b>は、#N/A エラー値を返します。 </para>
          <para>
            <b>Ztest 関数</b>は、シグマが指定されている場合に、次のように計算されます。 </para>
          <para>Σ が指定されている場合、ztest 関数の数式を図 1:</para>
          <para> </para>
          <para> </para>
          <para>σが省略されている場合は、次のような計算が行われます。</para>
          <para>Σ が省略された場合、ztest 関数の数式を図 2:</para>
          <para> </para>
          <para> </para>
          <para>ここで、x は標本平均 AVERAGE(配列)、s は標本に基づく標準偏差 STDEV(配列)、n は標本内の観測値の個数 COUNT(配列) です。</para>
          <para>
            <b>Ztest 関数</b>は、標本の平均ある観測値 average (配列) より大きい場合、基になる母集団の平均が μ 0 を確率を表します。 正規分布の対称性から場合 average (配列) &lt; μ 0、ztest 関数は戻り値 0.5 より大きい値です。</para>
          <para>標本の平均になるよりは、average (配列)、(両方向) に μ 0 から離れたとき、基になる母集団の平均 μ 0 では、両側の確率を計算するのには次の数式を使用することができます: = 2 * MIN(ZTEST(array,μ0,sigma)、1 - ZTEST (配列, μ 0、シグマ))。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
  </Members>
</Type>