<Type Name="TextConnection" FullName="Microsoft.Office.Interop.Excel.TextConnection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="501c6ebc8a77ba133658ccd6644b87ad9afb0275" />
    <Meta Name="ms.sourcegitcommit" Value="e7d3480b6ad64431c29c74a1b422c662de0b511d" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="09/24/2018" />
    <Meta Name="ms.locfileid" Value="20585121" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface TextConnection" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract TextConnection" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Excel.TextConnection" />
  <TypeSignature Language="VB.NET" Value="Public Interface TextConnection" />
  <TypeSignature Language="C++ CLI" Value="public interface class TextConnection" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("000244D3-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(2)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4096)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="6b6fc-101">Excel データ フィードのデータ ソースへの接続を有効にするサービス契約の設定が含まれています。</span>
      <span class="sxs-lookup">
        <span data-stu-id="6b6fc-101">Contains Service Contract settings that enable Excel to connect to a Data Feed data source.</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Application ^ Application { Microsoft::Office::Interop::Excel::Application ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6b6fc-102">アプリケーションを返します。 <see cref="T:Microsoft.Office.Interop.Excel.Application" /> Excel アプリケーションを表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-102">Returns an Application <see cref="T:Microsoft.Office.Interop.Excel.Application" /> object that represents the Excel application.</span>
          </span>
          <span data-ttu-id="6b6fc-103">読み取り専用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-103">Read-only.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public object Connection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Connection" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.Connection" />
      <MemberSignature Language="VB.NET" Value="Public Property Connection As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Connection { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1432)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1432)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1432)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6b6fc-104">返すまたは、テキスト データ ソースに接続する Excel を有効にするテキスト ファイルの名前を含む文字列を設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-104">Returns or sets a string that contains text file names that enable Excel to connect to text data sources.</span>
          </span>
          <span data-ttu-id="6b6fc-105">
            <b>オブジェクト</b>(<b>オブジェクト</b>の C#)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-105">
              <b>Object</b> (<b>object</b> in C#).</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.Creator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Creator As XlCreator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlCreator Creator { Microsoft::Office::Interop::Excel::XlCreator get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6b6fc-106">指定されたオブジェクトを作成したアプリケーションを 32 ビットの整数値として返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-106">Returns a 32-bit integer that indicates the application in which the specified object was created.</span>
          </span>
          <span data-ttu-id="6b6fc-107">読み取り専用の<b>整数値</b>(C# では<b>int</b> )。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-107">Read-only <b>Integer</b> (<b>int</b> in C#).</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>
            <span data-ttu-id="6b6fc-108">オブジェクトは、Excel で作成された、ために、このプロパティは、5843454 C は、文字列「クリエーター」を表す 16 進値を返します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="6b6fc-108">Because the object was created in Excel, this property returns the hexadecimal value, 5843454C, which represents the string "XCEL".</span>
            </span>
          </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parent { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6b6fc-109">
            <b>オブジェクト</b>(C# での<b>オブジェクト</b>) を指定した<b>TextConnection</b>オブジェクトの親オブジェクトを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-109">Returns an <b>Object</b> (<b>object</b> in C#) that represents the parent object of the specified <b>TextConnection</b> object.</span>
          </span>
          <span data-ttu-id="6b6fc-110">読み取り専用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-110">Read-only.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileColumnDataTypes">
      <MemberSignature Language="C#" Value="public object TextFileColumnDataTypes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object TextFileColumnDataTypes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileColumnDataTypes" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileColumnDataTypes As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ TextFileColumnDataTypes { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1865)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1865)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1865)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6b6fc-111">クエリ テーブルにインポートするテキスト ファイル内の対応する列に適用されるデータ型を指定する定数の配列を設定または返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-111">Returns or sets an ordered array of constants that specify the data types applied to the corresponding columns in the text file that you’re importing into a query table.</span>
          </span>
          <span data-ttu-id="6b6fc-112">各列の既定の定数は<b>xlGeneral</b>です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-112">The default constant for each column is <b>xlGeneral</b>.</span>
          </span>
          <span data-ttu-id="6b6fc-113">
            <b>オブジェクト</b>(<b>オブジェクト</b>の C#)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-113">
              <b>Object</b> (<b>object</b> in C#).</span>
          </span>
          <span data-ttu-id="6b6fc-114">読み取り/書き込み。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-114">Read/Write.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileCommaDelimiter">
      <MemberSignature Language="C#" Value="public bool TextFileCommaDelimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TextFileCommaDelimiter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileCommaDelimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileCommaDelimiter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TextFileCommaDelimiter { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1862)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1862)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1862)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6b6fc-115">
            <b>True の</b>場合、クエリ テーブルにテキスト ファイルをインポートするときにカンマを区切り文字です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-115">
              <b>True</b> if the comma is the delimiter when you import a text file into a query table.</span>
          </span>
          <span data-ttu-id="6b6fc-116">
            <b>False</b>場合は、区切り文字として他のいくつかの文字を使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-116">
              <b>False</b> if you want to use some other character as the delimiter.</span>
          </span>
          <span data-ttu-id="6b6fc-117">既定値は <b>False</b> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-117">The default value is <b>False</b>.</span>
          </span>
          <span data-ttu-id="6b6fc-118">読み取り/書き込み<b>ブール型</b>(C# では<b>bool</b> )。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-118">Read/Write <b>Boolean</b> (<b>bool</b> in C#).</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileConsecutiveDelimiter">
      <MemberSignature Language="C#" Value="public bool TextFileConsecutiveDelimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TextFileConsecutiveDelimiter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileConsecutiveDelimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileConsecutiveDelimiter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TextFileConsecutiveDelimiter { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1859)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1859)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1859)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6b6fc-119">
            <b>True の</b>場合、クエリ テーブルにテキスト ファイルをインポートするとき、連続した区切り文字が 1 つの区切り文字として扱われます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-119">
              <b>True</b> if consecutive delimiters are treated as a single delimiter when you import a text file into a query table.</span>
          </span>
          <span data-ttu-id="6b6fc-120">既定値は <b>False</b> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-120">The default value is <b>False</b>.</span>
          </span>
          <span data-ttu-id="6b6fc-121">
            <b>ブール値</b>(C# では<b>bool</b> )読み取り/書き込み。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-121">
              <b>Boolean</b> (<b>bool</b> in C#) Read/Write.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileDecimalSeparator">
      <MemberSignature Language="C#" Value="public string TextFileDecimalSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TextFileDecimalSeparator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileDecimalSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileDecimalSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TextFileDecimalSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1870)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1870)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1870)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6b6fc-122">クエリ テーブルにテキスト ファイルをインポートするときに Excel が使用する 10 進数の区切り文字を設定または返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-122">Returns or sets the decimal separator character that Excel uses when you import a text file into a query table.</span>
          </span>
          <span data-ttu-id="6b6fc-123">既定ではシステムの桁区切り記号文字です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-123">The default is the system decimal separator character.</span>
          </span>
          <span data-ttu-id="6b6fc-124">読み取り/書き込み<b>の文字列</b>(C# では<b>文字列</b>) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-124">Read/Write <b>String</b> (<b>string</b> in C#).</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileFixedColumnWidths">
      <MemberSignature Language="C#" Value="public object TextFileFixedColumnWidths { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object TextFileFixedColumnWidths" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileFixedColumnWidths" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileFixedColumnWidths As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ TextFileFixedColumnWidths { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1866)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1866)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1866)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6b6fc-125">クエリ テーブルにインポートするテキスト ファイルの文字数) 単位での列の幅に対応する整数の配列を設定または返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-125">Returns or sets an array of integers that correspond to the widths of the columns (in characters) in the text file that you’re importing into a query table.</span>
          </span>
          <span data-ttu-id="6b6fc-126">有効な幅は、1 から 32767 文字までです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-126">Valid widths are from 1 through 32767 characters.</span>
          </span>
          <span data-ttu-id="6b6fc-127">読み取り/書き込みの<b>オブジェクト</b>(C# で<b>オブジェクト</b>を参照)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-127">Read/Write <b>Object</b> (<b>object</b> in C#).</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileHeaderRow">
      <MemberSignature Language="C#" Value="public bool TextFileHeaderRow { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TextFileHeaderRow" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileHeaderRow" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileHeaderRow As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TextFileHeaderRow { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(3118)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(3118)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(3118)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6b6fc-128">(開始行) の最初の行をヘッダー行として扱うかどうかを指定する値を設定または返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-128">Returns or sets value that specifies whether or not the first row (from the starting row) should be treated as a header row.</span>
          </span>
          <span data-ttu-id="6b6fc-129">
            <b>ブール値</b>(C# では<b>bool</b> )読み取り/書き込み。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-129">
              <b>Boolean</b> (<b>bool</b> in C#) Read/Write.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileOtherDelimiter">
      <MemberSignature Language="C#" Value="public string TextFileOtherDelimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TextFileOtherDelimiter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileOtherDelimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileOtherDelimiter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TextFileOtherDelimiter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1864)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1864)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1864)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6b6fc-130">クエリ テーブルにテキスト ファイルをインポートするときに区切り記号として使用する文字を設定または返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-130">Returns or sets the character used as the delimiter when you import a text file into a query table.</span>
          </span>
          <span data-ttu-id="6b6fc-131">既定値は、 <b>Nothing</b> (null 参照 (Visual Basic では Nothing) では C#) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-131">The default value is <b>Nothing</b> (a null reference (Nothing in Visual Basic) in C#).</span>
          </span>
          <span data-ttu-id="6b6fc-132">読み取り/書き込み<b>の文字列</b>(C# では<b>文字列</b>) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-132">Read/Write <b>String</b> (<b>string</b> in C#).</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileParseType">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlTextParsingType TextFileParseType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlTextParsingType TextFileParseType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileParseType" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileParseType As XlTextParsingType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlTextParsingType TextFileParseType { Microsoft::Office::Interop::Excel::XlTextParsingType get(); void set(Microsoft::Office::Interop::Excel::XlTextParsingType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1857)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1857)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1857)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlTextParsingType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6b6fc-133">取得またはクエリ テーブルにインポートするテキスト ファイルのデータの列形式を設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-133">Returns or sets the column format for the data in the text file that you’re importing into a query table.</span>
          </span>
          <span data-ttu-id="6b6fc-134">読み取り/書き込み<see cref="T:Microsoft.Office.Interop.Excel.XlTextParsingType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-134">Read/Write <see cref="T:Microsoft.Office.Interop.Excel.XlTextParsingType" />.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFilePlatform">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlPlatform TextFilePlatform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlPlatform TextFilePlatform" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFilePlatform" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFilePlatform As XlPlatform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlPlatform TextFilePlatform { Microsoft::Office::Interop::Excel::XlPlatform get(); void set(Microsoft::Office::Interop::Excel::XlPlatform value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1855)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1855)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1855)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlPlatform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6b6fc-135">クエリ テーブルにインポートするテキスト ファイルの原点を設定または返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-135">Returns or sets the origin of the text file you’re importing into the query table.</span>
          </span>
          <span data-ttu-id="6b6fc-136">このプロパティは、データのインポート中に使用されるコード ページを決定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-136">This property determines which code page is used during the data import.</span>
          </span>
          <span data-ttu-id="6b6fc-137">読み取り/書き込み<see cref="T:Microsoft.Office.Interop.Excel.XlPlatform" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-137">Read/write <see cref="T:Microsoft.Office.Interop.Excel.XlPlatform" />.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFilePromptOnRefresh">
      <MemberSignature Language="C#" Value="public bool TextFilePromptOnRefresh { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TextFilePromptOnRefresh" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFilePromptOnRefresh" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFilePromptOnRefresh As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TextFilePromptOnRefresh { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1869)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1869)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1869)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6b6fc-138">
            <b>True</b>クエリ テーブルが更新されるたびにインポートするテキスト ファイルの名前を指定する場合です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-138">
              <b>True</b> if you want to specify the name of the imported text file each time the query table is refreshed.</span>
          </span>
          <span data-ttu-id="6b6fc-139">テキスト ファイルのインポート] ダイアログ ボックスを使用すると、パスとファイル名を指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-139">The Import Text File dialog box allows you to specify the path and file name.</span>
          </span>
          <span data-ttu-id="6b6fc-140">既定値は <b>False</b> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-140">The default value is <b>False</b>.</span>
          </span>
          <span data-ttu-id="6b6fc-141">読み取り/書き込み<b>ブール型</b>(C# では<b>bool</b> )。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-141">Read/Write <b>Boolean</b> (<b>bool</b> in C#).</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileSemicolonDelimiter">
      <MemberSignature Language="C#" Value="public bool TextFileSemicolonDelimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TextFileSemicolonDelimiter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileSemicolonDelimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileSemicolonDelimiter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TextFileSemicolonDelimiter { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1861)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1861)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1861)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6b6fc-142">
            <b>True の</b>場合は、クエリ テーブルにテキスト ファイルをインポートする場合と、セミコロンは区切り記号の値、<see cref="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileParseType" />プロパティが<b>xlDelimited</b>です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-142">
              <b>True</b> if the semicolon is the delimiter when you import a text file into a query table, and if the value of the <see cref="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileParseType" /> property is <b>xlDelimited</b>.</span>
          </span>
          <span data-ttu-id="6b6fc-143">既定値は <b>False</b> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-143">The default value is <b>False</b>.</span>
          </span>
          <span data-ttu-id="6b6fc-144">読み取り/書き込み<b>ブール型</b>(C# では<b>bool</b> )。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-144">Read/Write <b>Boolean</b> (<b>bool</b> in C#).</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileSpaceDelimiter">
      <MemberSignature Language="C#" Value="public bool TextFileSpaceDelimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TextFileSpaceDelimiter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileSpaceDelimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileSpaceDelimiter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TextFileSpaceDelimiter { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1863)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1863)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1863)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6b6fc-145">
            <b>True の</b>場合、クエリ テーブルにテキスト ファイルをインポートする場合、空白文字が区切り記号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-145">
              <b>True</b> if the space character is the delimiter when you import a text file into a query table.</span>
          </span>
          <span data-ttu-id="6b6fc-146">既定値は <b>False</b> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-146">The default value is <b>False</b>.</span>
          </span>
          <span data-ttu-id="6b6fc-147">読み取り/書き込み<b>ブール型</b>(C# では<b>bool</b> )。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-147">Read/Write <b>Boolean</b> (<b>bool</b> in C#).</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileStartRow">
      <MemberSignature Language="C#" Value="public int TextFileStartRow { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextFileStartRow" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileStartRow" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileStartRow As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TextFileStartRow { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1856)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1856)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1856)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6b6fc-148">テキストの解析が開始されます、クエリ テーブルにテキスト ファイルをインポートする行の番号を設定または返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-148">Returns or sets the row number at which text parsing will begin when you import a text file into a query table.</span>
          </span>
          <span data-ttu-id="6b6fc-149">有効な値は、1 32767 までからの整数です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-149">Valid values are integers from 1 through 32767.</span>
          </span>
          <span data-ttu-id="6b6fc-150">既定値は 1 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-150">The default value is 1.</span>
          </span>
          <span data-ttu-id="6b6fc-151">読み取り/書き込みの<b>整数値</b>(C# では<b>int</b> )。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-151">Read/Write <b>Integer</b> (<b>int</b> in C#).</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileTabDelimiter">
      <MemberSignature Language="C#" Value="public bool TextFileTabDelimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TextFileTabDelimiter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileTabDelimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileTabDelimiter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TextFileTabDelimiter { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1860)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1860)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1860)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6b6fc-152">
            <b>True の</b>場合、クエリ テーブルにテキスト ファイルをインポートする場合は、区切り記号、タブ文字です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-152">
              <b>True</b> if the tab character is the delimiter when you import a text file into a query table.</span>
          </span>
          <span data-ttu-id="6b6fc-153">既定値は <b>False</b> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-153">The default value is <b>False</b>.</span>
          </span>
          <span data-ttu-id="6b6fc-154">読み取り/書き込み<b>ブール型</b>(C# では<b>bool</b> )。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-154">Read/Write <b>Boolean</b> (<b>bool</b> in C#).</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileTextQualifier">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlTextQualifier TextFileTextQualifier { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlTextQualifier TextFileTextQualifier" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileTextQualifier" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileTextQualifier As XlTextQualifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlTextQualifier TextFileTextQualifier { Microsoft::Office::Interop::Excel::XlTextQualifier get(); void set(Microsoft::Office::Interop::Excel::XlTextQualifier value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1858)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1858)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1858)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlTextQualifier</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6b6fc-155">クエリ テーブルにテキスト ファイルをインポートするときに、テキスト区切り記号を設定または返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-155">Returns or sets the text qualifier when you import a text file into a query table.</span>
          </span>
          <span data-ttu-id="6b6fc-156">テキスト修飾子は、かっこで囲まれたデータが、テキスト形式を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-156">The text qualifier specifies that the enclosed data is in text format.</span>
          </span>
          <span data-ttu-id="6b6fc-157">読み取り/書き込み<see cref="T:Microsoft.Office.Interop.Excel.XlTextQualifier" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-157">Read/Write <see cref="T:Microsoft.Office.Interop.Excel.XlTextQualifier" />.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileThousandsSeparator">
      <MemberSignature Language="C#" Value="public string TextFileThousandsSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TextFileThousandsSeparator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileThousandsSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileThousandsSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TextFileThousandsSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1871)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1871)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1871)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6b6fc-158">
            <b>True</b>で始まる、テキストとしてインポートされた数値を扱います、"-"記号、マイナス記号をします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-158">
              <b>True</b> for Excel to treat numbers imported as text that begin with a "-" symbol as a negative symbol.</span>
          </span>
          <span data-ttu-id="6b6fc-159">
            <b>False</b>で始まる、テキストとしてインポートされた数値を扱うには Excel の「-」記号をテキストとして。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-159">
              <b>False</b> for Excel to treat numbers imported as text that begin with a "-" symbol as text.</span>
          </span>
          <span data-ttu-id="6b6fc-160">読み取り/書き込み<b>ブール型</b>(C# では<b>bool</b> )。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-160">Read/Write <b>Boolean</b> (<b>bool</b> in C#).</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileTrailingMinusNumbers">
      <MemberSignature Language="C#" Value="public bool TextFileTrailingMinusNumbers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TextFileTrailingMinusNumbers" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileTrailingMinusNumbers" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileTrailingMinusNumbers As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TextFileTrailingMinusNumbers { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2164)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2164)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(2164)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6b6fc-161">
            <b>True</b>で始まる、テキストとしてインポートされた数値を扱います、"-"記号、マイナス記号をします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-161">
              <b>True</b> for Excel to treat numbers imported as text that begin with a "-" symbol as a negative symbol.</span>
          </span>
          <span data-ttu-id="6b6fc-162">
            <b>False</b>で始まる、テキストとしてインポートされた数値を扱うには Excel の「-」記号をテキストとして。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-162">
              <b>False</b> for Excel to treat numbers imported as text that begin with a "-" symbol as text.</span>
          </span>
          <span data-ttu-id="6b6fc-163">読み取り/書き込み<b>ブール型</b>(C# では<b>bool</b> )。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-163">Read/Write <b>Boolean</b> (<b>bool</b> in C#).</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFileVisualLayout">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlTextVisualLayoutType TextFileVisualLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlTextVisualLayoutType TextFileVisualLayout" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.TextConnection.TextFileVisualLayout" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFileVisualLayout As XlTextVisualLayoutType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlTextVisualLayoutType TextFileVisualLayout { Microsoft::Office::Interop::Excel::XlTextVisualLayoutType get(); void set(Microsoft::Office::Interop::Excel::XlTextVisualLayoutType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2245)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2245)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(2245)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlTextVisualLayoutType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6b6fc-164">値を取得または設定、<see cref="T:Microsoft.Office.Interop.Excel.XlTextVisualLayoutType" />をインポートするテキストのレイアウトは、左から右または右から左にするかどうかを示す列挙です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-164">Returns or sets an <see cref="T:Microsoft.Office.Interop.Excel.XlTextVisualLayoutType" /> enumeration that indicates whether the visual layout of the text being imported is left-to-right or right-to-left.</span>
          </span>
          <span data-ttu-id="6b6fc-165">読み取り/書き込み。</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b6fc-165">Read/Write.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>