<Type Name="Workbooks" FullName="Microsoft.Office.Interop.Excel.Workbooks">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e216142f85071dc6b33c9b1eb3c9ddffaa7369de" />
    <Meta Name="ms.sourcegitcommit" Value="e7d3480b6ad64431c29c74a1b422c662de0b511d" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="09/24/2018" />
    <Meta Name="ms.locfileid" Value="20574936" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface Workbooks : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract Workbooks implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Excel.Workbooks" />
  <TypeSignature Language="VB.NET" Value="Public Interface Workbooks&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="public interface class Workbooks : System::Collections::IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("000208DB-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4288)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>すべてのコレクション、 <see cref="T:Microsoft.Office.Interop.Excel.Workbook" /> Microsoft Excel アプリケーションでは、現在のオブジェクトを開きます。</summary>
    <remarks>
      <para>使用して、 <see cref="P:Microsoft.Office.Interop.Excel._Application.Workbooks" /><b>ブック</b>のコレクションを返すプロパティです。</para>
      <para>使用して、 <see cref="M:Microsoft.Office.Interop.Excel.Workbooks.Add(System.Object)" /> 、新しい空のブックを作成し、コレクションに追加する方法です。</para>
      <para>使用して、<see cref="M:Microsoft.Office.Interop.Excel.Workbooks.Open(System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />ファイルを開くためのメソッドです。</para>
      <para>1 つの<b>ブック</b>オブジェクトの使い方の詳細についてを参照してください、<see cref="T:Microsoft.Office.Interop.Excel.Workbook" />オブジェクトです。</para>
      <para></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="__OpenText">
      <MemberSignature Language="C#" Value="public void __OpenText (string Filename, object Origin, object StartRow, object DataType, Microsoft.Office.Interop.Excel.XlTextQualifier TextQualifier = Microsoft.Office.Interop.Excel.XlTextQualifier.xlTextQualifierDoubleQuote, object ConsecutiveDelimiter, object Tab, object Semicolon, object Comma, object Space, object Other, object OtherChar, object FieldInfo, object TextVisualLayout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void __OpenText([in]string Filename, [in]object Origin, [in]object StartRow, [in]object DataType, [in]valuetype Microsoft.Office.Interop.Excel.XlTextQualifier TextQualifier, [in]object ConsecutiveDelimiter, [in]object Tab, [in]object Semicolon, [in]object Comma, [in]object Space, [in]object Other, [in]object OtherChar, [in]object FieldInfo, [in]object TextVisualLayout) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Workbooks.__OpenText(System.String,System.Object,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlTextQualifier,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub __OpenText (Filename As String, Optional Origin As Object, Optional StartRow As Object, Optional DataType As Object, Optional TextQualifier As XlTextQualifier = Microsoft.Office.Interop.Excel.XlTextQualifier.xlTextQualifierDoubleQuote, Optional ConsecutiveDelimiter As Object, Optional Tab As Object, Optional Semicolon As Object, Optional Comma As Object, Optional Space As Object, Optional Other As Object, Optional OtherChar As Object, Optional FieldInfo As Object, Optional TextVisualLayout As Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(683)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.LCIDConversion(14)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1088)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Filename" Type="System.String" />
        <Parameter Name="Origin" Type="System.Object" />
        <Parameter Name="StartRow" Type="System.Object" />
        <Parameter Name="DataType" Type="System.Object" />
        <Parameter Name="TextQualifier" Type="Microsoft.Office.Interop.Excel.XlTextQualifier" />
        <Parameter Name="ConsecutiveDelimiter" Type="System.Object" />
        <Parameter Name="Tab" Type="System.Object" />
        <Parameter Name="Semicolon" Type="System.Object" />
        <Parameter Name="Comma" Type="System.Object" />
        <Parameter Name="Space" Type="System.Object" />
        <Parameter Name="Other" Type="System.Object" />
        <Parameter Name="OtherChar" Type="System.Object" />
        <Parameter Name="FieldInfo" Type="System.Object" />
        <Parameter Name="TextVisualLayout" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Filename">To be added.</param>
        <param name="Origin">To be added.</param>
        <param name="StartRow">To be added.</param>
        <param name="DataType">To be added.</param>
        <param name="TextQualifier">To be added.</param>
        <param name="ConsecutiveDelimiter">To be added.</param>
        <param name="Tab">To be added.</param>
        <param name="Semicolon">To be added.</param>
        <param name="Comma">To be added.</param>
        <param name="Space">To be added.</param>
        <param name="Other">To be added.</param>
        <param name="OtherChar">To be added.</param>
        <param name="FieldInfo">To be added.</param>
        <param name="TextVisualLayout">To be added.</param>
        <summary>内部使用のため予約済みです。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="_Default">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Workbook this[object Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Workbook _Default(object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Workbooks._Default(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property _Default(Index As Object) As Workbook" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Workbook ^ default[System::Object ^] { Microsoft::Office::Interop::Excel::Workbook ^ get(System::Object ^ Index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.TypeLibFunc(1024)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Workbook</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Index">To be added.</param>
        <summary>内部使用のため予約済みです。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="_Open">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Workbook _Open (string Filename, object UpdateLinks, object ReadOnly, object Format, object Password, object WriteResPassword, object IgnoreReadOnlyRecommended, object Origin, object Delimiter, object Editable, object Notify, object Converter, object AddToMru);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Workbook _Open([in]string Filename, [in]object UpdateLinks, [in]object ReadOnly, [in]object Format, [in]object Password, [in]object WriteResPassword, [in]object IgnoreReadOnlyRecommended, [in]object Origin, [in]object Delimiter, [in]object Editable, [in]object Notify, [in]object Converter, [in]object AddToMru) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Workbooks._Open(System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function _Open (Filename As String, Optional UpdateLinks As Object, Optional ReadOnly As Object, Optional Format As Object, Optional Password As Object, Optional WriteResPassword As Object, Optional IgnoreReadOnlyRecommended As Object, Optional Origin As Object, Optional Delimiter As Object, Optional Editable As Object, Optional Notify As Object, Optional Converter As Object, Optional AddToMru As Object) As Workbook" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(682)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.LCIDConversion(13)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1088)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Workbook</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Filename" Type="System.String" />
        <Parameter Name="UpdateLinks" Type="System.Object" />
        <Parameter Name="ReadOnly" Type="System.Object" />
        <Parameter Name="Format" Type="System.Object" />
        <Parameter Name="Password" Type="System.Object" />
        <Parameter Name="WriteResPassword" Type="System.Object" />
        <Parameter Name="IgnoreReadOnlyRecommended" Type="System.Object" />
        <Parameter Name="Origin" Type="System.Object" />
        <Parameter Name="Delimiter" Type="System.Object" />
        <Parameter Name="Editable" Type="System.Object" />
        <Parameter Name="Notify" Type="System.Object" />
        <Parameter Name="Converter" Type="System.Object" />
        <Parameter Name="AddToMru" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Filename">To be added.</param>
        <param name="UpdateLinks">To be added.</param>
        <param name="ReadOnly">To be added.</param>
        <param name="Format">To be added.</param>
        <param name="Password">To be added.</param>
        <param name="WriteResPassword">To be added.</param>
        <param name="IgnoreReadOnlyRecommended">To be added.</param>
        <param name="Origin">To be added.</param>
        <param name="Delimiter">To be added.</param>
        <param name="Editable">To be added.</param>
        <param name="Notify">To be added.</param>
        <param name="Converter">To be added.</param>
        <param name="AddToMru">To be added.</param>
        <summary>内部使用のため予約済みです。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="_OpenText">
      <MemberSignature Language="C#" Value="public void _OpenText (string Filename, object Origin, object StartRow, object DataType, Microsoft.Office.Interop.Excel.XlTextQualifier TextQualifier = Microsoft.Office.Interop.Excel.XlTextQualifier.xlTextQualifierDoubleQuote, object ConsecutiveDelimiter, object Tab, object Semicolon, object Comma, object Space, object Other, object OtherChar, object FieldInfo, object TextVisualLayout, object DecimalSeparator, object ThousandsSeparator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void _OpenText([in]string Filename, [in]object Origin, [in]object StartRow, [in]object DataType, [in]valuetype Microsoft.Office.Interop.Excel.XlTextQualifier TextQualifier, [in]object ConsecutiveDelimiter, [in]object Tab, [in]object Semicolon, [in]object Comma, [in]object Space, [in]object Other, [in]object OtherChar, [in]object FieldInfo, [in]object TextVisualLayout, [in]object DecimalSeparator, [in]object ThousandsSeparator) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Workbooks._OpenText(System.String,System.Object,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlTextQualifier,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub _OpenText (Filename As String, Optional Origin As Object, Optional StartRow As Object, Optional DataType As Object, Optional TextQualifier As XlTextQualifier = Microsoft.Office.Interop.Excel.XlTextQualifier.xlTextQualifierDoubleQuote, Optional ConsecutiveDelimiter As Object, Optional Tab As Object, Optional Semicolon As Object, Optional Comma As Object, Optional Space As Object, Optional Other As Object, Optional OtherChar As Object, Optional FieldInfo As Object, Optional TextVisualLayout As Object, Optional DecimalSeparator As Object, Optional ThousandsSeparator As Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1773)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.LCIDConversion(16)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1088)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Filename" Type="System.String" />
        <Parameter Name="Origin" Type="System.Object" />
        <Parameter Name="StartRow" Type="System.Object" />
        <Parameter Name="DataType" Type="System.Object" />
        <Parameter Name="TextQualifier" Type="Microsoft.Office.Interop.Excel.XlTextQualifier" />
        <Parameter Name="ConsecutiveDelimiter" Type="System.Object" />
        <Parameter Name="Tab" Type="System.Object" />
        <Parameter Name="Semicolon" Type="System.Object" />
        <Parameter Name="Comma" Type="System.Object" />
        <Parameter Name="Space" Type="System.Object" />
        <Parameter Name="Other" Type="System.Object" />
        <Parameter Name="OtherChar" Type="System.Object" />
        <Parameter Name="FieldInfo" Type="System.Object" />
        <Parameter Name="TextVisualLayout" Type="System.Object" />
        <Parameter Name="DecimalSeparator" Type="System.Object" />
        <Parameter Name="ThousandsSeparator" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Filename">To be added.</param>
        <param name="Origin">To be added.</param>
        <param name="StartRow">To be added.</param>
        <param name="DataType">To be added.</param>
        <param name="TextQualifier">To be added.</param>
        <param name="ConsecutiveDelimiter">To be added.</param>
        <param name="Tab">To be added.</param>
        <param name="Semicolon">To be added.</param>
        <param name="Comma">To be added.</param>
        <param name="Space">To be added.</param>
        <param name="Other">To be added.</param>
        <param name="OtherChar">To be added.</param>
        <param name="FieldInfo">To be added.</param>
        <param name="TextVisualLayout">To be added.</param>
        <param name="DecimalSeparator">To be added.</param>
        <param name="ThousandsSeparator">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="_OpenXML">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Workbook _OpenXML (string Filename, object Stylesheets);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Workbook _OpenXML([in]string Filename, [in]object Stylesheets) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Workbooks._OpenXML(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function _OpenXML (Filename As String, Optional Stylesheets As Object) As Workbook" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2071)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1088)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Workbook</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Filename" Type="System.String" />
        <Parameter Name="Stylesheets" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Filename">To be added.</param>
        <param name="Stylesheets">To be added.</param>
        <summary>内部使用のため予約済みです。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Workbook Add (object Template);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Workbook Add([in]object Template) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Workbooks.Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (Optional Template As Object) As Workbook" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(181)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.LCIDConversion(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Workbook</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Template" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Template">省略可能な<b>オブジェクト</b>です。 新しいブックを作成する方法を決定します。 この引数が既存の Microsoft Excel ファイルの名前を指定する文字列の場合は、指定のファイルをテンプレートとして新しいブックが作成されます。 この引数が定数の場合は、新しいブックには、指定した型の 1 つのシートが含まれています。 次のいずれかの<see cref="T:Microsoft.Office.Interop.Excel.XlWBATemplate" />定数: <b>xlWBATChart</b>、 <b>xlWBATExcel4IntlMacroSheet</b>、 <b>xlWBATExcel4MacroSheet</b>、 <b>xlWBATWorksheet</b>。 この引数を省略すると、Microsoft Excel の空白のシート (<b>か</b>シートの数が設定されます) で新しいブックを作成します。</param>
        <summary>新しいブックを作成します。 作業中のブックを新しいブックになります。 返します、<see cref="T:Microsoft.Office.Interop.Excel.Workbook" />オブジェクトです。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>場合、<paramref name="Template" />の引数は、ファイルを指定、ファイル名にパスを含めることができます。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Workbooks.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Application ^ Application { Microsoft::Office::Interop::Excel::Application ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返します、 <see cref="T:Microsoft.Office.Interop.Excel.Application" /> 、Microsoft Excel アプリケーションを表すオブジェクト。 読み取り専用。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanCheckOut">
      <MemberSignature Language="C#" Value="public bool CanCheckOut (string Filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanCheckOut([in]string Filename) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Workbooks.CanCheckOut(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanCheckOut (Filename As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanCheckOut(System::String ^ Filename);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2070)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Filename">
          <b>文字列</b> が必要です。 チェックアウトするファイル名を指定します。</param>
        <summary>
          <b>True</b> の場合、指定したブックをサーバーからチェックアウトできます。値の取得および設定が可能です。ブール型 ( <b>Boolean</b> ) の値を使用します。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckOut">
      <MemberSignature Language="C#" Value="public void CheckOut (string Filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CheckOut([in]string Filename) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Workbooks.CheckOut(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CheckOut (Filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CheckOut(System::String ^ Filename);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2069)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Filename">
          <b>文字列</b> が必要です。 チェックアウトするファイル名を指定します。</param>
        <summary>サーバーから指定されたブックを編集するためのローカル コンピューターにコピーします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Workbooks.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(277)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.LCIDConversion(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>オブジェクトを閉じます。</summary>
        <remarks>
          <para>
            <b>Close</b>メソッドを使用してブックを閉じると、ブック内の Auto_Close マクロが実行されません。 使用して、<see cref="M:Microsoft.Office.Interop.Excel._Workbook.RunAutoMacros(Microsoft.Office.Interop.Excel.XlRunAutoMacro)" />自動を実行するメソッドは、マクロを閉じます。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Workbooks.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(118)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(118)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コレクション内にあるオブジェクトの数を返します。 整数型 ( <b>Integer</b>) の値を使用します。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Workbooks.Creator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Creator As XlCreator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlCreator Creator { Microsoft::Office::Interop::Excel::XlCreator get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のオブジェクトが作成されたアプリケーションを示す 32 ビットの整数を返します。 オブジェクトは、Microsoft Excel で作成されている場合を返します文字列 XCEL を 16 進数の 5843454c に相当 読み取り専用<see cref="T:Microsoft.Office.Interop.Excel.XlCreator" />。</summary>
        <value>To be added.</value>
        <remarks>
          <para>
            <b>Creator</b>プロパティは、各アプリケーションが 4 文字のクリエーター コードを持つ Macintosh の Excel で使用するよう設計されています。 たとえば、Microsoft Excel は、クリエーター コードを持っています。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Workbooks.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-4)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1024)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Workbook Item[object Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Workbook Item(object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Workbooks.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item(Index As Object) As Workbook" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Workbook ^ Item[System::Object ^] { Microsoft::Office::Interop::Excel::Workbook ^ get(System::Object ^ Index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(170)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(170)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Workbook</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Index">
          <b>オブジェクト</b>が必要です。 オブジェクトの名前またはインデックス番号を指定します。</param>
        <summary>コレクションから単一のオブジェクトを返します。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Workbook Open (string Filename, object UpdateLinks, object ReadOnly, object Format, object Password, object WriteResPassword, object IgnoreReadOnlyRecommended, object Origin, object Delimiter, object Editable, object Notify, object Converter, object AddToMru, object Local, object CorruptLoad);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Workbook Open([in]string Filename, [in]object UpdateLinks, [in]object ReadOnly, [in]object Format, [in]object Password, [in]object WriteResPassword, [in]object IgnoreReadOnlyRecommended, [in]object Origin, [in]object Delimiter, [in]object Editable, [in]object Notify, [in]object Converter, [in]object AddToMru, [in]object Local, [in]object CorruptLoad) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Workbooks.Open(System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Open (Filename As String, Optional UpdateLinks As Object, Optional ReadOnly As Object, Optional Format As Object, Optional Password As Object, Optional WriteResPassword As Object, Optional IgnoreReadOnlyRecommended As Object, Optional Origin As Object, Optional Delimiter As Object, Optional Editable As Object, Optional Notify As Object, Optional Converter As Object, Optional AddToMru As Object, Optional Local As Object, Optional CorruptLoad As Object) As Workbook" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1923)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.LCIDConversion(15)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Workbook</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Filename" Type="System.String" />
        <Parameter Name="UpdateLinks" Type="System.Object" />
        <Parameter Name="ReadOnly" Type="System.Object" />
        <Parameter Name="Format" Type="System.Object" />
        <Parameter Name="Password" Type="System.Object" />
        <Parameter Name="WriteResPassword" Type="System.Object" />
        <Parameter Name="IgnoreReadOnlyRecommended" Type="System.Object" />
        <Parameter Name="Origin" Type="System.Object" />
        <Parameter Name="Delimiter" Type="System.Object" />
        <Parameter Name="Editable" Type="System.Object" />
        <Parameter Name="Notify" Type="System.Object" />
        <Parameter Name="Converter" Type="System.Object" />
        <Parameter Name="AddToMru" Type="System.Object" />
        <Parameter Name="Local" Type="System.Object" />
        <Parameter Name="CorruptLoad" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Filename">
          <b>文字列</b> が必要です。 開くブックのファイル名です。</param>
        <param name="UpdateLinks">省略可能な<b>オブジェクト</b>です。 ファイル内の方法のリンクが更新されるかを指定します。 この引数を省略すると、リンクの更新方法を指定する入力が求められます。 それ以外の場合、この引数は、次の表に記載されている値のいずれかです。WKS でファイルを開く、Microsoft Excel の場合、[WK1 または WK3 の書式を設定し、<paramref name="UpdateLinks" />の引数が 2 で、Microsoft Excel ファイルに接続されているグラフからグラフが生成されます。 引数が 0 の場合は、グラフは作成されません。</param>
        <param name="ReadOnly">省略可能な<b>オブジェクト</b>です。 ブックを読み取り専用モードで開くには、True を指定します。</param>
        <param name="Format">省略可能な<b>オブジェクト</b>です。 この引数に Excel は、テキスト ファイルを開くときは、次の表に示すように、区切り文字を指定します。 この引数を省略すると、現在の区切り記号が使用されます。</param>
        <param name="Password">省略可能な<b>オブジェクト</b>です。 保護されたブックを開くためのパスワードを含む文字列です。 この引数を省略するし、ブックにパスワードが必要です、パスワードの入力が求められます。</param>
        <param name="WriteResPassword">省略可能な<b>オブジェクト</b>です。 読み取り専用のブックへの書き込みに必要なパスワードを含む文字列です。 この引数を省略するし、ブックにパスワードが必要です、ユーザーはパスワードを求められます。</param>
        <param name="IgnoreReadOnlyRecommended">省略可能な<b>オブジェクト</b>です。 [ <b>読み取り専用を推奨する</b>] チェック ボックスをオンにして保存されたブックを開くときでも、読み取り専用を推奨するメッセージを非表示にするには、 <b>True</b> を指定します。</param>
        <param name="Origin">省略可能な<b>オブジェクト</b>です。 ファイルがテキスト ファイルの場合は、この引数では、発生元、コード ページとキャリッジ リターンとライン フィード (CR-LF) を正しくマップすることができます) ことを示します。 次のいずれかの<see cref="T:Microsoft.Office.Interop.Excel.XlPlatform" />定数:<b>コード ページと</b>、 <b>xlWindows</b>、または<b>するために必要</b>です。 この引数を省略すると、現在のオペレーティング システムが使用されます。</param>
        <param name="Delimiter">省略可能な<b>オブジェクト</b>です。 場合は、ファイルは、テキスト ファイルで、引数<b>Format</b>には、6、この引数は、区切り記号として使用する文字を指定する文字列です。 たとえば、タブの Chr(9) を使用して、使用、セミコロン、またはカスタムの文字を使用してコンマを使用しての「;」です。 文字列の最初の文字のみが使用されます。</param>
        <param name="Editable">省略可能な<b>オブジェクト</b>です。 ファイルが Microsoft Excel 4.0 のアドインの場合、この引数に<b>True</b>を表示可能なウィンドウになるようにアドインを開きます。 この引数が<b>False</b>または省略すると、アドインを開くと、非表示、再表示にすることはできません。 Microsoft Excel 5.0 以降で作成されたアドインには、このオプションは適用されません。 ファイルが Excel テンプレートの場合は、 <b>True</b>を使いますを編集用に指定されたテンプレートを開くまたは<b>False</b>を指定したテンプレートに基づく新しいブックを開きます。 既定値は <b>False</b> です。</param>
        <param name="Notify">省略可能な<b>オブジェクト</b>です。 場合ファイルは、読み取り/書き込みモードで開くことができません、この引数に<b>true を指定</b>ファイルを通知リストに追加するのには。 Microsoft Excel ファイルを読み取り専用として開くには、ポーリング通知リストに、ファイルが利用可能になったらユーザーに通知されます。 この引数が<b>False</b>か省略すると、通知を行わず、ファイルへのアクセスは失敗します。</param>
        <param name="Converter">省略可能な<b>オブジェクト</b>です。 ファイルを開くときの最初のファイル コンバーターのインデックス。 指定したファイル コンバーターが試みられます。このコンバーターがファイルを認識しない場合は、他のすべてのコンバーターが試行されます。 コンバーターのインデックスは、によって返されるコンバーターの行番号で構成されています、<see cref="P:Microsoft.Office.Interop.Excel._Application.FileConverters(System.Object,System.Object)" />プロパティ。</param>
        <param name="AddToMru">省略可能な<b>オブジェクト</b>です。 最近使用したファイルの<b>場合は true</b>の一覧にこのブックを追加するのには。 既定値は <b>False</b> です。</param>
        <param name="Local">省略可能な<b>オブジェクト</b>です。 <b>True の場合</b>は、(コントロール パネルの設定を含む)、Microsoft Excel の言語ファイルを保存します。 <b>False</b>(既定値) ファイルを保存する Visual Basic for Applications の言語 (VBA) では英語 (米国) から Workbooks.Open を実行している VBA プロジェクトが以前の国際化 XL5/95 VBA プロジェクトでない限り)。</param>
        <param name="CorruptLoad">省略可能な<b>オブジェクト</b>です。 使用できる定数は、次のいずれか: <b>xlNormalLoad</b>、 <b>xlRepairFile</b>、および<b>xlExtractData</b>。 値が指定されていない場合の既定の動作は、通常は標準ですが、Excel のファイルを開くことが既に実行しようとしている場合、読み込みやデータの修復があります。 最初の試行は、正常です。 Excel は、ファイルを開くときに動作を停止する場合、2 回目の試行は、安全な負荷です。 場合は再度、Excel には、動作が停止した、次の試行は、データ リカバリです。</param>
        <summary>ブックを開きます。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>既定では、プログラムでファイルを開くときにマクロが有効にします。 使用して、<see cref="P:Microsoft.Office.Interop.Excel._Application.AutomationSecurity" />プログラムを使用してファイルを開くときに使用するマクロのセキュリティ モードを設定するプロパティです。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenDatabase">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Workbook OpenDatabase (string Filename, object CommandText, object CommandType, object BackgroundQuery, object ImportDataAs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Workbook OpenDatabase([in]string Filename, [in]object CommandText, [in]object CommandType, [in]object BackgroundQuery, [in]object ImportDataAs) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Workbooks.OpenDatabase(System.String,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenDatabase (Filename As String, Optional CommandText As Object, Optional CommandType As Object, Optional BackgroundQuery As Object, Optional ImportDataAs As Object) As Workbook" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2067)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Workbook</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Filename" Type="System.String" />
        <Parameter Name="CommandText" Type="System.Object" />
        <Parameter Name="CommandType" Type="System.Object" />
        <Parameter Name="BackgroundQuery" Type="System.Object" />
        <Parameter Name="ImportDataAs" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Filename">
          <b>文字列</b> が必要です。 接続文字列を指定します。</param>
        <param name="CommandText">省略可能な<b>オブジェクト</b>です。 クエリのコマンド テキストを指定します。</param>
        <param name="CommandType">省略可能な<b>オブジェクト</b>です。 クエリのコマンドの種類です。 利用できる次のコマンドの種類: 既定、SQL、およびテーブル。</param>
        <param name="BackgroundQuery">省略可能な<b>オブジェクト</b>です。 クエリのバック グラウンドです。</param>
        <param name="ImportDataAs">省略可能な<b>オブジェクト</b>です。 クエリの形式を決定します。</param>
        <summary>返します、 <see cref="T:Microsoft.Office.Interop.Excel.Workbook" /> 、データベースを表すオブジェクト。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenText">
      <MemberSignature Language="C#" Value="public void OpenText (string Filename, object Origin, object StartRow, object DataType, Microsoft.Office.Interop.Excel.XlTextQualifier TextQualifier = Microsoft.Office.Interop.Excel.XlTextQualifier.xlTextQualifierDoubleQuote, object ConsecutiveDelimiter, object Tab, object Semicolon, object Comma, object Space, object Other, object OtherChar, object FieldInfo, object TextVisualLayout, object DecimalSeparator, object ThousandsSeparator, object TrailingMinusNumbers, object Local);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OpenText([in]string Filename, [in]object Origin, [in]object StartRow, [in]object DataType, [in]valuetype Microsoft.Office.Interop.Excel.XlTextQualifier TextQualifier, [in]object ConsecutiveDelimiter, [in]object Tab, [in]object Semicolon, [in]object Comma, [in]object Space, [in]object Other, [in]object OtherChar, [in]object FieldInfo, [in]object TextVisualLayout, [in]object DecimalSeparator, [in]object ThousandsSeparator, [in]object TrailingMinusNumbers, [in]object Local) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Workbooks.OpenText(System.String,System.Object,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlTextQualifier,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OpenText (Filename As String, Optional Origin As Object, Optional StartRow As Object, Optional DataType As Object, Optional TextQualifier As XlTextQualifier = Microsoft.Office.Interop.Excel.XlTextQualifier.xlTextQualifierDoubleQuote, Optional ConsecutiveDelimiter As Object, Optional Tab As Object, Optional Semicolon As Object, Optional Comma As Object, Optional Space As Object, Optional Other As Object, Optional OtherChar As Object, Optional FieldInfo As Object, Optional TextVisualLayout As Object, Optional DecimalSeparator As Object, Optional ThousandsSeparator As Object, Optional TrailingMinusNumbers As Object, Optional Local As Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1924)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.LCIDConversion(18)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Filename" Type="System.String" />
        <Parameter Name="Origin" Type="System.Object" />
        <Parameter Name="StartRow" Type="System.Object" />
        <Parameter Name="DataType" Type="System.Object" />
        <Parameter Name="TextQualifier" Type="Microsoft.Office.Interop.Excel.XlTextQualifier" />
        <Parameter Name="ConsecutiveDelimiter" Type="System.Object" />
        <Parameter Name="Tab" Type="System.Object" />
        <Parameter Name="Semicolon" Type="System.Object" />
        <Parameter Name="Comma" Type="System.Object" />
        <Parameter Name="Space" Type="System.Object" />
        <Parameter Name="Other" Type="System.Object" />
        <Parameter Name="OtherChar" Type="System.Object" />
        <Parameter Name="FieldInfo" Type="System.Object" />
        <Parameter Name="TextVisualLayout" Type="System.Object" />
        <Parameter Name="DecimalSeparator" Type="System.Object" />
        <Parameter Name="ThousandsSeparator" Type="System.Object" />
        <Parameter Name="TrailingMinusNumbers" Type="System.Object" />
        <Parameter Name="Local" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Filename">
          <b>文字列</b> が必要です。 読み込まれるテキスト ファイルの名前を指定します。</param>
        <param name="Origin">省略可能な<b>オブジェクト</b>です。 テキスト ファイルの原点を指定します。 次のいずれかの<see cref="T:Microsoft.Office.Interop.Excel.XlPlatform" />定数:<b>コード ページと</b>、 <b>xlWindows</b>、または<b>するために必要</b>です。 さらに、適切なコード ページのコード ページ番号を表す整数値可能性があります。 たとえば、「1256」では、ソース テキスト ファイルのエンコーディングは、アラビア語 (Windows) であることは指定します。 この引数を省略した場合、メソッドは、<b>テキスト インポート ウィザード</b>で、元のファイル オプションの現在の設定を使用します。</param>
        <param name="StartRow">省略可能な<b>オブジェクト</b>です。 テキストの解析を開始する行の数です。 既定値は 1 です。</param>
        <param name="DataType">省略可能な<b>オブジェクト</b>です。 ファイル内のデータの列の形式を指定します。 次のいずれかの<see cref="T:Microsoft.Office.Interop.Excel.XlTextParsingType" />定数: <b>xlDelimited</b>または<b>xlFixedWidth</b>です。 この引数を指定しない場合、Microsoft Excel はファイルを開いたときに列の形式を決定しようとします。</param>
        <param name="TextQualifier">省略可能な<see cref="T:Microsoft.Office.Interop.Excel.XlTextQualifier" />。 文字列の引用符を指定します。 これらのいずれかの<see cref="T:Microsoft.Office.Interop.Excel.XlTextQualifier" />定数。<b>xlTextQualifierDoubleQuote</b><paramref name="default" /><b>xlTextQualifierNone</b><b>xlTextQualifierSingleQuote</b></param>
        <param name="ConsecutiveDelimiter">省略可能な<b>オブジェクト</b>です。 <b>True を指定</b>して、連続する区切り文字では、1 つの区切り記号と見なされます。 既定では <b>False です</b> 。</param>
        <param name="Tab">省略可能な<b>オブジェクト</b>です。 True を設定するタブ文字を区切り文字 (<paramref name="DataType" /><b>xlDelimited</b>をする必要があります)。 既定値は <b>False</b> です。</param>
        <param name="Semicolon">省略可能な<b>オブジェクト</b>です。 <b>True を指定</b>するセミコロンの文字があること、区切り記号 (<paramref name="DataType" /><b>xlDelimited</b>をする必要があります)。 既定値は <b>False</b> です。</param>
        <param name="Comma">省略可能な<b>オブジェクト</b>です。 <b>True</b>コンマ文字にする、区切り文字 (<paramref name="DataType" /><b>xlDelimited</b>をする必要があります)。 既定値は <b>False</b> です。</param>
        <param name="Space">省略可能な<b>オブジェクト</b>です。 の<b>真</b>の空白文字、区切り文字 (<paramref name="DataType" /><b>xlDelimited</b>をする必要があります)。 既定値は <b>False</b> です。</param>
        <param name="Other">省略可能な<b>オブジェクト</b>です。 <b>True</b>で指定された文字を使用して、<paramref name="OtherChar" />引数は、区切り記号である (<paramref name="DataType" /><b>xlDelimited</b>をする必要があります)。 既定値は <b>False</b> です。</param>
        <param name="OtherChar">省略可能な<b>オブジェクト</b>(必要な場合<paramref name="Other" />が<b>True</b>)。 区切り文字を指定文字の場合<paramref name="Other" />が<b>true を指定</b>します。 複数の文字を 1 つ指定すると、文字列の最初の文字のみが使用されます。残りの文字は無視されます。</param>
        <param name="FieldInfo">省略可能な<see cref="T:Microsoft.Office.Interop.Excel.XlColumnDataType" />。 各列のデータの解析情報を格納する配列。 解釈の値に依存する<paramref name="DataType" />。 データが区切られている場合、この引数は、各 2 要素配列は特定の列の変換オプションを指定すると、2 つの要素の配列をします。 最初の要素は、列の番号 (1 から始まる値) と、2 番目の要素は、列を解析する方法を指定する<b>XlColumnDataType</b>定数のいずれかです。<b>xlGeneralFormat</b>一般的な<b>xlTextFormat</b>文字列<b>xlMDYFormat</b> MDY 日<b>xlDMYFormat</b>式日付<b>xlYMDFormat</b> YMD 日<b>xlMYDFormat</b>を日付<b>xlDYMFormat</b> DYM 日付<b>xlYDMFormat</b> YDM<b>xlEMDFormat</b> EMD の日付を日します。<b>xlSkipColumn</b><b>XlEMDFormat</b>は、スキップ ColumnYou がインストールして、台湾語の言語サポートを選択した場合にのみ使用できます。 定数<b>xlEMDFormat</b>は、台湾が使用されていることを指定します。任意の順序で列の指定ができます。 入力データの特定の列の列指定子がない場合、その列は標準設定で。<b>メモ</b>列はスキップすることを指定する場合と残りのすべての列の型を明示的に記述する必要がありますか、データが正しく解析されません。データの認識可能な日付がある場合、列の設定が [全般] の場合でもセルは、ワークシートの日付としてフォーマットされます。 さらに、列の上の日付の形式のいずれかを指定して、データを含まない日付として認識すると、ワークシートのセルの書式は General.If になりますし、ソース データは固定幅の列、各 2 要素配列の最初の要素列内の先頭の文字の位置の指定 (整数で 0 (ゼロ) の文字は、最初の文字)。 2 要素配列の 2 番目の要素は、上記の表に記載されている、0 から 9 までの数値として列の解析オプションを指定します。</param>
        <param name="TextVisualLayout">省略可能な<b>オブジェクト</b>です。 テキストの視覚的な配置を指定します。</param>
        <param name="DecimalSeparator">省略可能な<b>オブジェクト</b>です。 数値を認識するときに Excel で使用する小数点の記号。 既定の設定は、システム設定です。</param>
        <param name="ThousandsSeparator">省略可能な<b>オブジェクト</b>です。 何千も Excel が数値を認識するときに使用する区切り記号。 既定の設定は、システム設定です。次の表は、さまざまなインポート設定で Excel にテキストをインポートの結果を示しています。 数値の結果は、右端の列に表示されます。</param>
        <param name="TrailingMinusNumbers">省略可能な<b>オブジェクト</b>です。</param>
        <param name="Local">省略可能な<b>オブジェクト</b>です。</param>
        <summary>テキスト ファイルを分析して読み込みます。テキスト ファイルを 1 枚のシートとして、それを含む新しいブックを開きます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenXML">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Workbook OpenXML (string Filename, object Stylesheets, object LoadOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Workbook OpenXML([in]string Filename, [in]object Stylesheets, [in]object LoadOption) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Workbooks.OpenXML(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenXML (Filename As String, Optional Stylesheets As Object, Optional LoadOption As Object) As Workbook" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2280)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Workbook</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Filename" Type="System.String" />
        <Parameter Name="Stylesheets" Type="System.Object" />
        <Parameter Name="LoadOption" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Filename">
          <b>文字列</b> が必要です。 開くファイル名を指定します。</param>
        <param name="Stylesheets">省略可能な<b>オブジェクト</b>です。 1 つの値かを適用するには、どの XSLT (XSL 変換) スタイル シート処理命令を指定する値の配列。</param>
        <param name="LoadOption">省略可能な<b>オブジェクト</b>です。 Excel が XML データ ファイルを開く方法を指定します。 これらのいずれかの<see cref="T:Microsoft.Office.Interop.Excel.XlXmlLoadOption" />定数:<b>xlXmlLoadImportToList</b> XML リストの XML データ ファイルの内容を配置します。<b>xlXmlLoadMapXml</b>[ <b>XML データ構造</b>] 作業ウィンドウには、XML データ ファイルのスキーマを表示します。<b>xlXmlLoadOpenXml</b>XML データ ファイルを開きます。 ファイルの内容を平坦化されます。<b>xlXmlLoadPromptUser</b>ファイルを開く方法を選択するように求めます。</param>
        <summary>XML データ ファイルを開きます。 返します、<see cref="T:Microsoft.Office.Interop.Excel.Workbook" />オブジェクトです。</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>XML スプレッドシート形式でファイルを保存する以外の XML 機能は、Microsoft Office Professional Edition 2003 および Microsoft Office Excel 2003 でのみ使用します。</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Workbooks.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parent { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定されたオブジェクトの親オブジェクトを取得します。値の取得のみ可能です。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>